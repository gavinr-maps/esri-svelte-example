import{o as h,u as p,g as c,v as $,P as m,s as l,A as g,_ as y}from"./vec32-Dvg_eL9J.js";import{n as a}from"./vec3f64-BLpZdpfb.js";import{U as M}from"./sphere-C77djCO6.js";import{k as x}from"./mathUtils-BG-eq9fO.js";import{o as w}from"./geodesicAreaMeasurementUtils-BILXFcc4.js";function k(t,n){const i=M(n);h(i,0,0,0);for(let r=0;r<t.length;++r)p(i,i,t[r]);c(i,i,1/t.length);let u=0;for(let r=0;r<t.length;++r)u=Math.max(u,$(i,t[r]));n[3]=Math.sqrt(u)}function q(t,n){if(t.length<3)throw new Error("need at least 3 points to fit a plane");x(t[0],t[1],t[2],n)}function v(t,n){return m(t,n)+t[3]}function E(t,n,i,u){const r=A;return l(r.rings[0][0],t),l(r.rings[0][1],n),l(r.rings[0][2],i),l(r.rings[0][3],t),r.spatialReference=u,w(r)}function T(t,n=null,i=!0){const r=(o,f)=>{if(f[0]===0&&f[1]===0&&f[2]===0)return!1;for(let s=0;s<o.length;++s)if(m(f,o[s])<-1e-6)return!1;return!0};if(t.length===0)return!1;if(t.length===1)return n&&l(n,t[0]),!0;h(e,0,0,0);for(let o=0;o<t.length;++o)p(e,e,t[o]);if(g(e,e),r(t,e))return n&&l(n,e),!0;if(!i)return!1;for(let o=0;o<t.length;++o)for(let f=0;f<t.length;++f)if(o!==f&&(y(e,t[o],t[f]),g(e,e),r(t,e)))return n&&l(n,e),!0;return!1}function U(t){return t.pointerType!=="mouse"||t.button===0}const A={hasM:!1,hasZ:!0,rings:[[a(),a(),a(),a()]],spatialReference:null,type:"polygon"},e=a();export{U as M,q as g,k as h,T as j,E as m,v as p};
