import{e as l}from"./Evented-CXIxDjmW.js";import{S as y,s as p,L as g,K as _}from"./Accessor-D6mNnsWy.js";import{c as v}from"./reactiveUtils-BFQ0BtrB.js";import{c as T,y as a,b as k}from"./subclass-BR3PhgZG.js";import{_ as w}from"./Point-DB4Hp4hH.js";import{i as F,e as $,h as b}from"./progressUtils-l3fizrvn.js";import{o as E}from"./infoFor3D-CxOdoily.js";import"./shared-B3wH2qpO.js";import"./jsonMap-DCC6W5ex.js";import"./writer-3zufXUNV.js";import"./assets-C2mb-ea2.js";import"./index-CeCSsEgo.js";let s=class extends y{constructor(){super({}),this.files=[],this.progress=0,this._uploadTask=null,this._layer=null}destroy(){this.cancel(),this.files=[],this._layer=null,this._uploadTask=null}get state(){const e=this._uploadTask;return e&&this.files.length!==0?e.finished?e.error?"error":"success":"pending":"default"}get result(){var e;return((e=this._uploadTask)==null?void 0:e.value)??null}get error(){var e;return((e=this._uploadTask)==null?void 0:e.error)??null}uploadTo(e){this.cancel(),this.files=[],this._layer=e,this._uploadTask=v(async o=>{const i=await P(e);p(o),this.progress=0,this.files=i;const t=F($.upload,c=>{this.progress=c},"Upload.uploadTo");if(i.length===0)return null;p(o);const r=await e.extractAndFilterFiles(i);p(o),r.length>0&&(this.files=r);const d=new w({x:0,y:0,z:0,spatialReference:e.spatialReference}),u=await e.convertMesh(r,{location:d,signal:o,onProgress:t.makeOnProgress("createFromFiles")});if(p(o),!u)throw new T("editor:upload","could not upload or convert model");const h=r.reduce((c,m)=>c+m.size,0),f=t.simulate("loadMesh",b(h));try{await u.load()}finally{f.remove()}return u})}retry(){this._layer&&this.uploadTo(this._layer)}cancel(){var e;(e=this._uploadTask)==null||e.abort()}};l([a()],s.prototype,"files",void 0),l([a()],s.prototype,"progress",void 0),l([a()],s.prototype,"state",null),l([a()],s.prototype,"result",null),l([a()],s.prototype,"error",null),l([a()],s.prototype,"_uploadTask",void 0),l([a()],s.prototype,"_layer",void 0),s=l([k("esri.widgets.Editor.Upload")],s);let n=null;async function P(e){const{resolve:o,promise:i}=g(),t=document.createElement("input");t.type="file",t.multiple=!1,t.accept=[...E(e.infoFor3D),".zip"].join(","),t.style.display="none",document.body.appendChild(t);const r=_(t,"change",()=>o(t.files?Array.from(t.files):[]));return n?n(t):t.click(),i.finally(()=>{r.remove(),t.remove()})}function O(e){n=o=>{Promise.resolve().then(()=>e).then(i=>{if(!n)return;const t=new DataTransfer;i.forEach(r=>t.items.add(r)),o.files=t.files,o.dispatchEvent(new Event("change"))})}}function q(){n=null}export{s as Upload,q as clearPromptForFilesStub,O as stubFilePickerToSelect};
