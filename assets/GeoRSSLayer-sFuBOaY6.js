import{V as a,O as m,r as o,m as i,a as y}from"./Accessor-BHnuXKD2.js";import{A as u,P as d}from"./cast-BA_-jlhc.js";import{S as h}from"./MultiOriginJSONSupport-nGLpCFeg.js";import{o as c}from"./writer-B2bQV2uU.js";import{w as f}from"./Extent-CBBGeHb-.js";import{F as S}from"./Point-XGrwlf63.js";import{f as g}from"./Layer-C9uQlTBT.js";import{p as v,t as b}from"./ScaleRangeLayer-C59zG_yk.js";import{b as C}from"./OperationalLayer-Bts9W3HA.js";import{j as G}from"./PortalLayer-jhi5QQgB.js";import{f as P}from"./RefreshableLayer-Cn2UpWQD.js";import{u as w,d as _,y as $}from"./commonProperties-C0eC30J9.js";import{f as x}from"./Graphic-CFXUQZlS.js";import{n,d as R,y as k,S as F}from"./TextSymbol-BQ_NW9Xo.js";import"./index-tefRSezt.js";import"./JSONSupport-CGdeqxpk.js";import"./Evented-DCWccWGU.js";import"./Identifiable-BrT7zvUW.js";import"./Portal-CTRRujjZ.js";import"./Promise-CmQqe-ke.js";import"./TimeExtent-J5qnUFx_.js";import"./timeUtils-D2X862bk.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-TjZmCq6l.js";import"./colorUtils-Rxh2V3ai.js";import"./utils-DYurMneM.js";import"./screenUtils-_ZIvrt5o.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-Fi6iAz29.js";import"./vec3f64-BLpZdpfb.js";import"./common-DQOJ18NT.js";import"./reactiveUtils-BR0C1Kq4.js";import"./SimpleObservable-7oieNGD8.js";import"./layerUtils-dJgsXxkC.js";import"./PortalItem-CXk7DqVv.js";import"./portalItemUtils-rm7sAgcm.js";import"./projection-B2I9Bzj_.js";import"./Polyline-BmuD2-ZN.js";import"./mathUtils-DV9iOXpW.js";import"./projectBuffer-DOU0xvVi.js";import"./geodesicConstants-yASAK_zX.js";import"./ElevationInfo-Di4W6v5U.js";import"./opacityUtils-CSd4XoR2.js";import"./unitConversionUtils-C4AR5obr.js";import"./lengthUtils-DjJgJFRg.js";import"./AttributeTableTemplate-B7rH2qLr.js";import"./Clonable-DvJsj5LF.js";import"./enumeration-Cr5WIZs4.js";import"./Color-gncXBiLc.js";import"./ActionToggle-__-l4AdQ.js";import"./jsonUtils-Cu7OBRmN.js";import"./typeUtils-BSg8Y507.js";import"./collectionUtils-CbaToa73.js";import"./aaBoundingBox-CeBivBRq.js";const j=["atom","xml"],E={base:n,key:"type",typeMap:{"simple-line":R},errorContext:"symbol"},M={base:n,key:"type",typeMap:{"picture-marker":x,"simple-marker":k},errorContext:"symbol"},L={base:n,key:"type",typeMap:{"simple-fill":F},errorContext:"symbol"};let e=class extends v(P(C(G(b(h(g)))))){constructor(...t){super(...t),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(t,r){return typeof t=="string"?{url:t,...r}:t}readFeatureCollections(t,r){return r.featureCollection.layers.forEach(s=>{var l;const p=s.layerDefinition.drawingInfo.renderer.symbol;p&&p.type==="esriSFS"&&((l=p.outline)!=null&&l.style.includes("esriSFS"))&&(p.outline.style="esriSLSSolid")}),r.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const t=this._get("title");return t&&this.originOf("title")!=="defaults"?t:this.url?u(this.url,j)||"GeoRSS":t}set title(t){this._set("title",t)}load(t){const r=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},t).catch(a).then(()=>this._fetchService(r)).then(s=>{this.read(s,{origin:"service"})})),Promise.resolve(this)}async hasDataChanged(){const t=await this._fetchService();return this.read(t,{origin:"service",ignoreDefaults:!0}),!0}async _fetchService(t){const r=this.spatialReference,{data:s}=await d(m.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:S(r)?void 0:r.wkid??JSON.stringify(r)},signal:t});return s}_hasGeometry(t){var r;return((r=this.featureCollections)==null?void 0:r.some(s=>{var p,l;return((p=s.featureSet)==null?void 0:p.geometryType)===t&&((l=s.featureSet.features)==null?void 0:l.length)>0}))??!1}};o([i()],e.prototype,"description",void 0),o([i()],e.prototype,"featureCollections",void 0),o([c("service","featureCollections",["featureCollection.layers"])],e.prototype,"readFeatureCollections",null),o([i({type:f,json:{name:"lookAtExtent"}})],e.prototype,"fullExtent",void 0),o([i(w)],e.prototype,"id",void 0),o([i(_)],e.prototype,"legendEnabled",void 0),o([i({types:E,json:{write:!0}})],e.prototype,"lineSymbol",void 0),o([i({type:["show","hide"]})],e.prototype,"listMode",void 0),o([i({types:M,json:{write:!0}})],e.prototype,"pointSymbol",void 0),o([i({types:L,json:{write:!0}})],e.prototype,"polygonSymbol",void 0),o([i({type:["GeoRSS"]})],e.prototype,"operationalLayerType",void 0),o([i($)],e.prototype,"url",void 0),o([i({json:{origins:{service:{read:{source:"name",reader:t=>t||void 0}}}}})],e.prototype,"title",null),o([i({readOnly:!0,json:{read:!1},value:"geo-rss"})],e.prototype,"type",void 0),e=o([y("esri.layers.GeoRSSLayer")],e);const Ot=e;export{Ot as default};
