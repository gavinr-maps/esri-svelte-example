import{w as a}from"./Extent-g5W9hy0j.js";import{j as f}from"./Point-Cz2JYYmX.js";import{a as u}from"./projection-CyCZAIaD.js";import{g as i,f as S,W as d,E as y,U as x,D as h,R as O,u as J,s as N}from"./dataUtils-Pv68iOZD.js";import{m as w,j as B,_ as P,h as g}from"./RasterSymbolizer-DU-Ljv5-.js";import{T as k}from"./rasterFunctionHelper-Dw9wV9wU.js";import{w as b,j as v,a as z}from"./rasterProjectionHelper-Wej15Bp6.js";import{a as D,y as T,c as $}from"./GCSShiftTransform--7Cqhewv.js";import{r as p,a as j}from"./Accessor-BmwT4B0c.js";import{r as F}from"./enumeration-DpvDkLNI.js";import"./cast-CsZslgGN.js";import"./index-4eY77cms.js";import"./JSONSupport-DcrLLGjL.js";import"./writer-DKgfqj4X.js";import"./SimpleObservable-CvOkykwM.js";import"./vec3f64-BLpZdpfb.js";import"./Polyline-s-JzsQqo.js";import"./mathUtils-Cfq9PL9W.js";import"./projectBuffer-CQnuEMuP.js";import"./geodesicConstants-RQL9oKdk.js";import"./pixelRangeUtils-Bk2sXCMF.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./Color-VJEMvW-n.js";import"./colorUtils-Rxh2V3ai.js";import"./colorUtils-DaPfwnk3.js";import"./vec42-YcqnINSP.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./jsonUtils-CwFG8yN4.js";import"./typeUtils-B6WBEKDM.js";import"./colorRamps-CRjjPL3r.js";import"./Field-BDG0QV_T.js";import"./fieldType-CBeoJWlv.js";var l;let m=l=class extends D{constructor(){super(...arguments),this.type="identity"}clone(){return new l}};p([F({IdentityXform:"identity"})],m.prototype,"type",void 0),m=l=p([j("esri.layers.support.rasterTransforms.IdentityTransform")],m);const I=m,E={GCSShiftXform:$,IdentityXform:I,PolynomialXform:T};function G(n){if(!(n==null?void 0:n.type))return null;const e=E[n==null?void 0:n.type];if(e){const o=new e;return o.read(n),o}return null}class xt{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),o=S(e,t.type);return Promise.resolve(o!=null?o.toJSON():null)}computeStatisticsHistograms(t){const e=i.fromJSON(t.pixelBlock),o=w(e);return Promise.resolve(o)}async decode(t){const e=await B(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?a.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}async updateSymbolizer(t){var e;this.symbolizer=P.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=k(t.rasterFunctionJSON)}async process(t){var o;const e=this.rasterFunction.process({extent:a.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(r=>r!=null?i.fromJSON(r):null),primaryPixelSizes:(o=t.primaryPixelSizes)==null?void 0:o.map(r=>r!=null?f.fromJSON(r):null),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e==null?void 0:e.toJSON())}estimateStatisticsHistograms(t){const e=g(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=d(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return e&&e.forEach((o,r)=>{e.set(r,o==null?void 0:o.toJSON())}),Promise.resolve(e)}clipTile(t){const e=i.fromJSON(t.pixelBlock),o=y({...t,pixelBlock:e});return Promise.resolve(o==null?void 0:o.toJSON())}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(c=>c?new i(c):null),o=x(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,s=o;return t.coefs&&(s=h(o,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=O(t.destDimension,t.gcsGrid),s=J(s,t.isUV?"vector-uv":"vector-magdir",r)),{pixelBlock:s==null?void 0:s.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const o={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:s}=await N(t.meshType,t.simulationSettings,o,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:s.buffer},transferList:[r.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const e=a.fromJSON(t.projectedExtent),o=a.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new u({steps:t.datumTransformationSteps})),(t.includeGCSGrid||b(e.spatialReference,o.spatialReference,r))&&await v();const s=t.rasterTransform?G(t.rasterTransform):null;return z({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:r,rasterTransform:s})}}export{xt as default};
