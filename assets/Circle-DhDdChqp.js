import{r as n,m as h,a as u}from"./Accessor-BmwT4B0c.js";import{x as g,M as f,R as m,k as b,E as w,V as y,Y as j,C as k,g as M,j as R}from"./Point-Cz2JYYmX.js";import{j as p}from"./Polyline-s-JzsQqo.js";import{j as P}from"./geodesicUtils-Cvz9v8ds.js";var l;let c=l=class extends p{constructor(e){super(e),this.center=null,this.geodesic=!1,this.numberOfPoints=60,this.radius=1e3,this.radiusUnit="meters"}initialize(){const e=this.center,a=this.numberOfPoints;if(this.hasZ=(e==null?void 0:e.hasZ)??!1,this.rings.length!==0||!e)return;const o=g(this.radius,this.radiusUnit,"meters"),r=e.spatialReference;let i,t="geographic";if(r.isWebMercator?t="webMercator":((r.wkid&&f[r.wkid])!=null||(r.wkt2||r.wkt)&&m(r.wkt2||r.wkt))&&(t="projected"),this.geodesic){let s;switch(t){case"webMercator":s=b(e);break;case"projected":console.error("Creating a geodesic circle requires the center to be specified in web mercator or geographic coordinate system");break;case"geographic":s=e}i=this._createGeodesicCircle(s,o,a),t==="webMercator"&&(i=w(i))}else{let s;t==="webMercator"||t==="projected"?s=o/y(e.spatialReference):t==="geographic"&&(s=j(o,"meters",k(e.spatialReference).radius)),i=this._createPlanarCircle(e,s,a)}this.spatialReference=i.spatialReference,this.addRing(i.rings[0])}clone(){const{center:e,numberOfPoints:a,radius:o,radiusUnit:r,geodesic:i}=this;return new l({center:e==null?void 0:e.clone(),numberOfPoints:a,radius:o,radiusUnit:r,geodesic:i})}_createGeodesicCircle(e,a,o){const r=[],i=[e.x,e.y];for(let t=0;t<360;t+=360/o){const s=this.hasZ?[0,0,e.z??0]:[0,0];P(s,i,t,a,M.WGS84),r.push(s)}return r.push(r[0]),new p({rings:[r]})}_createPlanarCircle(e,a,o){const r=[],i=2*Math.PI/o;for(let t=0;t<o;++t){const s=i*t,d=[e.x+Math.cos(-s)*a,e.y+Math.sin(-s)*a];this.hasZ&&d.push(e.z??0),r.push(d)}return r.push(r[0]),new p({spatialReference:e.spatialReference,rings:[r]})}};n([h({type:R})],c.prototype,"center",void 0),n([h()],c.prototype,"geodesic",void 0),n([h()],c.prototype,"numberOfPoints",void 0),n([h()],c.prototype,"radius",void 0),n([h()],c.prototype,"radiusUnit",void 0),c=l=n([u("esri.geometry.Circle")],c);const U=c;export{U as b};
