import{d as h}from"./Graphic-DsxsIjhH.js";import{r as l,n as y}from"./subclass-BZA_h8Db.js";import{w as S}from"./Extent-Bf3YTe7m.js";import{$ as d}from"./Mesh-Dq3yHM_F.js";import{g}from"./Point-Cg0-ChZE.js";import{i as N,a as D}from"./External-B2-Xb0PD.js";import{s as M}from"./infoFor3D-C0hFfS1m.js";import{d as w}from"./FeatureSet-BHEkYP03.js";import{n as F,i as T}from"./meshFeatureAttributes-ch2d0Ntd.js";import"./tslib.es6-B3Jf3DVX.js";import"./geometry-D964gYQX.js";import"./Polyline-D9YkgmM_.js";import"./writer-DNAwXnhG.js";import"./mathUtils-C4_ghTv4.js";import"./jsonMap-0cxwUWs2.js";import"./PopupTemplate-BHMhS05j.js";import"./Clonable-D3rtuBWg.js";import"./Accessor-BLX9ikPh.js";import"./Collection-CEdjem1-.js";import"./Evented-BHRw9x22.js";import"./shared-B3wH2qpO.js";import"./SimpleObservable-KocWTzVy.js";import"./assets-C43MgM-v.js";import"./index-Bh2oEzTI.js";import"./cast-Bjksrh93.js";import"./fieldUtils-tmQlKvWo.js";import"./intl-CChhNOV8.js";import"./date-DlqISzcw.js";import"./locale-C9TlLpzi.js";import"./messages-OmQvZhAg.js";import"./enumeration-Ba5njXdz.js";import"./Color-BCS62Hs5.js";import"./colorUtils-0bJDPow9.js";import"./ActionToggle-iT4slXc7.js";import"./Identifiable-B1UbsKNt.js";import"./symbols-CNimns--.js";import"./TextSymbol-D8QO_KUV.js";import"./screenUtils-_ZIvrt5o.js";import"./materialUtils-DarhapKC.js";import"./opacityUtils-C68Tlu6_.js";import"./vec3f64-BLpZdpfb.js";import"./aaBoundingBox-BE7cC1jD.js";import"./persistableUrlUtils-fa1mAujs.js";import"./collectionUtils-D_lHIu88.js";import"./Portal-C10FKnaA.js";import"./Loadable-BabW5Xcc.js";import"./Promise-B2Hu02L7.js";import"./reactiveUtils-C5zUhJQJ.js";import"./asyncUtils-CWX51uTe.js";import"./jsonUtils-CEfjT-BK.js";import"./axisAngleDegrees-Ci2HA7Jo.js";import"./mat4-GpOFENPA.js";import"./common-DQOJ18NT.js";import"./quat-4pa1e6ds.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-CCm9z-pX.js";import"./vec32-Dvg_eL9J.js";import"./vec42-YcqnINSP.js";import"./MeshComponent-C3VFvn4B.js";import"./imageUtils-CtmzXUTE.js";import"./meshProperties-C4iW0Ukm.js";import"./MeshLocalVertexSpace-LEHwMUnu.js";import"./MeshTransform-D2t3aEmK.js";import"./mat4f64-Dk4dwAN8.js";import"./MeshVertexAttributes-BgxxMxrG.js";import"./meshVertexSpaceUtils-CXzOFlTI.js";import"./triangulationUtils-DWWEtF_0.js";import"./earcut-Lltz9D9k.js";import"./Indices-DflDlU4Z.js";import"./plane-IENfwZlB.js";import"./vec2f64-miziP1SN.js";import"./vec4f64-o2zAXfmz.js";import"./mathUtils-BG-eq9fO.js";import"./deduplicate-DIJK2kGw.js";import"./projectPointToVector-GINIbYMz.js";import"./projection-B971H0Re.js";import"./projectBuffer-Bs7GwaPY.js";import"./geodesicConstants-DWQLYX7F.js";import"./vertexSpaceConversion-CPh5QK5U.js";import"./mat3-BRl2i9Bz.js";import"./spatialReferenceEllipsoidUtils-DBE_OFra.js";import"./computeTranslationToOriginAndRotation-Q27G6TBL.js";import"./vec3-kbEkneOB.js";import"./BufferView-_QDXRCew.js";import"./vec2-maR1OrZI.js";import"./vec4-BpYqBTK4.js";import"./Field-ybkHhtnK.js";import"./fieldType-BuzM0UHS.js";const I=()=>y.getLogger("esri.rest.support.meshFeatureSet");function cr(t,e,r){const o=r.features;r.features=[],delete r.geometryType;const i=w.fromJSON(r);if(i.geometryType="mesh",!r.assetMaps)return i;const m=b(e,r.assetMaps),s=t.sourceSpatialReference??g.WGS84,u=r.globalIdFieldName,{outFields:p}=t,f=p!=null&&p.length>0?L(p.includes("*")?null:new Set(p)):()=>({});for(const n of o){const a=O(n,u,s,e,m);i.features.push(new h({geometry:a,attributes:f(n)}))}return i}function L(t){return({attributes:e})=>{if(!e)return{};if(!t)return e;for(const r in e)t.has(r)||delete e[r];return e}}function O(t,e,r,o,i){const m=t.attributes[e],s=i.get(m);if(s==null||!t.geometry)return null;const u=F(t.attributes,r,o.transformFieldRoles),p=S.fromJSON(t.geometry);p.spatialReference=r;const f=T(t.attributes,o.transformFieldRoles),n=r.isGeographic?"local":"georeferenced",a=P(s);return a?d.createWithExternalSource(u,a,{extent:p,transform:f,vertexSpace:n,unitConversionDisabled:!0}):d.createIncomplete(u,{extent:p,transform:f,vertexSpace:n})}var c;function b(t,e){const r=new Map;for(const o of e){const i=o.parentGlobalId;if(i==null)continue;const m=o.assetName,s=o.assetType,u=o.assetHash,p=o.assetURL,f=o.conversionStatus,n=o.seqNo,a=M(s,t.supportedFormats);if(!a){I().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${s}, but it does not list it as a supported type`);continue}const E=l(r,i,()=>({files:new Map}));l(E.files,m,()=>({name:m,type:s,mimeType:a,status:$(f),parts:[]})).parts[n]={hash:u,url:p}}return r}function P(t){const e=Array.from(t.files.values()),r=new Array;for(const o of e){if(o.status!==c.COMPLETED)return null;const i=new Array;for(const m of o.parts){if(!m)return null;i.push(new N(m.url,m.hash))}r.push(new D(o.name,o.mimeType,i))}return r}function $(t){switch(t){case"COMPLETED":case"SUBMITTED":return c.COMPLETED;case"INPROGRESS":return c.PENDING;default:return c.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(c||(c={}));export{b as assetMapFromAssetMapsJSON,O as extractMesh,cr as meshFeatureSetFromJSON};
