import{r as c,m as g,a as z,i as B,N as I}from"./Accessor-BHnuXKD2.js";import{P as O,a2 as F,a3 as A,v as W}from"./cast-BA_-jlhc.js";import{V as H,d as K}from"./reactiveUtils-BR0C1Kq4.js";import{w as $}from"./Extent-CBBGeHb-.js";import{O as T,K as J}from"./projection-B2I9Bzj_.js";import{j as U,g as j}from"./Point-XGrwlf63.js";import{S as Y}from"./JSONSupport-CGdeqxpk.js";import{b as P,g as Q,d as X}from"./kmlUtils-BztxQuam.js";import{f as Z}from"./utils-Cy8wFNQo.js";import{c as M}from"./GraphicsCollection-CkliHSk1.js";import{g as tt,f as it,S as et}from"./BitmapTechnique-BNS3S4LA.js";import{r as rt}from"./BitmapContainer-BgSuYpM3.js";import{S as ot}from"./LayerView2D-BMuowJAc.js";import{t as R}from"./GraphicContainer-Q13NwUvH.js";import{A as k}from"./GraphicsView2D-Op6juEbw.js";import{y as at}from"./LayerView-DF8EqCYi.js";import{z as st,a as pt}from"./rasterProjectionHelper-BYBh__EP.js";import{n as nt}from"./VertexStream-BOY5BmOx.js";import{o as mt}from"./MaterialPrograms-C5dsBQDW.js";import{D as E,G as lt,U as ht,X as L}from"./enums-D9v74xTE.js";import{x as ct}from"./FramebufferObject-DHwDHMWe.js";import{m as dt}from"./rasterUtils-BIaVlN1p.js";import{y as ut}from"./RenderingContext-BkhmhK8E.js";import{p as q,w as gt}from"./Texture-D-SqNa4i.js";import"./index-tefRSezt.js";import"./Evented-DCWccWGU.js";import"./SimpleObservable-7oieNGD8.js";import"./vec3f64-BLpZdpfb.js";import"./Polyline-BmuD2-ZN.js";import"./writer-B2bQV2uU.js";import"./mathUtils-DV9iOXpW.js";import"./projectBuffer-DOU0xvVi.js";import"./geodesicConstants-yASAK_zX.js";import"./Graphic-CFXUQZlS.js";import"./Clonable-DvJsj5LF.js";import"./opacityUtils-CSd4XoR2.js";import"./Promise-CmQqe-ke.js";import"./enumeration-Cr5WIZs4.js";import"./Color-gncXBiLc.js";import"./colorUtils-Rxh2V3ai.js";import"./ActionToggle-__-l4AdQ.js";import"./Identifiable-BrT7zvUW.js";import"./jsonUtils-Cu7OBRmN.js";import"./typeUtils-BSg8Y507.js";import"./TextSymbol-BQ_NW9Xo.js";import"./screenUtils-_ZIvrt5o.js";import"./collectionUtils-CbaToa73.js";import"./Portal-CTRRujjZ.js";import"./aaBoundingBox-CeBivBRq.js";import"./jsonUtils-DD1NMzWj.js";import"./typeUtils-CfF4cYo5.js";import"./ClassBreaksRenderer-BBSNkSFx.js";import"./commonProperties-bGHL1a5M.js";import"./colorRamps-Dkx8zIVn.js";import"./SizeVariable-IzD1bP2e.js";import"./visualVariableUtils-Bp9QCb8E.js";import"./lengthUtils-DjJgJFRg.js";import"./ColorStop-CDpeFWOz.js";import"./jsonUtils-Dzgxk9pw.js";import"./layerUtils-dJgsXxkC.js";import"./defaults-Dwxdhopq.js";import"./defaultsJSON-GKolV7NZ.js";import"./RendererLegendOptions-mgfHoilI.js";import"./LRUCache-DS2O1kTf.js";import"./MemCache-CDoaVBHf.js";import"./Version-9k2AOv05.js";import"./FieldsIndex-DFdVonga.js";import"./timeZoneUtils-COos5xIr.js";import"./utils-B91u8350.js";import"./defaultCIMValues-DII_GG3u.js";import"./enums-BJSSbDkD.js";import"./HeatmapColorStop-c4wClnpW.js";import"./heatmapUtils-DA7NmY3d.js";import"./vec42-YcqnINSP.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./SimpleRenderer-gSw1WaJS.js";import"./UniqueValueRenderer-Cri3tgP5.js";import"./diffUtils-CMkuJvD2.js";import"./styleUtils-BB-zx7mT.js";import"./FeatureSet-DpCN730g.js";import"./Field-Cyk7Ur5d.js";import"./fieldType-L-VlbZqy.js";import"./mat3-CR8GKnhD.js";import"./DefaultUI-DqLHkAzt.js";import"./jsxFactory-CLjKarlq.js";import"./intl-Do3GEEJ7.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-ptqz1ck8.js";import"./InputManager-Bs9UE-jw.js";import"./Queue-BOnccek2.js";import"./signal-DSa0yokC.js";import"./Basemap-BHdJ6wQH.js";import"./loadAll-Do8S8AWH.js";import"./PortalItem-CXk7DqVv.js";import"./basemapDefinitions-BmB40s1J.js";import"./writeUtils-C3ZSK02Z.js";import"./groundInstanceUtils-Ben03ZCf.js";import"./CollectionFlattener-B9CFCLSp.js";import"./editableLayers-BZGjz8nI.js";import"./catalogUtils-CK4eMvD1.js";import"./basemapEnsureType-BVU7UGJp.js";import"./basemapUtils-DQr5T1wn.js";import"./utils-DYurMneM.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-Fi6iAz29.js";import"./TablesMixin-BzMj7HDl.js";import"./Layer-C9uQlTBT.js";import"./TimeExtent-J5qnUFx_.js";import"./timeUtils-D2X862bk.js";import"./HeightModelInfo-B3GZyQFz.js";import"./ReactiveMap-Dwhwbx9R.js";import"./Query-DCBIeen2.js";import"./FullTextSearch-BWm_kPUE.js";import"./selectionUtils-DYi6daQO.js";import"./ViewEvents-Hl5AOQnu.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./screenUtils-DyhV4TAA.js";import"./HighlightDefaults-ESbuT2uR.js";import"./a11yUtils-CSYUX1kC.js";import"./heightModelInfoUtils-CMg1cdju.js";import"./ViewingMode-Dodu7ZZk.js";import"./vec32-Dvg_eL9J.js";import"./unitBezier-B1N-tmtC.js";import"./imageUtils-brik-GLm.js";import"./capabilities-DwlKKScG.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-CZa70j6i.js";import"./accessibleHandler-rIBXQ52V.js";import"./CompassViewModel-BAJa4WdS.js";import"./GoTo-BsXOAO95.js";import"./ZoomViewModel-BZXEbLSs.js";import"./vec2f32-BbH2jxlN.js";import"./DisplayObject-S19ALweP.js";import"./definitions-LJaw2n5Z.js";import"./GraphShaderModule-CNt-QO7Z.js";import"./View2D-CIpCSKxG.js";import"./Viewpoint-Cv8Otrne.js";import"./Camera-DJtV7zYb.js";import"./Cyclical-CPiNl4ru.js";import"./workers-D8Q3pEzK.js";import"./TileInfo-CRfZy5zq.js";import"./TileKey-DZd6gJy7.js";import"./vec2-maR1OrZI.js";import"./vec2f64-Dy6m9Nrb.js";import"./viewpointUtils-DmJh_Ev7.js";import"./mat2d-D9DBP-jx.js";import"./mat2df64-CBKYtunK.js";import"./normalizeUtils-XRAPXbWa.js";import"./normalizeUtilsCommon-D0zPTJCj.js";import"./utils-CkSELPnj.js";import"./mat2df32-orApM5a3.js";import"./Scheduler-B_GuBefw.js";import"./debugFlags-ZrDyTcDc.js";import"./TileStrategy-DlGVvP4C.js";import"./TileKey-BtGhNUzq.js";import"./ScheduledQueueProcessor-DfrR8pp0.js";import"./Tile-CkUxg4dk.js";import"./quickselect-QQC62dOK.js";import"./utils-D02V2_jH.js";import"./Program-DD6La1z3.js";import"./ShaderBuilder-DV1s2efh.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-uMFRS8dR.js";import"./WGLContainer-Bm0UZ79M.js";import"./DefaultVertexAttributeLayouts-DMsCtEEh.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./dataViewUtils-CH0QMRr9.js";import"./getDataTypeBytes-BTGR5GyG.js";import"./BoundingBox-CnpCxTZE.js";import"./WGLBrushVTLSymbol-DhI09LJn.js";import"./BufferObject-CIl3vJtA.js";import"./memoryEstimations-5gFNwkKK.js";import"./StyleDefinition-DxJzQnGW.js";import"./config-MDUrh2eL.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-C4sWoKdv.js";import"./vec3f32-nZdmKIgz.js";import"./Container-C9XOJkyO.js";import"./EffectView-BDbE94Th.js";import"./jsonUtils-TjZmCq6l.js";import"./earcut-Lltz9D9k.js";import"./featureConversionUtils-DpmsPUmt.js";import"./OptimizedFeature-DcMLlxvB.js";import"./OptimizedGeometry-7IxBWtHr.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./utils-BQBvadb7.js";import"./ClipRect-XfrmCbGe.js";import"./layerViewUtils-tkZ5z_iY.js";import"./AGraphicContainer-DIPYSkLv.js";import"./TechniqueInstance-B8VcS8pm.js";import"./UpdateTracking2D-BJv4lrAz.js";import"./TileContainer-CLAMojvR.js";import"./FeatureCommandQueue-C_h-Fzgt.js";import"./CIMSymbolHelper-Vkq7AVTn.js";import"./BidiEngine-DNnuvc1i.js";import"./fontUtils-D0SfAiSy.js";import"./GeometryUtils-B5FJlfZD.js";import"./rasterizingUtils-5QTNbyfl.js";import"./floatRGBA-CR2j2c7-.js";import"./Rect-CUzevAry.js";import"./heatmapTextureUtils-nYqDzBiV.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-BFetastB.js";import"./OverrideHelper-CrxTOYuK.js";import"./colorUtils-BAowQmkN.js";import"./callExpressionWithFeature-CM_sm0iu.js";import"./quantizationUtils-2Az-xHPA.js";import"./FeatureMetadata-_zu3ofPi.js";import"./queryUtils-DBeaQ3x_.js";import"./json-Wa8cmqdu.js";import"./timeSupport-Cvj97qZO.js";import"./TimeOnly-yGYcAQQJ.js";import"./labelFormatUtils-B--9rEVY.js";import"./labelUtils-Dq8OkaT-.js";import"./mat3f64-BBpwCtoL.js";import"./normalizeUtilsSync-D3hTE8bq.js";import"./dehydratedFeatures-Nwhn-hep.js";import"./utils-ilH32Koe.js";import"./programUtils-CwiKxPbA.js";import"./ProgramCache-D9MJNX7j.js";import"./NestedMap-GuqgquCN.js";import"./renderState-e7QeQoUO.js";import"./basicInterfaces-CZwQPxTp.js";import"./glsl-BH37Aalp.js";import"./testSVGPremultipliedAlpha-CpxLiQJP.js";import"./doublePrecisionUtils-B0owpBza.js";let _=class extends Y{constructor(){super(...arguments),this.id=0,this.rotation=0,this.href="",this.extent=new $}};c([g({nonNullable:!0,json:{write:!0}})],_.prototype,"id",void 0),c([g({nonNullable:!0,json:{write:!0}})],_.prototype,"rotation",void 0),c([g({nonNullable:!0,json:{write:!0}})],_.prototype,"href",void 0),c([g({type:$,nonNullable:!0,json:{write:!0}})],_.prototype,"extent",void 0),_=c([z("esri.layers.support.KMLMapImage")],_);class l{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(l._instance)return l._instanceRefCount++,l._instance;l._instanceRefCount=1,l._instance=this,this._ownsRctx=!0;const r=document.createElement("canvas").getContext("webgl2");r.getExtension("OES_texture_float"),this._rctx=new ut(r,{})}const o={applyProjection:!0,bilinear:!1,bicubic:!1},a=mt("raster/reproject","raster/reproject",new Map([["a_position",0]]),o);this._program=this._rctx.programCache.acquire(a.shaders.vertexShader,a.shaders.fragmentShader,a.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new nt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,o,a=!1){const r=T(t.extent,o),e=new U({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:p,y:m}=st(e,o,t.extent);let n=(p+m)/2;const u=Math.round((r.xmax-r.xmin)/n),s=Math.round((r.ymax-r.ymin)/n);n=(r.width/u+r.height/s)/2;const D=new U({x:n,y:n,spatialReference:r.spatialReference}),f=pt({projectedExtent:r,srcBufferExtent:t.extent,pixelSize:D,hasWrapAround:!0,spacing:[16,16]}),x=dt(this._rctx,f),b=new q(u,s);b.wrapMode=E.CLAMP_TO_EDGE;const h=new ct(this._rctx,b);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,u,s),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:V=0,height:v=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",V,v),this._program.setUniform2fv("u_transformSpacing",f.spacing),this._program.setUniform2fv("u_transformGridSize",f.size),this._program.setUniform2f("u_targetImageSize",u,s),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),a){const{width:d,height:C}=h,y=new ImageData(d??0,C??0);h.readPixels(0,0,d??0,C??0,lt.RGBA,ht.UNSIGNED_BYTE,y.data);const G=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:G,extent:r,imageData:y}}const S=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:S,extent:r}}reprojectBitmapData(t,o){const a=tt(t.bitmapData)?it(t.bitmapData):t.bitmapData,r=new q;r.wrapMode=E.CLAMP_TO_EDGE,r.width=t.bitmapData.width,r.height=t.bitmapData.height;const e=new gt(this._rctx,r,a),p=this.reprojectTexture({texture:e,extent:t.extent},o,!0);p.texture.dispose();const m=document.createElement("canvas"),n=p.imageData;return m.width=n.width,m.height=n.height,m.getContext("2d").putImageData(n,0,0),{bitmapData:m,extent:p.extent}}async loadAndReprojectBitmapData(t,o,a){const r=(await O(t,{responseType:"image"})).data,e=document.createElement("canvas");e.width=r.width,e.height=r.height;const p=e.getContext("2d");p.drawImage(r,0,0);const m=p.getImageData(0,0,e.width,e.height);if(o.spatialReference.equals(a))return{bitmapData:m,extent:o};const n=this.reprojectBitmapData({bitmapData:m,extent:o},a);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(l._instanceRefCount--,l._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),l._instance=null)):(this._quad.dispose(),this._program.dispose())}}l._instanceRefCount=0;class N{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let w=class extends ot(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new rt,this._kmlVisualData=new N,this._fetchController=null,this.allVisiblePoints=new M,this.allVisiblePolylines=new M,this.allVisiblePolygons=new M,this.allVisibleMapImages=new H}async hitTest(i,t){var a,r,e;const o=this.layer;return[(a=this._pointsView)==null?void 0:a.hitTest(i),(r=this._polylinesView)==null?void 0:r.hitTest(i),(e=this._polygonsView)==null?void 0:e.hitTest(i)].flat().filter(Boolean).map(p=>(p.layer=o,p.sourceLayer=o,{type:"graphic",graphic:p,layer:o,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new k({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new k({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new k({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),K(()=>this.layer.visibleSublayers,i=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of i){const o=this._kmlVisualData.allSublayers.get(t.id);o&&(o.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new l}detach(){this._fetchController=B(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=I(this._polygonsView),this._polylinesView=I(this._polylinesView),this._pointsView=I(this._pointsView),this._imageReprojector=I(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){var t,o;((t=this.view.spatialReference)!=null&&t.isWGS84||(o=this.view.spatialReference)!=null&&o.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,i.extent,this.view.spatialReference).then(a=>{const r=new et(a.bitmapData);r.x=a.extent.xmin,r.y=a.extent.ymax,r.resolution=a.extent.width/a.bitmapData.width,r.rotation=i.rotation,this._mapImageContainer.addChild(r),this._bitmapIndex.set(i,r)})}async _getViewDependentUrl(i,t){const{viewFormat:o,viewBoundScale:a,httpQuery:r}=i;if(o!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let e;if(await J(),a!=null&&a!==1){const d=new $(t.extent);d.expand(a),e=d}else e=t.extent;e=T(e,j.WGS84);const p=T(e,j.WebMercator),m=e.xmin,n=e.xmax,u=e.ymin,s=e.ymax,D=t.size[0]*t.pixelRatio,f=t.size[1]*t.pixelRatio,x=Math.max(p.width,p.height),b={"[bboxWest]":m.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":u.toString(),"[bboxNorth]":s.toString(),"[lookatLon]":e.center.x.toString(),"[lookatLat]":e.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":e.center.x.toString(),"[lookatTerrainLat]":e.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":e.center.x.toString(),"[cameraLat]":e.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":D.toString(),"[vertPixels]":f.toString(),"[terrainEnabled]":"0","[clientVersion]":F,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=d=>{for(const C in d){let y;for(y in b)d[C]=d[C].replace(y,b[y])}},V=A(o);h(V);let v={};r!=null&&(v=A(r),h(v));const S=Z(i.href);return S.query={...S.query,...V,...v},`${S.path}?${W(V)}`}return i.href}async _fetchService(i){const t=new N;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,o){return this._fetchParsedKML(i,o).then(async a=>{var r;for(const e of a.sublayers){t.allSublayers.set(e.id,e);const p=e.points?await P(e.points):[],m=e.polylines?await P(e.polylines):[],n=e.polygons?await P(e.polygons):[],u=((r=e.mapImages)==null?void 0:r.map(s=>_.fromJSON(s)))??[];if(t.allPoints.push(...p.map(s=>({item:s,sublayerId:e.id}))),t.allPolylines.push(...m.map(s=>({item:s,sublayerId:e.id}))),t.allPolygons.push(...n.map(s=>({item:s,sublayerId:e.id}))),t.allMapImages.push(...u.map(s=>({item:s,sublayerId:e.id}))),e.networkLink){const s=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(s,t,o)}}})}_fetchParsedKML(i,t){return Q(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(o=>X(o.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};c([g()],w.prototype,"_pointsView",void 0),c([g()],w.prototype,"_polylinesView",void 0),c([g()],w.prototype,"_polygonsView",void 0),c([g()],w.prototype,"updating",void 0),w=c([z("esri.views.2d.layers.KMLLayerView2D")],w);const Mo=w;export{Mo as default};
