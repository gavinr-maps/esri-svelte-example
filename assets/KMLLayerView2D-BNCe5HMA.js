import{r as c,m as g,a as z,i as B,N as I}from"./Accessor-BmwT4B0c.js";import{P as O,a2 as A,v as F,a3 as W}from"./cast-CsZslgGN.js";import{V as H,d as K}from"./reactiveUtils-XM7cS2OP.js";import{w as $}from"./Extent-g5W9hy0j.js";import{O as T,K as J}from"./projection-CyCZAIaD.js";import{j as U,g as j}from"./Point-Cz2JYYmX.js";import{S as Y}from"./JSONSupport-DcrLLGjL.js";import{b as P,g as Q,d as X}from"./kmlUtils-DBXhlpD5.js";import{f as Z}from"./utils-YowqfOgk.js";import{c as M}from"./GraphicsCollection-BJ5Nr2H8.js";import{g as tt,f as it,S as et}from"./BitmapTechnique-CQrEueUW.js";import{r as rt}from"./BitmapContainer-CJqgKDtv.js";import{S as ot}from"./LayerView2D-mneyXHGR.js";import{t as R}from"./GraphicContainer-6HJEOdzy.js";import{A as k}from"./GraphicsView2D-YaB3LUCn.js";import{y as at}from"./LayerView-DUZfYZew.js";import{z as st,a as pt}from"./rasterProjectionHelper-Wej15Bp6.js";import{n as nt}from"./VertexStream-D3bA1fLV.js";import{o as mt}from"./MaterialPrograms-CDOKltoT.js";import{D as E,G as lt,U as ht,X as L}from"./enums-D9v74xTE.js";import{x as ct}from"./FramebufferObject-B01p0UGV.js";import{m as dt}from"./rasterUtils-BmCX8yQb.js";import{y as ut}from"./RenderingContext-7iVYEQBa.js";import{p as q,w as gt}from"./Texture-BVJ22uHh.js";import"./index-4eY77cms.js";import"./Evented-Dw4_VOGn.js";import"./SimpleObservable-CvOkykwM.js";import"./vec3f64-BLpZdpfb.js";import"./Polyline-s-JzsQqo.js";import"./writer-DKgfqj4X.js";import"./mathUtils-Cfq9PL9W.js";import"./projectBuffer-CQnuEMuP.js";import"./geodesicConstants-RQL9oKdk.js";import"./Graphic-Dt0LgVGU.js";import"./Clonable-Z-AWS-16.js";import"./opacityUtils-Dim20wpZ.js";import"./Promise-DfET-uns.js";import"./enumeration-DpvDkLNI.js";import"./Color-VJEMvW-n.js";import"./colorUtils-Rxh2V3ai.js";import"./ActionToggle-D7439N1A.js";import"./Identifiable-BHVfzH03.js";import"./jsonUtils-CwFG8yN4.js";import"./typeUtils-B6WBEKDM.js";import"./TextSymbol-BLIQ6RKX.js";import"./screenUtils-_ZIvrt5o.js";import"./collectionUtils-CTT-51g7.js";import"./Portal-CmmHxpLg.js";import"./aaBoundingBox-Dw3yBk2f.js";import"./jsonUtils-BZp85R7u.js";import"./typeUtils-B3iPBwJ2.js";import"./ClassBreaksRenderer-C7fhua2J.js";import"./commonProperties-ZfGquLPI.js";import"./colorRamps-CRjjPL3r.js";import"./SizeVariable-B-ghFm6e.js";import"./visualVariableUtils-Xcorldoo.js";import"./lengthUtils-_77UiyVF.js";import"./ColorStop-BYiAUa8d.js";import"./jsonUtils-B-voMz-i.js";import"./layerUtils-B__v9OBu.js";import"./defaults-FkBa0ybj.js";import"./defaultsJSON-GKolV7NZ.js";import"./RendererLegendOptions-CYAPr8D6.js";import"./LRUCache-CXiGQWMN.js";import"./MemCache-CmojB_Z1.js";import"./Version-Cd3TlGH0.js";import"./FieldsIndex-FW1AMU67.js";import"./timeZoneUtils-DxzjpEBb.js";import"./utils-UPZJIDfz.js";import"./defaultCIMValues-Bb-CUowV.js";import"./enums-BTM-fOHQ.js";import"./HeatmapColorStop-CHbSyb1s.js";import"./heatmapUtils-Cyq-bAyG.js";import"./vec42-YcqnINSP.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./SimpleRenderer-CEw_geZx.js";import"./UniqueValueRenderer-yoWHKJ_P.js";import"./diffUtils-BanfihCO.js";import"./styleUtils-ColFrJ-Z.js";import"./FeatureSet-B5-Veyin.js";import"./Field-BDG0QV_T.js";import"./fieldType-CBeoJWlv.js";import"./mat3-CR8GKnhD.js";import"./DefaultUI-BwWVKFUS.js";import"./jsxFactory-Cnml7uXM.js";import"./intl-Duiy0OzY.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-CzJ4c3KT.js";import"./InputManager-DZ3jJnlx.js";import"./Queue-BQesTh_6.js";import"./signal-CySMLEX9.js";import"./Basemap-BZmrlnvW.js";import"./loadAll-D1eTJ7uv.js";import"./PortalItem-CTx1kJsR.js";import"./basemapDefinitions-D-Q7PKmu.js";import"./writeUtils-CcunaxF8.js";import"./groundInstanceUtils-Ben03ZCf.js";import"./CollectionFlattener-U8hHQmGf.js";import"./editableLayers-CWgCazH-.js";import"./catalogUtils-CGCu8hgu.js";import"./basemapEnsureType-CmRtohu0.js";import"./basemapUtils-oMnqy94d.js";import"./utils-DYurMneM.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-Fi6iAz29.js";import"./TablesMixin-Bqfi1Ha_.js";import"./Layer-DH4_Pn8a.js";import"./TimeExtent-BO6BsF_x.js";import"./timeUtils-C1c_L2Fd.js";import"./HeightModelInfo-C05IFsWs.js";import"./ReactiveMap-BHFEHYMj.js";import"./Query-B_2mhyL4.js";import"./FullTextSearch-CBnxSwz4.js";import"./selectionUtils-DYi6daQO.js";import"./ViewEvents-c9mvQ_r3.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./screenUtils-BWEEmpSb.js";import"./HighlightDefaults-CumzVg9-.js";import"./a11yUtils-ClKbIIe-.js";import"./heightModelInfoUtils-D_x68P3s.js";import"./ViewingMode-Dodu7ZZk.js";import"./vec32-Dvg_eL9J.js";import"./unitBezier-B1N-tmtC.js";import"./imageUtils-DsXKmbqJ.js";import"./capabilities-DwlKKScG.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-vQlnDsEX.js";import"./accessibleHandler-BaA3O97p.js";import"./CompassViewModel-DBhnIkQP.js";import"./GoTo-zPv0y7kC.js";import"./ZoomViewModel-Bua4WqEj.js";import"./vec2f32-BbH2jxlN.js";import"./DisplayObject-Dejv4A66.js";import"./definitions-CP59Y04S.js";import"./GraphShaderModule--vK3Hbk2.js";import"./View2D-CUfvXSSH.js";import"./Viewpoint-DvyUmqUt.js";import"./Camera-CdyTfTAk.js";import"./Cyclical-Dlbl-cQK.js";import"./workers-Cds_sd9m.js";import"./TileInfo-DxwC9WcY.js";import"./TileKey-DZd6gJy7.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Dy6m9Nrb.js";import"./viewpointUtils-CtXMVquh.js";import"./mat2d-D9DBP-jx.js";import"./mat2df64-CBKYtunK.js";import"./normalizeUtils-BTGdXlpz.js";import"./normalizeUtilsCommon-lGDszWRI.js";import"./utils-B-dlKIhi.js";import"./mat2df32-orApM5a3.js";import"./Scheduler-i_u8qdlN.js";import"./debugFlags-B1LM_Apo.js";import"./TileStrategy-CtmYSAoK.js";import"./TileKey-DBTeo_j0.js";import"./ScheduledQueueProcessor-U8WIIyj8.js";import"./Tile-DxjvolLp.js";import"./quickselect-QQC62dOK.js";import"./utils-BjSXFjBJ.js";import"./Program-C5Xq9SwE.js";import"./ShaderBuilder-BKul5qh8.js";import"./BindType-BBwFZqyN.js";import"./TechniqueType-uMFRS8dR.js";import"./WGLContainer-CAGx_8nH.js";import"./DefaultVertexAttributeLayouts-wSIZdMhB.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./dataViewUtils-htlyuhrl.js";import"./getDataTypeBytes-BTGR5GyG.js";import"./BoundingBox-CnpCxTZE.js";import"./WGLBrushVTLSymbol-CmI_2XQu.js";import"./BufferObject-BJilD_hc.js";import"./memoryEstimations-Bcyf-mHz.js";import"./StyleDefinition-C2Flw6Qv.js";import"./config-BOD8--da.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-BpBqJqy1.js";import"./vec3f32-nZdmKIgz.js";import"./Container-CQ-TKdBu.js";import"./EffectView-vElW3ESK.js";import"./jsonUtils-DZz5FrgB.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-CvnFcmH_.js";import"./OptimizedFeature-P2towpqD.js";import"./OptimizedGeometry-BJqUA4Pi.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./utils-BQBvadb7.js";import"./ClipRect-0Tl6AMAT.js";import"./layerViewUtils-Bevty3Jm.js";import"./AGraphicContainer-CZ0yY9Ih.js";import"./TechniqueInstance-DTD5bLhu.js";import"./UpdateTracking2D-DnXhWMyK.js";import"./TileContainer-B394BLqZ.js";import"./FeatureCommandQueue-D2VPggrt.js";import"./CIMSymbolHelper-BDfNg_6w.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-CGi-tOxo.js";import"./GeometryUtils-F7QfOKlc.js";import"./rasterizingUtils-C1EbvluX.js";import"./floatRGBA-Cb__GiDF.js";import"./Rect-CUzevAry.js";import"./heatmapTextureUtils-C_5TPY_E.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-BzFcKfHF.js";import"./OverrideHelper-BItCoKFp.js";import"./colorUtils-DaPfwnk3.js";import"./callExpressionWithFeature-Dty09cLj.js";import"./quantizationUtils-DgFbqZi7.js";import"./FeatureMetadata-Bu8jYZ4s.js";import"./queryUtils-DBEPdow2.js";import"./json-Wa8cmqdu.js";import"./timeSupport-C7DiFkF_.js";import"./TimeOnly-CveCl9ie.js";import"./labelFormatUtils-F9rkrs4Y.js";import"./labelUtils-DCpQ7n-8.js";import"./mat3f64-BBpwCtoL.js";import"./normalizeUtilsSync-12EQcOVf.js";import"./dehydratedFeatures-kwLHUA1D.js";import"./utils-BGwKYX33.js";import"./programUtils-CwiKxPbA.js";import"./ProgramCache-CuBZBhwD.js";import"./NestedMap-GuqgquCN.js";import"./renderState-Ci93M1-P.js";import"./basicInterfaces-CZwQPxTp.js";import"./glsl-BH37Aalp.js";import"./testSVGPremultipliedAlpha-BGpZOwI7.js";import"./doublePrecisionUtils-B0owpBza.js";let _=class extends Y{constructor(){super(...arguments),this.id=0,this.rotation=0,this.href="",this.extent=new $}};c([g({nonNullable:!0,json:{write:!0}})],_.prototype,"id",void 0),c([g({nonNullable:!0,json:{write:!0}})],_.prototype,"rotation",void 0),c([g({nonNullable:!0,json:{write:!0}})],_.prototype,"href",void 0),c([g({type:$,nonNullable:!0,json:{write:!0}})],_.prototype,"extent",void 0),_=c([z("esri.layers.support.KMLMapImage")],_);class l{constructor(t){if(this._ownsRctx=!1,t)this._ownsRctx=!1,this._rctx=t;else{if(l._instance)return l._instanceRefCount++,l._instance;l._instanceRefCount=1,l._instance=this,this._ownsRctx=!0;const r=document.createElement("canvas").getContext("webgl2");r.getExtension("OES_texture_float"),this._rctx=new ut(r,{})}const o={applyProjection:!0,bilinear:!1,bicubic:!1},a=mt("raster/reproject","raster/reproject",new Map([["a_position",0]]),o);this._program=this._rctx.programCache.acquire(a.shaders.vertexShader,a.shaders.fragmentShader,a.attributes),this._rctx.useProgram(this._program),this._program.setUniform1f("u_opacity",1),this._program.setUniform1i("u_image",0),this._program.setUniform1i("u_flipY",0),this._program.setUniform1i("u_transformGrid",1),this._quad=new nt(this._rctx,[0,0,1,0,0,1,1,1])}reprojectTexture(t,o,a=!1){const r=T(t.extent,o),e=new U({x:(t.extent.xmax-t.extent.xmin)/t.texture.descriptor.width,y:(t.extent.ymax-t.extent.ymin)/t.texture.descriptor.height,spatialReference:t.extent.spatialReference}),{x:p,y:m}=st(e,o,t.extent);let n=(p+m)/2;const u=Math.round((r.xmax-r.xmin)/n),s=Math.round((r.ymax-r.ymin)/n);n=(r.width/u+r.height/s)/2;const D=new U({x:n,y:n,spatialReference:r.spatialReference}),y=pt({projectedExtent:r,srcBufferExtent:t.extent,pixelSize:D,hasWrapAround:!0,spacing:[16,16]}),x=dt(this._rctx,y),b=new q(u,s);b.wrapMode=E.CLAMP_TO_EDGE;const h=new ct(this._rctx,b);this._rctx.bindFramebuffer(h),this._rctx.setViewport(0,0,u,s),this._rctx.useProgram(this._program),this._rctx.bindTexture(t.texture,0),this._rctx.bindTexture(x,1),this._quad.bind();const{width:V=0,height:v=0}=t.texture.descriptor;if(this._program.setUniform2f("u_srcImageSize",V,v),this._program.setUniform2fv("u_transformSpacing",y.spacing),this._program.setUniform2fv("u_transformGridSize",y.size),this._program.setUniform2f("u_targetImageSize",u,s),this._quad.draw(),this._quad.unbind(),this._rctx.useProgram(null),this._rctx.bindFramebuffer(null),x.dispose(),a){const{width:d,height:C}=h,f=new ImageData(d??0,C??0);h.readPixels(0,0,d??0,C??0,lt.RGBA,ht.UNSIGNED_BYTE,f.data);const G=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:G,extent:r,imageData:f}}const S=h.detachColorTexture(L.COLOR_ATTACHMENT0);return h.dispose(),{texture:S,extent:r}}reprojectBitmapData(t,o){const a=tt(t.bitmapData)?it(t.bitmapData):t.bitmapData,r=new q;r.wrapMode=E.CLAMP_TO_EDGE,r.width=t.bitmapData.width,r.height=t.bitmapData.height;const e=new gt(this._rctx,r,a),p=this.reprojectTexture({texture:e,extent:t.extent},o,!0);p.texture.dispose();const m=document.createElement("canvas"),n=p.imageData;return m.width=n.width,m.height=n.height,m.getContext("2d").putImageData(n,0,0),{bitmapData:m,extent:p.extent}}async loadAndReprojectBitmapData(t,o,a){const r=(await O(t,{responseType:"image"})).data,e=document.createElement("canvas");e.width=r.width,e.height=r.height;const p=e.getContext("2d");p.drawImage(r,0,0);const m=p.getImageData(0,0,e.width,e.height);if(o.spatialReference.equals(a))return{bitmapData:m,extent:o};const n=this.reprojectBitmapData({bitmapData:m,extent:o},a);return{bitmapData:n.bitmapData,extent:n.extent}}destroy(){this._ownsRctx?(l._instanceRefCount--,l._instanceRefCount===0&&(this._quad.dispose(),this._program.dispose(),this._rctx.dispose(),l._instance=null)):(this._quad.dispose(),this._program.dispose())}}l._instanceRefCount=0;class N{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let w=class extends ot(at){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new rt,this._kmlVisualData=new N,this._fetchController=null,this.allVisiblePoints=new M,this.allVisiblePolylines=new M,this.allVisiblePolygons=new M,this.allVisibleMapImages=new H}async hitTest(i,t){var a,r,e;const o=this.layer;return[(a=this._pointsView)==null?void 0:a.hitTest(i),(r=this._polylinesView)==null?void 0:r.hitTest(i),(e=this._polygonsView)==null?void 0:e.hitTest(i)].flat().filter(Boolean).map(p=>(p.layer=o,p.sourceLayer=o,{type:"graphic",graphic:p,layer:o,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new k({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new k({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new k({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new R(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.addAttachHandles([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),K(()=>this.layer.visibleSublayers,i=>{for(const t of this._kmlVisualData.allSublayers.values())t.visibility=0;for(const t of i){const o=this._kmlVisualData.allSublayers.get(t.id);o&&(o.visibility=1)}this._refreshCollections()})]),this._updatingHandles.addPromise(this._fetchService(this._fetchController.signal)),this._imageReprojector=new l}detach(){this._fetchController=B(this._fetchController),this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView=I(this._polygonsView),this._polylinesView=I(this._polylinesView),this._pointsView=I(this._pointsView),this._imageReprojector=I(this._imageReprojector)}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){var t,o;((t=this.view.spatialReference)!=null&&t.isWGS84||(o=this.view.spatialReference)!=null&&o.isWebMercator)&&this._imageReprojector.loadAndReprojectBitmapData(i.href,i.extent,this.view.spatialReference).then(a=>{const r=new et(a.bitmapData);r.x=a.extent.xmin,r.y=a.extent.ymax,r.resolution=a.extent.width/a.bitmapData.width,r.rotation=i.rotation,this._mapImageContainer.addChild(r),this._bitmapIndex.set(i,r)})}async _getViewDependentUrl(i,t){const{viewFormat:o,viewBoundScale:a,httpQuery:r}=i;if(o!=null){if(t==null)throw new Error("Loading this network link requires a view state.");let e;if(await J(),a!=null&&a!==1){const d=new $(t.extent);d.expand(a),e=d}else e=t.extent;e=T(e,j.WGS84);const p=T(e,j.WebMercator),m=e.xmin,n=e.xmax,u=e.ymin,s=e.ymax,D=t.size[0]*t.pixelRatio,y=t.size[1]*t.pixelRatio,x=Math.max(p.width,p.height),b={"[bboxWest]":m.toString(),"[bboxEast]":n.toString(),"[bboxSouth]":u.toString(),"[bboxNorth]":s.toString(),"[lookatLon]":e.center.x.toString(),"[lookatLat]":e.center.y.toString(),"[lookatRange]":x.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":e.center.x.toString(),"[lookatTerrainLat]":e.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":e.center.x.toString(),"[cameraLat]":e.center.y.toString(),"[cameraAlt]":x.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":D.toString(),"[vertPixels]":y.toString(),"[terrainEnabled]":"0","[clientVersion]":W,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},h=d=>{for(const C in d){let f;for(f in b)d[C]=d[C].replace(f,b[f])}},V=A(o);h(V);let v={};r!=null&&(v=A(r),h(v));const S=Z(i.href);return S.query={...S.query,...V,...v},`${S.path}?${F(V)}`}return i.href}async _fetchService(i){const t=new N;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!(t!=null&&t.visibility)&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,o){return this._fetchParsedKML(i,o).then(async a=>{var r;for(const e of a.sublayers){t.allSublayers.set(e.id,e);const p=e.points?await P(e.points):[],m=e.polylines?await P(e.polylines):[],n=e.polygons?await P(e.polygons):[],u=((r=e.mapImages)==null?void 0:r.map(s=>_.fromJSON(s)))??[];if(t.allPoints.push(...p.map(s=>({item:s,sublayerId:e.id}))),t.allPolylines.push(...m.map(s=>({item:s,sublayerId:e.id}))),t.allPolygons.push(...n.map(s=>({item:s,sublayerId:e.id}))),t.allMapImages.push(...u.map(s=>({item:s,sublayerId:e.id}))),e.networkLink){const s=await this._getViewDependentUrl(e.networkLink,this.view.state);await this._loadVisualData(s,t,o)}}})}_fetchParsedKML(i,t){return Q(i,this.layer.spatialReference,this.layer.refreshInterval,t).then(o=>X(o.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};c([g()],w.prototype,"_pointsView",void 0),c([g()],w.prototype,"_polylinesView",void 0),c([g()],w.prototype,"_polygonsView",void 0),c([g()],w.prototype,"updating",void 0),w=c([z("esri.views.2d.layers.KMLLayerView2D")],w);const Mo=w;export{Mo as default};
