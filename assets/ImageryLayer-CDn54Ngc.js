const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./imageryUtils-DZpgBwaI.js","./utils-rirLb0Sq.js","./Accessor-BHnuXKD2.js","./originUtils-D69mHv66.js","./multiOriginJSONSupportUtils-C0wm8_Yw.js","./Portal-CTRRujjZ.js","./index-tefRSezt.js","./index-Cx51aysm.css","./cast-BA_-jlhc.js","./JSONSupport-CGdeqxpk.js","./Promise-CmQqe-ke.js","./writer-B2bQV2uU.js","./Extent-CBBGeHb-.js","./Point-XGrwlf63.js","./PortalItem-CXk7DqVv.js","./jsonContext-CdRtpU_S.js","./portalItemUtils-rm7sAgcm.js","./projection-B2I9Bzj_.js","./SimpleObservable-7oieNGD8.js","./vec3f64-BLpZdpfb.js","./Polyline-BmuD2-ZN.js","./mathUtils-DV9iOXpW.js","./projectBuffer-DOU0xvVi.js","./geodesicConstants-yASAK_zX.js","./saveUtils-DLMLWtvP.js"])))=>i.map(i=>d[i]);
import{_ as ei}from"./index-tefRSezt.js";import{c as V,r,m as a,a as v,$ as Ze,h as A,B as Mt,s as I,bW as ti,af as ii,k as ri,V as si}from"./Accessor-BHnuXKD2.js";import{b as ni,q as oi}from"./Graphic-CFXUQZlS.js";import{a as he}from"./Clonable-DvJsj5LF.js";import{S as ai}from"./MultiOriginJSONSupport-nGLpCFeg.js";import{r as T,o as U}from"./writer-B2bQV2uU.js";import{f as li}from"./Layer-C9uQlTBT.js";import{o as Gt,P as D,I as ui}from"./cast-BA_-jlhc.js";import{d as pi}from"./reactiveUtils-BR0C1Kq4.js";import{w as Qe}from"./Extent-CBBGeHb-.js";import{j as bt,u as mi}from"./Polyline-BmuD2-ZN.js";import{j as M,g as ne,av as xe,au as pt,aE as mt,a2 as St}from"./Point-XGrwlf63.js";import{f as ci,y as di,d as yi,l as hi}from"./commonProperties-C0eC30J9.js";import{m as ft,f as gi,v as fi,p as wi,h as vi}from"./multidimensionalUtils-SQpvKUH-.js";import{S as F}from"./JSONSupport-CGdeqxpk.js";import{w as j,f as Z,g as Ri,c as bi,l as Si,p as xi,a as Ii,B as Fi,L as Di,U as ji,q as Ti,e as Ni,t as Pi}from"./ImageHistogramParameters-Cobpl2oj.js";import{s as Ci}from"./pixelRangeUtils-ouDveaCT.js";import{S as zt,f as Lt,g as _i,v as Oi,A as $i,a as Se,w as ke,e as Ce,n as Mi,d as Ut,_ as Vi,j as Vt,P as Ai}from"./RasterSymbolizer-B36eoQa5.js";import{b as Ji}from"./SizeVariable-IzD1bP2e.js";import{y as qi}from"./Field-Cyk7Ur5d.js";import{Z as Ei}from"./FieldsIndex-DFdVonga.js";import{t as At}from"./imageBitmapUtils-BSeMtYaY.js";import{g as wt,s as Gi,l as zi}from"./dataUtils-C9PeJKfO.js";import{o as Li,m as Ui,c as Hi,f as Bi,d as Qi,$ as ki,p as Wi,v as Zi,V as Ki,t as Pe,n as Xi,b as Yi,a as er}from"./rasterFieldUtils-tcgglH7k.js";import{v as X,f as re}from"./jsonUtils-Cu7OBRmN.js";import{R as _e}from"./normalizeUtils-XRAPXbWa.js";import{f as E,s as H,i as B}from"./utils-Cy8wFNQo.js";import{l as W}from"./typeUtils-BSg8Y507.js";import{r as tr}from"./enumeration-Cr5WIZs4.js";import{s as ir,b as vt}from"./Query-DCBIeen2.js";import{p as Ot}from"./TimeExtent-J5qnUFx_.js";import{d as Ht}from"./FeatureSet-DpCN730g.js";import{f as Jt,p as rr,c as sr,o as nr}from"./RasterPresetRendererMixin-BDFeg8XQ.js";import{a as or,s as ar}from"./executeForIds-CUQYF7Pj.js";import{s as lr}from"./executeQueryJSON-CLYdIUdF.js";import{l as ur}from"./ArcGISService-BHkTabnw.js";import{p as pr,t as mr}from"./ScaleRangeLayer-C59zG_yk.js";import{e as cr}from"./CustomParametersMixin-uo3x70vd.js";import{b as dr}from"./OperationalLayer-Bts9W3HA.js";import{j as yr}from"./PortalLayer-jhi5QQgB.js";import{f as hr}from"./RefreshableLayer-Cn2UpWQD.js";import{l as gr}from"./TemporalLayer-CYEvmdjr.js";import{t as fr}from"./versionUtils-DSsYFI36.js";import{p as wr}from"./popupUtils-pQ0CVidQ.js";import{A as Ye}from"./interfaces-CL2NbQte.js";import"./opacityUtils-CSd4XoR2.js";import"./Promise-CmQqe-ke.js";import"./Color-gncXBiLc.js";import"./colorUtils-Rxh2V3ai.js";import"./mathUtils-DV9iOXpW.js";import"./ActionToggle-__-l4AdQ.js";import"./Identifiable-BrT7zvUW.js";import"./TextSymbol-BQ_NW9Xo.js";import"./screenUtils-_ZIvrt5o.js";import"./collectionUtils-CbaToa73.js";import"./Portal-CTRRujjZ.js";import"./vec3f64-BLpZdpfb.js";import"./aaBoundingBox-CeBivBRq.js";import"./Evented-DCWccWGU.js";import"./SimpleObservable-7oieNGD8.js";import"./layerContainerType-C5CzMsLd.js";import"./ElevationInfo-Di4W6v5U.js";import"./unitConversionUtils-C4AR5obr.js";import"./lengthUtils-DjJgJFRg.js";import"./AttributeTableTemplate-B7rH2qLr.js";import"./workers-D8Q3pEzK.js";import"./Queue-BOnccek2.js";import"./intl-Do3GEEJ7.js";import"./ClassBreaksRenderer-BBSNkSFx.js";import"./commonProperties-bGHL1a5M.js";import"./colorRamps-Dkx8zIVn.js";import"./ColorStop-CDpeFWOz.js";import"./jsonUtils-Dzgxk9pw.js";import"./layerUtils-dJgsXxkC.js";import"./defaults-Dwxdhopq.js";import"./defaultsJSON-GKolV7NZ.js";import"./RendererLegendOptions-mgfHoilI.js";import"./UniqueValueRenderer-Cri3tgP5.js";import"./diffUtils-CMkuJvD2.js";import"./styleUtils-BB-zx7mT.js";import"./ClassBreaksDefinition-DvZJqFCP.js";import"./visualVariableUtils-Bp9QCb8E.js";import"./utils-9nq77ifz.js";import"./jsonUtils-TjZmCq6l.js";import"./utils-DYurMneM.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-Fi6iAz29.js";import"./common-DQOJ18NT.js";import"./cimSymbolUtils-azhJhO4Y.js";import"./utils-B91u8350.js";import"./defaultCIMValues-DII_GG3u.js";import"./enums-BJSSbDkD.js";import"./LRUCache-DS2O1kTf.js";import"./MemCache-CDoaVBHf.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./colorUtils-BAowQmkN.js";import"./vec42-YcqnINSP.js";import"./vec4f64-o2zAXfmz.js";import"./fieldType-L-VlbZqy.js";import"./timeZoneUtils-COos5xIr.js";import"./normalizeUtilsCommon-D0zPTJCj.js";import"./utils-CkSELPnj.js";import"./FullTextSearch-BWm_kPUE.js";import"./timeUtils-D2X862bk.js";import"./query-BS_L6I0Q.js";import"./pbfQueryUtils-AwPAOS5M.js";import"./pbf-CFI-xDDp.js";import"./memoryEstimations-5gFNwkKK.js";import"./OptimizedGeometry-7IxBWtHr.js";import"./OptimizedFeature-DcMLlxvB.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-DwN6mTru.js";import"./projection-B2I9Bzj_.js";import"./projectBuffer-DOU0xvVi.js";import"./geodesicConstants-yASAK_zX.js";import"./PortalItem-CXk7DqVv.js";import"./portalItemUtils-rm7sAgcm.js";import"./TimeInfo-LjqhhubF.js";import"./TimeInterval-BDTTJ9Uw.js";const vr={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},Rr=new Set(["u1","u2","u4","u8","s8","u16","s16"]),br={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},Sr=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function Bt(s){return Sr.has(s.type)}function xt(s,i){var e;if(!s||!i)return V(s||i);const o=V(s);if(o.functionDefinition&&i.rasterFunctionDefinition){const t=i.rasterFunctionDefinition;(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=void 0),Qt(o.functionDefinition.arguments,i),o.rasterFunctionDefinition=o.functionDefinition.toJSON()}else((e=i.functionName)==null?void 0:e.toLowerCase())!=="none"&&(kt(o.functionArguments).Raster=i);return o}function Qt(s,i){for(const o in s)o.toLowerCase()==="raster"&&(s[o].type==="RasterFunctionVariable"?(s[o]=i.rasterFunctionDefinition,s[o].type="RasterFunctionTemplate"):s[o].type==="RasterFunctionTemplate"&&Qt(s[o].arguments,i))}function oe(s){const i=V(vr[s.functionName+"Function"]),o=s.functionArguments;for(const e in o)e.toLowerCase()==="raster"?(i.arguments[e]=oe(o[e]),i.arguments[e].type="RasterFunctionTemplate"):e.toLowerCase()==="colormap"?(i.arguments[e].value=Pr(o[e]),i.arguments.ColorSchemeType.value=0):i.arguments[e].value=o[e];return i}function xr(s,i){switch(i=i||{},s.type){case"raster-stretch":return Dr(s,i);case"class-breaks":return jr(s,i);case"unique-value":return Tr(s,i);case"raster-colormap":return Nr(s,i);case"vector-field":return Ir(s,i);case"raster-shaded-relief":return Fr(s,i);case"flow":throw new Error("Unsupported rendering rule.")}}function kt(s){const i=(s==null?void 0:s.Raster)??(s==null?void 0:s.raster);return i&&i.declaredClass==="esri.layers.support.RasterFunction"?kt(i.functionArguments):s}const Ge={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function Ir(s,i){const o=new j;o.functionName="VectorFieldRenderer";const{dataType:e,bandNames:t}=i,n=e==="vector-uv";let l,u;if(t&&t.length===2){const g=t.map(w=>w.toLowerCase());l=g.indexOf("magnitude"),u=g.indexOf("direction")}l!==-1&&l!==null||(l=0,u=1);const m=s.rotationType==="arithmetic"?1:2,c=s.flowRepresentation==="flow-from"?0:1,p=s.visualVariables?s.visualVariables.find(g=>g.field==="Magnitude"):new Ji,d={magnitudeBandID:l,directionBandID:u,isUVComponents:n,referenceSystem:m,massFlowAngleRepresentation:c,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:br[s.style.toLowerCase().replace("-","_")],minimumMagnitude:p.minDataValue,maximumMagnitude:p.maxDataValue,minimumSymbolSize:p.minSize,maximumSymbolSize:p.maxSize};o.functionArguments=d;const y=oe(o);return i.convertToRFT?j.fromJSON({rasterFunctionDefinition:y}):o}function Fr(s,i){const o=i.convertToRFT;if(i.dataType!=="elevation"&&(i.dataType!=="generic"||i.bandCount!==1||i.pixelType!=="s16"&&i.pixelType!=="s32"&&i.pixelType!=="f32"&&i.pixelType!=="f64"))return new j;const e=new j;e.functionName="Hillshade";const t=s.hillshadeType==="traditional"?0:1,n=s.scalingType==="none"?1:3,l={HillshadeType:t,SlopeType:n,ZFactor:s.zFactor};return t===0&&(l.Azimuth=s.azimuth,l.Altitude=s.altitude),n===3&&(l.PSPower=s.pixelSizePower,l.PSZFactor=s.pixelSizeFactor),e.functionArguments=l,e.variableName="Raster",s.colorRamp&&(e.functionName="ShadedRelief",o?l.ColorRamp=zt(s.colorRamp):l.Colormap=Lt(s.colorRamp)),o?new j({rasterFunctionDefinition:oe(e)}):e}function Dr(s,i){var m,c;const o=i.convertToRFT,e=new j;e.functionName="Stretch";const t=Ge[_i.toJSON(s.stretchType)],n="u8",l=(m=s.customStatistics)==null?void 0:m.map(p=>[p.min,p.max,p.avg??0,p.stddev??1]),u={StretchType:t,Statistics:l,DRA:s.dynamicRangeAdjustment,UseGamma:s.useGamma,Gamma:s.gamma,ComputeGamma:s.computeGamma};if(s.outputMin!=null&&(u.Min=s.outputMin),s.outputMax!=null&&(u.Max=s.outputMax),t===Ge.standardDeviation?(u.NumberOfStandardDeviations=s.numberOfStandardDeviations,e.outputPixelType=n):t===Ge.percentClip?(u.MinPercent=s.minPercent,u.MaxPercent=s.maxPercent,e.outputPixelType=n):t===Ge.minMax?e.outputPixelType=n:t===Ge.sigmoid&&(u.SigmoidStrengthLevel=s.sigmoidStrengthLevel),e.functionArguments=u,e.variableName="Raster",s.colorRamp){const p=s.colorRamp,d=new j;if(o)d.functionArguments={ColorRamp:zt(p)};else{const y=Oi(p,!0);if(y)d.functionArguments={colorRampName:y};else if(!i.convertColorRampToColormap||p.type!=="algorithmic"&&p.type!=="multipart"){const g=s.colorRamp.toJSON();g.type==="algorithmic"?g.algorithm=g.algorithm||"esriCIELabAlgorithm":g.type==="multipart"&&((c=g.colorRamps)!=null&&c.length)&&g.colorRamps.forEach(w=>w.algorithm=w.algorithm||"esriCIELabAlgorithm"),d.functionArguments={colorRamp:g}}else d.functionArguments={Colormap:Lt(p)}}return d.variableName="Raster",d.functionName="Colormap",d.functionArguments.Raster=e,o?new j({rasterFunctionDefinition:oe(d)}):d}return o?new j({rasterFunctionDefinition:oe(e)}):e}function jr(s,i){const o=[],e=[],t=[],n=[],{pixelType:u,rasterAttributeTable:m}=i,c=m==null?null:m.features,p=Wt(m);if(p&&c&&Array.isArray(c)&&s.classBreakInfos){s.classBreakInfos.forEach((h,R)=>{var P;const N=(P=h.symbol)==null?void 0:P.color;let b;N!=null&&N.a&&h.minValue!=null&&h.maxValue!=null&&c.forEach(G=>{h.minValue!=null&&h.maxValue!=null&&(b=G.attributes[s.field],(b>=h.minValue&&b<h.maxValue||R===s.classBreakInfos.length-1&&b>=h.minValue)&&n.push([G.attributes[p],N.r,N.g,N.b]))})});const w=u?ct(n,u):n,f=new j;return f.functionName="Colormap",f.functionArguments={},f.functionArguments.Colormap=w,f.variableName="Raster",i.convertToRFT?new j({rasterFunctionDefinition:oe(f)}):f}s.classBreakInfos.forEach((w,f)=>{if(w.minValue==null||w.maxValue==null)return;const h=w.symbol&&w.symbol.color;h!=null&&h.a?(f===0?o.push(w.minValue,w.maxValue+1e-4):o.push(w.minValue+1e-4,w.maxValue+1e-4),e.push(f),n.push([f,h.r,h.g,h.b])):t.push(w.minValue,w.maxValue)});const d=u?ct(n,u):n,y=new j;y.functionName="Remap",y.functionArguments={InputRanges:o,OutputValues:e,NoDataRanges:t},y.variableName="Raster";const g=new j;return g.functionName="Colormap",g.functionArguments={Colormap:d,Raster:y},i.convertToRFT?new j({rasterFunctionDefinition:oe(g)}):g}function ct(s,i){const o=Rr.has(i)?Ci(i):null;return o&&s.push([Math.floor(o[0]-1),0,0,0],[Math.ceil(o[1]+1),0,0,0]),s}function Wt(s){if(s==null)return;const{fields:i}=s,o=i==null?void 0:i.find(e=>(e==null?void 0:e.name)&&e.name.toLowerCase()==="value");return o==null?void 0:o.name}function Tr(s,i){var d,y;const o=[],{pixelType:e,rasterAttributeTable:t}=i,n=t==null?null:t.features,l=Wt(t),u=(y=(d=s.defaultSymbol)==null?void 0:d.color)==null?void 0:y.toRgb(),m=s.uniqueValueInfos;if(m)if(n){if(l){const g=new Map;m.forEach(f=>{const h=f.value,R=qt(f);h!=null&&(R!=null&&R.a)&&g.set(String(h),R.toRgb())});const w=s.field;w&&n.forEach(({attributes:f})=>{const h=String(f[w]),R=f[l],N=g.get(h);N?o.push([R,...N]):u&&o.push([R,...u])})}}else for(let g=0;g<m.length;g++){const w=m[g],f=qt(w),h=+w.value;if(f!=null&&f.a){if(isNaN(h))return null;o.push([h,f.r,f.g,f.b])}}const c=e?ct(o,e):o,p=new j;return p.functionName="Colormap",p.functionArguments={},p.functionArguments.Colormap=c,p.variableName="Raster",i.convertToRFT?new j({rasterFunctionDefinition:oe(p)}):p}function qt(s){var i,o,e,t,n;return((i=s.symbol)==null?void 0:i.type)==="polygon-3d"?(t=(e=(o=s.symbol.symbolLayers)==null?void 0:o.find(l=>l.type==="fill"))==null?void 0:e.material)==null?void 0:t.color:(n=s.symbol)==null?void 0:n.color}function Nr(s,i){const o=s.extractColormap();if(!o||o.length===0)return null;const{pixelType:e}=i,t=e?ct(o,e):o,n=new j;return n.functionName="Colormap",n.functionArguments={},n.functionArguments.Colormap=t,i.convertToRFT?new j({rasterFunctionDefinition:oe(n)}):n}function Pr(s){const i=[],o=[];return s.forEach(e=>{i.push(e[0]),o.push($i([...e.slice(1),255]))}),{type:"RasterColormap",values:i,colors:o}}let O=class extends F{constructor(){super(...arguments),this.layer=null,this.compression=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(i,o,e){this.layer.version<10.3||(o[e]=i)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(i,o,e){this.format&&this.format.toLowerCase().includes("jpg")&&i!=null&&(o[e]=i)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(i,o,e){this.format==="lerc"&&i!=null&&(o[e]=i)}get format(){var i;return((i=this.layer.renderer)==null?void 0:i.type)==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}get pixelType(){const{layer:i}=this;return i.pixelType!==i.serviceRasterInfo.pixelType?i.pixelType:void 0}writeLercVersion(i,o,e){this.format==="lerc"&&this.layer.version>=10.5&&(o[e]=i)}get version(){const i=this.layer;return i.commitProperty("bandIds"),i.commitProperty("format"),i.commitProperty("compressionQuality"),i.commitProperty("compressionTolerance"),i.commitProperty("interpolation"),i.commitProperty("noData"),i.commitProperty("noDataInterpretation"),i.commitProperty("mosaicRule"),i.commitProperty("rasterFunction"),i.commitProperty("adjustAspectRatio"),i.commitProperty("pixelFilter"),i.commitProperty("pixelType"),i.commitProperty("definitionExpression"),i.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(i){this._set("version",i)}get mosaicRule(){const i=this.layer;let o=i.mosaicRule;const e=i.definitionExpression;return o?e&&e!==o.where&&(o=o.clone(),o.where=e):e&&(o=new Z({where:e})),o}get rasterFunction(){var l,u;const i=this.layer;let{rasterFunction:o}=i;const e=i.pixelFilter,t=!i.format||i.format.includes("jpg")||i.format.includes("png");o=this._addResampleRasterFunction(o);const n=(l=i.multidimensionalSubset)==null?void 0:l.areaOfInterest;return n&&(o=Cr(o,n)),t&&!e&&((u=i.renderer)==null?void 0:u.type)!=="vector-field"&&(o=this.combineRendererWithRenderingRule(o)),o}combineRendererWithRenderingRule(i){const o=this.layer,{rasterInfo:e,renderer:t}=o;return i=i||o.rasterFunction,!t||!Bt(t)?i:xt(xr(t,{rasterAttributeTable:e.attributeTable,pixelType:e.pixelType,dataType:e.dataType,bandNames:e.bandInfos.map(({name:n})=>n),convertColorRampToColormap:o.version<10.6,convertToRFT:!!(i!=null&&i.rasterFunctionDefinition),bandCount:e.bandCount}),i)}_addResampleRasterFunction(i){var n;if(((n=this.layer.renderer)==null?void 0:n.type)!=="vector-field"||(i==null?void 0:i.functionName)==="Resample")return i;const o=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,e=this.layer.serviceRasterInfo.pixelSize;let t=new j({functionName:"Resample",functionArguments:{ResamplingType:o,InputCellSize:e}});return t=i!=null&&i.rasterFunctionDefinition?new j({rasterFunctionDefinition:oe(t)}):t,xt(t,i)}};function Cr(s,i){const o=new j({functionName:"Clip",functionArguments:{ClippingGeometry:i.toJSON(),ClippingType:1}});return xt(o,s)}r([a()],O.prototype,"layer",void 0),r([a({json:{write:!0}})],O.prototype,"adjustAspectRatio",null),r([T("adjustAspectRatio")],O.prototype,"writeAdjustAspectRatio",null),r([a({json:{write:!0}})],O.prototype,"bandIds",null),r([a({json:{write:!0}})],O.prototype,"compression",void 0),r([a({json:{write:!0}})],O.prototype,"compressionQuality",null),r([T("compressionQuality")],O.prototype,"writeCompressionQuality",null),r([a({json:{write:!0}})],O.prototype,"compressionTolerance",null),r([T("compressionTolerance")],O.prototype,"writeCompressionTolerance",null),r([a({json:{write:!0}})],O.prototype,"format",null),r([a({type:String,json:{read:{reader:Se.read},write:{writer:Se.write}}})],O.prototype,"interpolation",null),r([a({json:{write:!0}})],O.prototype,"noData",null),r([a({type:String,json:{read:{reader:ke.read},write:{writer:ke.write}}})],O.prototype,"noDataInterpretation",null),r([a({type:Ce.apiValues,json:{read:Ce.read,write:Ce.write}})],O.prototype,"pixelType",null),r([a({json:{write:!0}})],O.prototype,"lercVersion",void 0),r([T("lercVersion")],O.prototype,"writeLercVersion",null),r([a({type:Number})],O.prototype,"version",null),r([a({json:{write:!0}})],O.prototype,"mosaicRule",null),r([a({json:{write:!0,name:"renderingRule"}})],O.prototype,"rasterFunction",null),O=r([v("esri.layers.support.ExportImageServiceParameters")],O);let we=class extends he.ClonableMixin(F){constructor(){super(...arguments),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};r([a({type:M,json:{read:!0}})],we.prototype,"fromGeometry",void 0),r([a({type:M,json:{read:!0,write:!0}})],we.prototype,"toGeometry",void 0),r([a({json:{write:!0}})],we.prototype,"objectIds",void 0),r([a({type:String,json:{write:!0}})],we.prototype,"where",void 0),r([a({type:Number,json:{write:!0}})],we.prototype,"maxCount",void 0),we=r([v("esri.rest.support.FindImagesParameters")],we);const _r=we,Zt=s=>{let i=class extends s{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return r([a({json:{write:!0}})],i.prototype,"make",void 0),r([a({json:{write:!0}})],i.prototype,"model",void 0),r([a({json:{write:!0}})],i.prototype,"focalLength",void 0),r([a({json:{write:!0}})],i.prototype,"pixelSize",void 0),r([a({json:{write:!0}})],i.prototype,"rows",void 0),r([a({json:{write:!0}})],i.prototype,"cols",void 0),i=r([v("esri.rest.support.CameraInfoMixin")],i),i};let Y=class extends Zt(F){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(i,o){o.acquisitionDate=i==null?void 0:i.getTime()}};r([a({json:{write:!0}})],Y.prototype,"id",void 0),r([a({json:{name:"uri",write:!0}})],Y.prototype,"referenceUri",void 0),r([a({type:Date,json:{write:!0}})],Y.prototype,"acquisitionDate",void 0),r([T("acquisitionDate")],Y.prototype,"writeAcquisitionDate",null),r([a({json:{write:!0}})],Y.prototype,"cameraID",void 0),r([a({type:M,json:{write:!0}})],Y.prototype,"center",void 0),r([a({type:M,json:{write:!0}})],Y.prototype,"perspectiveCenter",void 0),r([a({json:{write:!0}})],Y.prototype,"orientation",void 0),Y=r([v("esri.rest.support.ImageInspectionInfo")],Y);const Or=Y;let et=class extends F{constructor(){super(...arguments),this.images=null}};r([a({type:[Or],json:{write:!0}})],et.prototype,"images",void 0),et=r([v("esri.rest.support.FindImagesResult")],et);const $r=et;var It;let De=It=class extends F{constructor(s){super(s),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new It(V({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};r([a({type:[String],json:{name:"angleName",write:!0}})],De.prototype,"angleNames",void 0),r([a({type:M,json:{write:!0}})],De.prototype,"point",void 0),r([a({type:ne,json:{write:!0}})],De.prototype,"spatialReference",void 0),r([a({type:Ze,json:{write:!0}})],De.prototype,"rasterId",void 0),De=It=r([v("esri.rest.support.ImageAngleParameters")],De);const Mr=De;let Oe=class extends F{constructor(i){super(i),this.north=null,this.up=null,this.spatialReference=null}};r([a({type:Number,json:{write:!0}})],Oe.prototype,"north",void 0),r([a({type:Number,json:{write:!0}})],Oe.prototype,"up",void 0),r([a({type:ne,json:{write:!0}})],Oe.prototype,"spatialReference",void 0),Oe=r([v("esri.rest.support.ImageAngleResult")],Oe);const Vr=Oe,K=new Gt({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let be=class extends F{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};r([a({type:Number,json:{read:!0,write:!0}})],be.prototype,"value",void 0),r([a({type:String,json:{read:!0,write:!0}})],be.prototype,"displayValue",void 0),r([a({type:Number,json:{read:!0,write:!0}})],be.prototype,"uncertainty",void 0),be=r([v("esri.rest.support.imageMeasureUtils.BaseImageMeasureResultValue")],be);let Je=class extends be{constructor(){super(...arguments),this.unit=null}};r([a({type:String,json:{read:xe.read,write:xe.write}})],Je.prototype,"unit",void 0),Je=r([v("esri.rest.support.imageMeasureUtils.ImageMeasureResultLengthValue")],Je);let tt=class extends be{constructor(){super(...arguments),this.unit=null}};r([a({type:String,json:{read:pt.read,write:pt.write}})],tt.prototype,"unit",void 0),tt=r([v("esri.rest.support.imageMeasureUtils.ImageMeasureResultAreaValue")],tt);let We=class extends be{constructor(){super(...arguments),this.unit=null}};r([a({type:String,json:{read:mt.read,write:mt.write}})],We.prototype,"unit",void 0),We=r([v("esri.rest.support.imageMeasureUtils.ImageMeasureResultAngleValue")],We);let ve=class extends F{constructor(i){super(i),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};r([a()],ve.prototype,"type",void 0),r([a({type:K.apiValues,json:{read:K.read,write:K.write}})],ve.prototype,"measureOperation",void 0),r([a({type:Z,json:{write:!0}})],ve.prototype,"mosaicRule",void 0),r([a({type:M,json:{write:!0}})],ve.prototype,"pixelSize",void 0),r([a({json:{write:!0}})],ve.prototype,"raster",void 0),ve=r([v("esri.rest.support.BaseImageMeasureParameters")],ve);const dt=ve;var Ft;let ue=Ft=class extends dt{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(s,i,o){s!=null&&(i.geometryType=X(s),i[o]=s.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new Ft(V({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([a({types:W,json:{name:"fromGeometry",read:!0,write:!0}})],ue.prototype,"geometry",void 0),r([T("geometry")],ue.prototype,"writeGeometry",null),r([a({type:K.apiValues,json:{write:K.write}})],ue.prototype,"measureOperation",null),r([a({json:{read:!0}})],ue.prototype,"is3D",void 0),r([a({type:String,json:{read:xe.read,write:xe.write}})],ue.prototype,"linearUnit",void 0),r([a({type:String,json:{read:pt.read,write:pt.write}})],ue.prototype,"areaUnit",void 0),ue=Ft=r([v("esri.rest.support.ImageAreaParameters")],ue);const Ar=ue;let ze=class extends F{constructor(i){super(i),this.name=null,this.sensorName=null}};r([a({type:String,json:{read:!0,write:!0}})],ze.prototype,"name",void 0),r([a({type:String,json:{read:!0,write:!0}})],ze.prototype,"sensorName",void 0),ze=r([v("esri.rest.support.BaseImageMeasureResult")],ze);const yt=ze;let Le=class extends yt{constructor(){super(...arguments),this.area=null,this.perimeter=null}};r([a({type:tt,json:{read:!0,write:!0}})],Le.prototype,"area",void 0),r([a({type:Je,json:{read:!0,write:!0}})],Le.prototype,"perimeter",void 0),Le=r([v("esri.rest.support.ImageAreaResult")],Le);const Jr=Le;let it=class extends he.ClonableMixin(F){constructor(){super(...arguments),this.outSpatialReference=null}};r([a({type:ne,json:{name:"outSR",write:!0}})],it.prototype,"outSpatialReference",void 0),it=r([v("esri.rest.support.ImageBoundaryParameters")],it);const qr=it;let $e=class extends F{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(i,o){return i==null?null:i.rings?bt.fromJSON(i):Qe.fromJSON(i)}};r([a({type:Number,json:{write:!0}})],$e.prototype,"area",void 0),r([a({types:W,json:{name:"shape",write:!0}})],$e.prototype,"geometry",void 0),r([U("geometry")],$e.prototype,"readGeometry",null),$e=r([v("esri.rest.support.ImageBoundaryResult")],$e);const Er=$e;var Dt;let se=Dt=class extends dt{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(s,i,o){s!=null&&(i.geometryType=X(s),i[o]=s.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new Dt(V({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([a({type:M,json:{read:!0,write:!0}})],se.prototype,"fromGeometry",void 0),r([T("fromGeometry")],se.prototype,"writeFromGeometry",null),r([a({type:M,json:{read:!0,write:!0}})],se.prototype,"toGeometry",void 0),r([a({type:K.apiValues,json:{write:K.write}})],se.prototype,"measureOperation",null),r([a({json:{read:!0}})],se.prototype,"is3D",void 0),r([a({type:String,json:{read:xe.read,write:xe.write}})],se.prototype,"linearUnit",void 0),r([a({type:String,json:{read:mt.read,write:mt.write}})],se.prototype,"angularUnit",void 0),se=Dt=r([v("esri.rest.support.ImageDistanceParameters")],se);const Gr=se;let Me=class extends yt{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};r([a({type:Je,json:{read:!0,write:!0}})],Me.prototype,"distance",void 0),r([a({type:We,json:{read:!0,write:!0}})],Me.prototype,"azimuthAngle",void 0),r([a({type:We,json:{read:!0,write:!0}})],Me.prototype,"elevationAngle",void 0),Me=r([v("esri.rest.support.ImageDistanceResult")],Me);const zr=Me;let pe=class extends he.ClonableMixin(F){constructor(){super(...arguments),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(i,o,e){i!=null&&(o.geometryType=X(i),o[e]=JSON.stringify(i.toJSON()))}};r([a({types:W,json:{read:re,write:!0}})],pe.prototype,"geometry",void 0),r([T("geometry")],pe.prototype,"writeGeometry",null),r([a({json:{write:!0}})],pe.prototype,"objectIds",void 0),r([tr(ir,{ignoreUnknown:!1,name:"spatialRel"})],pe.prototype,"spatialRelationship",void 0),r([a({type:Ot,json:{name:"time",write:!0}})],pe.prototype,"timeExtent",void 0),r([a({type:String,json:{write:!0}})],pe.prototype,"where",void 0),pe=r([v("esri.rest.support.ImageGPSInfoParameters")],pe);const Lr=pe;let rt=class extends Zt(F){constructor(){super(...arguments),this.id=null}};r([a({json:{write:!0}})],rt.prototype,"id",void 0),rt=r([v("esri.rest.support.CameraInfo")],rt);const Ur=rt;let ee=class extends F{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(i,o){o.acquisitionDate=i==null?void 0:i.getTime()}};r([a({json:{write:!0}})],ee.prototype,"id",void 0),r([a({json:{write:!0}})],ee.prototype,"name",void 0),r([a({type:Date,json:{write:!0}})],ee.prototype,"acquisitionDate",void 0),r([T("acquisitionDate")],ee.prototype,"writeAcquisitionDate",null),r([a({json:{write:!0}})],ee.prototype,"cameraID",void 0),r([a({type:M,json:{write:!0}})],ee.prototype,"center",void 0),r([a({json:{write:!0}})],ee.prototype,"gps",void 0),r([a({json:{write:!0}})],ee.prototype,"orientation",void 0),ee=r([v("esri.rest.support.ImageGPSInfo")],ee);const Hr=ee;let Ue=class extends F{constructor(){super(...arguments),this.images=null,this.cameras=null}};r([a({type:[Hr],json:{write:!0}})],Ue.prototype,"images",void 0),r([a({type:[Ur],json:{write:!0}})],Ue.prototype,"cameras",void 0),Ue=r([v("esri.rest.support.ImageGPSInfoResult")],Ue);const Br=Ue;var jt;let me=jt=class extends dt{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(s,i,o){s!=null&&(i.geometryType=X(s),i[o]=s.toJSON())}get measureOperation(){return this.operationType}clone(){return new jt(V({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([a({type:M,json:{read:!0}})],me.prototype,"fromGeometry",void 0),r([T("fromGeometry")],me.prototype,"writeFromGeometry",null),r([a({type:M,json:{read:!0,write:!0}})],me.prototype,"toGeometry",void 0),r([a({type:K.apiValues,json:{write:K.write}})],me.prototype,"measureOperation",null),r([a({json:{read:!0}})],me.prototype,"operationType",void 0),r([a({type:String,json:{read:xe.read,write:xe.write}})],me.prototype,"linearUnit",void 0),me=jt=r([v("esri.rest.support.ImageHeightParameters")],me);const Qr=me;let st=class extends yt{constructor(){super(...arguments),this.height=null}};r([a({type:Je,json:{read:!0,write:!0}})],st.prototype,"height",void 0),st=r([v("esri.rest.support.ImageHeightResult")],st);const kr=st;var Tt;let $=Tt=class extends F{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(s,i,o){s!=null&&(i.geometryType=X(s),i[o]=JSON.stringify(s.toJSON()))}set mosaicRule(s){let i=s;i!=null&&i.mosaicMethod&&(i=Z.fromJSON({...i.toJSON(),mosaicMethod:i.mosaicMethod,mosaicOperation:i.mosaicOperation})),this._set("mosaicRule",i)}writeMosaicRule(s,i,o){s!=null&&(i[o]=JSON.stringify(s.toJSON()))}set rasterFunction(s){let i=s;i!=null&&i.rasterFunction&&(i=j.fromJSON({...i.toJSON(),rasterFunction:i.rasterFunction,rasterFunctionArguments:i.rasterFunctionArguments})),this._set("rasterFunction",i)}writeRasterFunction(s,i,o){s!=null&&(i[o]=JSON.stringify(s.toJSON())),s.rasterFunctionDefinition&&(i[o]=JSON.stringify(s.rasterFunctionDefinition))}writeRasterFunctions(s,i,o){s!=null&&(i[o]=JSON.stringify(s.map(e=>e.rasterFunctionDefinition||e.toJSON())))}writePixelSize(s,i,o){s!=null&&(i[o]=JSON.stringify(s))}writeTimeExtent(s,i,o){if(s!=null){const e=s.start!=null?s.start.getTime():null,t=s.end!=null?s.end.getTime():null;i[o]=e!=null?t!=null?`${e},${t}`:`${e}`:null}}clone(){return new Tt(V({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};r([a({types:W,json:{write:!0}})],$.prototype,"geometry",void 0),r([T("geometry")],$.prototype,"writeGeometry",null),r([a({type:Z,json:{write:!0}})],$.prototype,"mosaicRule",null),r([T("mosaicRule")],$.prototype,"writeMosaicRule",null),r([a({type:j,json:{write:!0,name:"renderingRule"}})],$.prototype,"rasterFunction",null),r([T("rasterFunction")],$.prototype,"writeRasterFunction",null),r([a({type:[j],json:{write:!0,name:"renderingRules"}})],$.prototype,"rasterFunctions",void 0),r([T("rasterFunctions")],$.prototype,"writeRasterFunctions",null),r([a({type:M,json:{write:!0}})],$.prototype,"pixelSize",void 0),r([T("pixelSize")],$.prototype,"writePixelSize",null),r([a({type:Boolean,json:{write:!0}})],$.prototype,"returnGeometry",void 0),r([a({type:Boolean,json:{write:!0}})],$.prototype,"returnCatalogItems",void 0),r([a({type:Boolean,json:{write:!0}})],$.prototype,"returnPixelValues",void 0),r([a({type:Number,json:{write:!0}})],$.prototype,"maxItemCount",void 0),r([a({type:Ot,json:{write:{target:"time"}}})],$.prototype,"timeExtent",void 0),r([T("timeExtent")],$.prototype,"writeTimeExtent",null),r([a({json:{write:!0}})],$.prototype,"raster",void 0),r([a({json:{write:!0}})],$.prototype,"viewId",void 0),r([a({type:Boolean,json:{write:!0}})],$.prototype,"processAsMultidimensional",void 0),$=Tt=r([v("esri.rest.support.ImageIdentifyParameters")],$);const Kt=$;let te=class extends F{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};r([a({json:{write:!0}})],te.prototype,"catalogItemVisibilities",void 0),r([a({type:Ht,json:{write:!0}})],te.prototype,"catalogItems",void 0),r([a({type:M,json:{write:!0}})],te.prototype,"location",void 0),r([a({json:{write:!0}})],te.prototype,"name",void 0),r([a({json:{write:!0}})],te.prototype,"objectId",void 0),r([a({json:{write:!0}})],te.prototype,"processedValues",void 0),r([a({json:{write:!0}})],te.prototype,"properties",void 0),r([a({json:{write:!0}})],te.prototype,"value",void 0),te=r([v("esri.rest.support.ImageIdentifyResult")],te);const Wr=te;var Nt;let Ve=Nt=class extends F{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(s,i,o){i.geometries={geometryType:"esriGeometryPoint",geometries:s.map(e=>e.toJSON())}}clone(){var s;return new Nt({geometries:((s=this.geometries)==null?void 0:s.map(i=>i.clone()))??[],rasterId:this.rasterId})}};r([a({type:[M],json:{write:!0}})],Ve.prototype,"geometries",void 0),r([T("geometries")],Ve.prototype,"writeGeometry",null),r([a({type:Ze,json:{write:!0}})],Ve.prototype,"rasterId",void 0),Ve=Nt=r([v("esri.rest.support.ImagePixelLocationParameters")],Ve);const Zr=Ve;let nt=class extends F{constructor(){super(...arguments),this.geometries=null}};r([a({json:{write:!0}})],nt.prototype,"geometries",void 0),nt=r([v("esri.rest.support.ImagePixelLocationResult")],nt);const Kr=nt;var Pt;let je=Pt=class extends dt{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(s,i,o){s!=null&&(i.geometryType=X(s),i[o]=s.toJSON())}get measureOperation(){const{is3D:s,geometry:i}=this;return i.type==="point"?s?"point-3D":"point":s?"centroid-3D":"centroid"}clone(){return new Pt(V({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};r([a({types:W,json:{name:"fromGeometry",read:re}})],je.prototype,"geometry",void 0),r([T("geometry")],je.prototype,"writeGeometry",null),r([a({type:K.apiValues,json:{read:K.read,write:K.write}})],je.prototype,"measureOperation",null),r([a({json:{read:!0}})],je.prototype,"is3D",void 0),je=Pt=r([v("esri.rest.support.ImagePointParameters")],je);const Xr=je;let ot=class extends yt{constructor(){super(...arguments),this.point=null}};r([a({type:M,json:{name:"point.value",read:!0,write:!0}})],ot.prototype,"point",void 0),ot=r([v("esri.rest.support.ImagePointResult")],ot);const Yr=ot;var Ct;let L=Ct=class extends F{constructor(){super(...arguments),this.geometry=null,this.interpolation="nearest",this.mosaicRule=null,this.outFields=null,this.pixelSize=null,this.raster=void 0,this.returnFirstValueOnly=!0,this.sampleDistance=null,this.sampleCount=null,this.sliceId=null,this.timeExtent=null}writeGeometry(s,i,o){s!=null&&(i.geometryType=X(s),i[o]=s.toJSON())}set locations(s){if(s!=null&&s.length){const i=new mi({spatialReference:s[0].spatialReference,points:s.map(({x:o,y:e})=>[o,e])});this._set("locations",s),this.geometry=i}}clone(){return new Ct(V({geometry:this.geometry,locations:this.locations,interpolation:this.interpolation,mosaicRule:this.mosaicRule,outFields:this.outFields,raster:this.raster,returnFirstValueOnly:this.returnFirstValueOnly,sampleDistance:this.sampleDistance,sampleCount:this.sampleCount,sliceId:this.sliceId,pixelSize:this.pixelSize,timeExtent:this.timeExtent}))}};r([a({types:W,json:{read:re}})],L.prototype,"geometry",void 0),r([T("geometry")],L.prototype,"writeGeometry",null),r([a({type:[M]})],L.prototype,"locations",null),r([a({type:String,json:{type:Se.jsonValues,read:Se.read,write:Se.write}})],L.prototype,"interpolation",void 0),r([a({type:Z,json:{write:!0}})],L.prototype,"mosaicRule",void 0),r([a({type:[String],json:{write:!0}})],L.prototype,"outFields",void 0),r([a({type:M,json:{write:!0}})],L.prototype,"pixelSize",void 0),r([a({type:String,json:{write:!0}})],L.prototype,"raster",void 0),r([a({type:Boolean,json:{write:!0}})],L.prototype,"returnFirstValueOnly",void 0),r([a({type:Number,json:{write:!0}})],L.prototype,"sampleDistance",void 0),r([a({type:Number,json:{write:!0}})],L.prototype,"sampleCount",void 0),r([a({type:Number,json:{write:!0}})],L.prototype,"sliceId",void 0),r([a({type:Ot,json:{read:{source:"time"},write:{target:"time"}}})],L.prototype,"timeExtent",void 0),L=Ct=r([v("esri.rest.support.ImageSampleParameters")],L);const es=L;let ce=class extends F{constructor(){super(...arguments),this.attributes=null,this.location=null,this.locationId=null,this.rasterId=null,this.resolution=null,this.pixelValue=null}};r([a({json:{write:!0}})],ce.prototype,"attributes",void 0),r([a({type:M,json:{write:!0}})],ce.prototype,"location",void 0),r([a({json:{write:!0}})],ce.prototype,"locationId",void 0),r([a({json:{write:!0}})],ce.prototype,"rasterId",void 0),r([a({json:{write:!0}})],ce.prototype,"resolution",void 0),r([a({json:{write:!0}})],ce.prototype,"pixelValue",void 0),ce=r([v("esri.rest.support.ImageSample")],ce);const ts=ce;let at=class extends F{constructor(){super(...arguments),this.samples=[]}};r([a({type:[ts],json:{write:!0}})],at.prototype,"samples",void 0),at=r([v("esri.rest.support.ImageSampleResult")],at);const is=at;let Te=class extends he.ClonableMixin(F){constructor(){super(...arguments),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(i,o,e){o.geometries=i!=null&&i.length?{geometryType:X(i[0]),geometries:i.map(t=>({...t.toJSON(),spatialReference:void 0}))}:null}};r([a({types:[W]})],Te.prototype,"geometries",void 0),r([T("geometries")],Te.prototype,"writeGeometries",null),r([a({type:[Ze],json:{write:!0}})],Te.prototype,"rasterIds",void 0),r([a({type:ne,json:{name:"outSR",write:!0}})],Te.prototype,"outSpatialReference",void 0),Te=r([v("esri.rest.support.ImageToMapMultirayParameters")],Te);const rs=Te;let de=class extends he.ClonableMixin(F){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(i,o,e){i!=null&&(o.geometryType=X(i),o[e]={...i.toJSON(),spatialReference:void 0})}};r([a({types:W,json:{read:re,write:!0}})],de.prototype,"geometry",void 0),r([T("geometry")],de.prototype,"writeGeometry",null),r([a({json:{write:!0}})],de.prototype,"rasterId",void 0),r([a({type:ne,json:{name:"outSR",write:!0}})],de.prototype,"outSpatialReference",void 0),r([a({json:{name:"options.DOff",write:!0}})],de.prototype,"depthOffset",void 0),r([a({json:{name:"options.Adjust",write:!0}})],de.prototype,"adjust",void 0),de=r([v("esri.rest.support.ImageToMapParameters")],de);const ss=de;let He=class extends he.ClonableMixin(F){constructor(){super(...arguments),this.referenceUri=null,this.rasterId=null}};r([a({type:String,json:{name:"uri",write:!0}})],He.prototype,"referenceUri",void 0),r([a({type:Number,json:{write:!0}})],He.prototype,"rasterId",void 0),He=r([v("esri.rest.support.ImageUrlParameters")],He);const ns=He;let lt=class extends F{constructor(){super(...arguments),this.url=null}};r([a({json:{name:"imageURL",write:!0}})],lt.prototype,"url",void 0),lt=r([v("esri.rest.support.ImageUrlResult")],lt);const os=lt,Rt=new Gt({0:"constant",1:"plane",2:"minimum",3:"maximum",4:"average"},{useNumericKeys:!0});let ye=class extends he.ClonableMixin(F){constructor(){super(...arguments),this.geometries=[],this.mosaicRule=null,this.pixelSize=null,this.constantZ=null,this.baseType="plane"}writeGeometries(s,i,o){s!=null&&s.length&&(i.geometryType=X(s[0]),i.geometries=s.map(e=>e.toJSON()))}};r([a({types:[W]})],ye.prototype,"geometries",void 0),r([T("geometries")],ye.prototype,"writeGeometries",null),r([a({type:Z,json:{write:!0}})],ye.prototype,"mosaicRule",void 0),r([a({type:M,json:{write:!0}})],ye.prototype,"pixelSize",void 0),r([a({json:{write:!0}})],ye.prototype,"constantZ",void 0),r([a({type:Rt.apiValues,json:{read:Rt.read,write:Rt.write}})],ye.prototype,"baseType",void 0),ye=r([v("esri.rest.support.ImageVolumeParameters")],ye);const as=ye;let ie=class extends F{constructor(){super(...arguments),this.area=null,this.cut=null,this.fill=null,this.maxZ=null,this.minZ=null,this.meanZ=null,this.cutCellCount=null,this.fillCellCount=null}};r([a({json:{write:!0}})],ie.prototype,"area",void 0),r([a({json:{write:!0}})],ie.prototype,"cut",void 0),r([a({json:{write:!0}})],ie.prototype,"fill",void 0),r([a({json:{name:"maxz",write:!0}})],ie.prototype,"maxZ",void 0),r([a({json:{name:"minz",write:!0}})],ie.prototype,"minZ",void 0),r([a({json:{name:"meanz",write:!0}})],ie.prototype,"meanZ",void 0),r([a({json:{write:!0}})],ie.prototype,"cutCellCount",void 0),r([a({json:{write:!0}})],ie.prototype,"fillCellCount",void 0),ie=r([v("esri.rest.support.ImageVolume")],ie);const ls=ie;let ut=class extends F{constructor(){super(...arguments),this.volumes=[]}};r([a({type:[ls],json:{write:!0}})],ut.prototype,"volumes",void 0),ut=r([v("esri.rest.support.ImageVolumeResult")],ut);const us=ut;let Ne=class extends he.ClonableMixin(F){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(s,i,o){s!=null&&(i.geometryType=X(s),i[o]=JSON.stringify(s))}};r([a({types:W,json:{read:re,write:!0}})],Ne.prototype,"geometry",void 0),r([T("geometry")],Ne.prototype,"writeGeometry",null),r([a({json:{write:!0}})],Ne.prototype,"rasterId",void 0),r([a({json:{name:"options.VisibleOnly",write:!0}})],Ne.prototype,"visibleOnly",void 0),Ne=r([v("esri.rest.support.MapToImageParameters")],Ne);const ps=Ne;let Re=class extends F{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(i,o){return i.spatialReference||(i={...i,spatialReference:o.Shape.spatialReference}),M.fromJSON(i)}};r([a({types:W,json:{name:"Shape",read:re,write:!0}})],Re.prototype,"geometry",void 0),r([a({json:{name:"Length",write:!0}})],Re.prototype,"length",void 0),r([a({json:{name:"Area",write:!0}})],Re.prototype,"area",void 0),r([a({type:M,json:{name:"Center",write:!0}})],Re.prototype,"center",void 0),r([U("center")],Re.prototype,"readCenter",null),Re=r([v("esri.rest.support.MeasureAreaFromImageResult")],Re);const ms=Re;var _t;let Ae=_t=class extends F{constructor(){super(...arguments),this.geometry=null,this.rasterId=void 0}writeGeometry(s,i,o){s!=null&&(i.geometryType=X(s),i[o]={...s.toJSON(),spatialReference:void 0})}clone(){const s=V({geometry:this.geometry,rasterId:this.rasterId});return new _t(s)}};r([a({types:W,json:{name:"fromGeometry",read:re,write:!0}})],Ae.prototype,"geometry",void 0),r([T("geometry")],Ae.prototype,"writeGeometry",null),r([a({json:{write:!0}})],Ae.prototype,"rasterId",void 0),Ae=_t=r([v("esri.rest.support.MeasureFromImageParameters")],Ae);const cs=Ae;let Be=class extends F{constructor(){super(...arguments),this.geometry=null,this.length=null}};r([a({types:W,json:{name:"Shape",read:re,write:!0}})],Be.prototype,"geometry",void 0),r([a({json:{name:"Length",write:!0}})],Be.prototype,"length",void 0),Be=r([v("esri.rest.support.MeasureLengthFromImageResult")],Be);const ds=Be;function $t(s){const i=s==null?void 0:s.time;if(i&&(i.start!=null||i.end!=null)){const o=[];i.start!=null&&o.push(i.start),i.end==null||o.includes(i.end)||o.push(i.end),s.time=o.join(",")}}async function Xt(s,i,o){i=A(Ri,i);const e=E(s),t=i.geometry?[i.geometry]:[],n=await _e(t),l=i.toJSON();$t(l);const u=n==null?void 0:n[0];u!=null&&(l.geometry=ae(u));const m=H({...e.query,f:"json",...l});return B(m,o)}async function ys(s,i,o){const e=(i=A(as,i)).toJSON();e.geometries=JSON.stringify(e.geometries);const t=E(s),n=H({...t.query,f:"json",...e}),l=B(n,o),{data:u}=await D(`${t.path}/calculateVolume`,l);return us.fromJSON({volumes:u.results})}async function hs(s,i,o){var m,c,p;const e=(i=A(Mr,i)).toJSON();e.angleName!=null&&(e.angleName=e.angleName.join(",")),(c=(m=i==null?void 0:i.point)==null?void 0:m.spatialReference)!=null&&c.imageCoordinateSystem&&(e.point.spatialReference=gt(i.point.spatialReference)),(p=i==null?void 0:i.spatialReference)!=null&&p.imageCoordinateSystem&&(e.spatialReference=qe(i.spatialReference));const t=E(s),n=H({...t.query,f:"json",...e}),l=B(n,o),{data:u}=await D(`${t.path}/computeAngles`,l);return u.spatialReference=u.spatialReference?u.spatialReference.geodataXform!=null?new ne({wkid:0,imageCoordinateSystem:u.spatialReference}):ne.fromJSON(u.spatialReference):null,u.north==="NaN"&&(u.north=null),u.up==="NaN"&&(u.up=null),new Vr(u)}async function gs(s,i,o){var c;const e=(i=A(Zr,i)).toJSON(),{geometries:t}=i;if(t)for(let p=0;p<t.length;p++)(c=t[p].spatialReference)!=null&&c.imageCoordinateSystem&&(e.geometries.geometries[p].spatialReference=gt(t[p].spatialReference));const n=E(s),l=H({...n.query,f:"json",...e}),u=B(l,o),{data:m}=await D(`${n.path}/computePixelLocation`,u);return Kr.fromJSON(m)}async function fs(s,i,o){const e=await Xt(s,i,o),t=E(s),{data:n}=await D(`${t.path}/computeStatisticsHistograms`,e),{statistics:l}=n;return l!=null&&l.length&&l.forEach(u=>{u.avg=u.mean,u.stddev=u.standardDeviation}),{statistics:l,histograms:n.histograms}}async function ws(s,i,o){const e=await Xt(s,i,o),t=E(s),{data:n}=await D(`${t.path}/computeHistograms`,e);return{histograms:n.histograms}}async function vs(s,i,o){var d;const e=(i=A(es,i)).toJSON();$t(e),(d=e.outFields)!=null&&d.length&&(e.outFields=e.outFields.join(","));const t=await _e(i.geometry),n=t==null?void 0:t[0];n!=null&&(e.geometry=ae(n));const l=E(s),u=H({...l.query,f:"json",...e}),m=B(u,o),{data:c}=await D(`${l.path}/getSamples`,m),p=c.samples.map(y=>{const g=y.value==="NaN"||y.value===""?null:y.value.split(" ").map(w=>Number(w));return{...y,pixelValue:g}});return is.fromJSON({samples:p})}async function Et(s,i,o){i=A(Kt,i);const e=E(s),t=i.geometry?[i.geometry]:[];return _e(t).then(n=>{const l=i.toJSON(),u=n==null?void 0:n[0];u!=null&&(l.geometry=JSON.stringify(ae(u)));const m=H({...e.query,f:"json",...l}),c=B(m,o);return D(e.path+"/identify",c)}).then(n=>Wr.fromJSON(n.data))}async function Rs(s,i,o){i=A(Qr,i);const e=await ht(s,i,[i.fromGeometry,i.toGeometry],o);return kr.fromJSON(e)}async function bs(s,i,o){i=A(Ar,i);const e=await ht(s,i,[i.geometry],o);return Jr.fromJSON(e)}async function Ss(s,i,o){i=A(Xr,i);const e=await ht(s,i,[i.geometry],o);return Yr.fromJSON(e)}async function xs(s,i,o){i=A(Gr,i);const e=await ht(s,i,[i.fromGeometry,i.toGeometry],o);return zr.fromJSON(e)}async function ht(s,i,o,e){const t=E(s),n=await _e(o),l=i.toJSON();n[0]!=null&&(l.fromGeometry=JSON.stringify(ae(n[0]))),n[1]!=null&&(l.toGeometry=JSON.stringify(ae(n[1])));const u=H({...t.query,f:"json",...l}),m=B(u,e),{data:c}=await D(t.path+"/measure",m);return c}async function Is(s,i,o){const e=await Yt(s,i,o);return ds.fromJSON(e)}async function Fs(s,i,o){const e=await Yt(s,i,o);return ms.fromJSON(e)}async function Yt(s,i,o){i=A(cs,i);const e=E(s),t=i.toJSON(),n=H({...e.query,f:"json",...t}),l=B(n,o),{data:u}=await D(e.path+"/measureFromImage",l);return u}function ae(s){var o;const i=s.toJSON();return(o=s.spatialReference)!=null&&o.imageCoordinateSystem&&(i.spatialReference=gt(s.spatialReference)),i}function gt(s){const{imageCoordinateSystem:i}=s;if(i){const{id:o,referenceServiceName:e}=i;return o!=null?e?{icsid:o,icsns:e}:{icsid:o}:{ics:i}}return s.toJSON()}function qe(s,i){if(!s.imageCoordinateSystem)return St(s);const o=gt(s),{icsid:e,icsns:t}=o;return e==null||t!=null&&!(i!=null&&i.toLowerCase().includes("/"+t.toLowerCase()+"/"))?JSON.stringify(o):`0:${e}`}async function Ds(s,i,o){i=A(qr,i);const e=E(s),t=i.toJSON();i.outSpatialReference&&(t.outSR=qe(i.outSpatialReference));const n=H({...e.query,f:"json",...t}),l=B(n,o),{data:u}=await D(e.path+"/queryBoundary",l);return Er.fromJSON(u)}async function js(s,i,o){var d,y;const e=(i=A(Lr,i)).toJSON();$t(e),(d=e.objectIds)!=null&&d.length&&(e.objectIds=e.objectIds.join(",")),e.geometry||e.objectIds||e.time||e.where||(e.where="1=1");const t=await _e(i.geometry),n=t==null?void 0:t[0];n!=null&&(e.geometry=ae(n));const l=(n==null?void 0:n.spatialReference)??((y=i.geometry)==null?void 0:y.spatialReference);l&&(e.inSR=qe(l));const u=E(s),m=H({...u.query,f:"json",...e}),c=B(m,o),{data:p}=await D(`${u.path}/queryGPSInfo`,c);return Br.fromJSON(p)}async function Ts(s,i,o){const e=(i=A(ss,i)).toJSON();i.geometry.spatialReference.imageCoordinateSystem&&(e.geometry=ae(i.geometry)),i.depthOffset&&i.adjust||delete e.options;const t=E(s),n=H({...t.query,f:"json",...e}),l=B(n,o),{data:u}=await D(`${t.path}/imageToMap`,l);return re(u)}async function Ns(s,i,o){var m;const e=(i=A(rs,i)).toJSON();(m=i.rasterIds)!=null&&m.length&&(e.rasterIds=i.rasterIds.join(","));const t=E(s),n=H({...t.query,f:"json",...e}),l=B(n,o),{data:u}=await D(`${t.path}/imageToMapMultiray`,l);return re(u)}async function Ps(s,i,o){var d;const e=(i=A(ps,i)).toJSON(),t=await _e(i.geometry),n=t==null?void 0:t[0];n!=null&&(e.geometry=ae(n)),i.visibleOnly||delete e.options;const l=(n==null?void 0:n.spatialReference)??((d=i.geometry)==null?void 0:d.spatialReference);l&&(e.inSR=qe(l));const u=E(s),m=H({...u.query,f:"json",...e}),c=B(m,o),{data:p}=await D(`${u.path}/mapToImage`,c);return re(p)}async function Cs(s,i,o){const e=(i=A(ns,i)).toJSON(),t=E(s),n=H({...t.query,f:"json",...e}),l=B(n,o),{data:u}=await D(`${t.path}/getImageUrl`,l);return os.fromJSON(u)}async function _s(s,i,o){var c;const e=(i=A(_r,i)).toJSON(),t=await _e([i.fromGeometry,i.toGeometry]);t[0]!=null&&(e.fromGeometry=ae(t[0]),t[0].spatialReference&&(e.inSR=qe(t[0].spatialReference))),t[1]!=null&&(e.toGeometry=ae(t[1])),(c=i.objectIds)!=null&&c.length&&(e.objectIds=e.objectIds.join(","));const n=E(s),l=H({...n.query,f:"json",...e}),u=B(l,o),{data:m}=await D(`${n.path}/find`,u);return $r.fromJSON(m)}async function Os(s,i,o){var P,G;const e=E(s),t=H({...e==null?void 0:e.query,f:"json"}),n=B(t,o),l=`${e==null?void 0:e.path}/${i}/info`,u=D(`${l}`,n),m=D(`${l}/keyProperties`,n),c=await Promise.allSettled([u,m]),p=c[0].status==="fulfilled"?c[0].value.data:null,d=c[1].status==="fulfilled"?c[1].value.data:null;let y=null;(P=p.statistics)!=null&&P.length&&(y=p.statistics.map(S=>({min:S[0],max:S[1],avg:S[2],stddev:S[3]})));const g=Qe.fromJSON(p.extent),w=Math.ceil(g.width/p.pixelSizeX-.1),f=Math.ceil(g.height/p.pixelSizeY-.1),h=g.spatialReference,R=new M({x:p.pixelSizeX,y:p.pixelSizeY,spatialReference:h}),N=(G=p.histograms)!=null&&G.length?p.histograms:null,b=new Mi({origin:p.origin,blockWidth:p.blockWidth,blockHeight:p.blockHeight,firstPyramidLevel:p.firstPyramidLevel,maximumPyramidLevel:p.maxPyramidLevel});return new Ut({width:w,height:f,bandCount:p.bandCount,extent:g,spatialReference:h,pixelSize:R,pixelType:p.pixelType.toLowerCase(),statistics:y,histograms:N,keyProperties:d,storageInfo:b})}const $s=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),Ms=ti(ii,{min:0,max:255});function Vs(s){const i=JSON.stringify(s),o=i.includes('"rasterFunctionDefinition":{'),e=o?i.match(/"type":"(.*?FunctionArguments")/gi):i.match(/"rasterFunction":"(.*?")/gi),t=e==null?void 0:e.map(n=>o?n.slice(8,-18):n.slice(18,-1));return t?t.join("/"):null}const As=s=>{let i=class extends s{constructor(){super(...arguments),this._functionRasterInfos={},this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this._cachedRendererJson=null,this._serviceSupportsMosaicRule=null,this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new O({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach(t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)}),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every(n=>typeof n=="number"))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,n){e!=null&&this.format!=="lerc"&&(t[n]=e)}writeCompressionTolerance(e,t,n){this.format==="lerc"&&e!=null&&(t[n]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?Z.fromJSON(t):null}get fieldsIndex(){return this.fields?new Ei(this.fields):null}set format(e){e&&$s.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return t.serviceDataType==="esriImageServiceDataTypeVector-UV"||t.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}readMaxScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}set mosaicRule(e){let t=e;t!=null&&t.mosaicMethod&&(t=Z.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const n=e||t.mosaicRule;return n?Z.fromJSON(n):this._isMosaicRuleSupported(t)?Z.fromJSON(t):null}writeMosaicRule(e,t,n){const{mosaicRule:l}=this;this._isValidCustomizedMosaicRule(l)&&(t[n]=l.toJSON())}writeNoData(e,t,n){e!=null&&typeof e=="number"&&(t[n]=Ms(e))}readObjectIdField(e,t){if(!e){const n=t.fields.find(l=>l.type==="esriFieldTypeOID"||l.type==="oid");e=n==null?void 0:n.name}return e}get parsedUrl(){return ui(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}get renderer(){const{activePresetRendererName:e,presetRenderers:t}=this;if(e){const n=t==null?void 0:t.find(({name:l})=>l===e);return n==null?void 0:n.renderer.clone()}return this.internalRenderer}set renderer(e){this.activePresetRendererName=null,this.internalRenderer=e}set internalRenderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("internalRenderer",e)}readRenderer(e,t,n){var m,c;const l=(c=(m=t==null?void 0:t.layerDefinition)==null?void 0:m.drawingInfo)==null?void 0:c.renderer,u=Ii(l,n);return u==null?null:(u.type==="vector-field"&&t.symbolTileSize&&!l.symbolTileSize&&(u.symbolTileSize=t.symbolTileSize),Bt(u)||Mt.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),u)}writeRenderer(e,t,n){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){var l,u,m,c;const e=((l=this.fields)==null?void 0:l.map(p=>p.clone()))??[];e.push(Li()),this.sourceType==="mosaic-dataset"&&((u=this.fields)!=null&&u.length)&&e.push(Ui()),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some(({name:p})=>p.toLowerCase()==="none")&&e.push(Hi()),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter(({name:p})=>p.toLowerCase()!=="none").forEach(({name:p})=>e.push(Bi(p)));const{rasterInfo:t}=this;if(this._isVectorDataSet()){const p=(c=(m=t==null?void 0:t.multidimensionalInfo)==null?void 0:m.variables[0].unit)==null?void 0:c.trim(),d=Qi(p),y=ki();e.push(d,y)}if(t!=null&&t.multidimensionalInfo&&this.sourceType==="raster-dataset"){const p=Wi(t.multidimensionalInfo);e.push(...p)}const n=t==null?void 0:t.attributeTable;if(n!=null){const p=Zi(n);e.push(...p)}return e}set rasterFunction(e){let t=e;t!=null&&t.rasterFunction&&(t=j.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const n=t.rasterFunctionInfos;return t.renderingRule||n!=null&&n.length&&n[0].name!=="None"?this._isRFTJson(t.renderingRule)?j.fromJSON({rasterFunctionDefinition:t.renderingRule}):j.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const n=e||t.extent.spatialReference;return n?ne.fromJSON(n):null}writePixelType(e,t,n){this.serviceRasterInfo!=null&&this.pixelType===this.serviceRasterInfo.pixelType||(t[n]=Ce.toJSON(e))}readVersion(e,t){let n=t.currentVersion;return n||(n=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),n}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let n=e;const{renderer:l,symbolizer:u,pixelFilter:m,bandIds:c}=this;if(!this._isPicture()&&l&&u&&!m){const p=JSON.stringify(this._cachedRendererJson)!==JSON.stringify(l.toJSON()),d=this._rasterJobHandler.instance;if(d){p&&(u.bind(),await d.updateSymbolizer(u,t),this._cachedRendererJson=l.toJSON());const y=await d.symbolize({bandIds:c,...e},t);n={extent:e.extent,pixelBlock:y}}else n={extent:e.extent,pixelBlock:u.symbolize({bandIds:c,...e})}}return n}destroy(){this._shutdownJobHandler()}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}async calculateVolume(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsCalculateVolume)throw new I("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=V(e),this.mosaicRule&&e.mosaicRule==null&&(e.mosaicRule=this.mosaicRule),ys(this.url,e,this._getRequestOptions(t))}async computeAngles(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeAngles)throw new I("imagery-layer:compute-angles","this operation is not supported on the input image service");return hs(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputePixelLocation)throw new I("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return gs(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeHistograms)throw new I("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=V(e),this._applyMosaicAndRenderingRules(e),ws(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsComputeStatisticsHistograms)throw new I("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=V(e),this._applyMosaicAndRenderingRules(e),fs(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(e.operationType==="base-and-top"?n.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?n.mensuration.supportsHeightFromBaseAndTopShadow:n.mensuration.supportsHeightFromTopAndTopShadow))throw new I("imagery-layer:measure-height","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),Rs(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n.mensuration.supportsAreaAndPerimeter&&(!e.is3D||n.mensuration.supports3D)))throw new I("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),bs(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n.mensuration.supportsDistanceAndAngle&&(!e.is3D||n.mensuration.supports3D)))throw new I("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),xs(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n.mensuration.supportsPointOrCentroid&&(!e.is3D||n.mensuration.supports3D)))throw new I("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),Ss(this.url,e,this._getRequestOptions(t))}async measureLengthFromImage(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsMeasureFromImage)throw new I("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polyline")throw new I("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return Is(this.url,e,this._getRequestOptions(t))}async measureAreaFromImage(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsMeasureFromImage)throw new I("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polygon")throw new I("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return Fs(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return t!=null?t.get(e):void 0}getFieldDomain(e,t){const n=this.getField(e);return n?n.domain:null}async fetchImage(e,t,n,l={}){if(e==null||t==null||n==null)throw new I("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");if(this.renderer||this.symbolizer){const d=await this._generateRasterInfo(this.rasterFunction,{signal:l.signal});d&&(this.rasterInfo=d)}const u=this.getExportImageServiceParameters(e,t,n,l.timeExtent);if(u==null){if(l.requestAsImageElement&&this._canRequestImageElement(this.format)){const R=document.createElement("canvas");return R.width=t,R.height=n,l.returnImageBitmap?{imageBitmap:await At(R,`${o(this.parsedUrl)}/exportImage`,l.signal)}:{imageOrCanvasElement:R}}const{bandIds:d,rasterInfo:y}=this,g=((d==null?void 0:d.length)||y.bandCount)??0,w=t*n,f=y.pixelType,h=[];for(let R=0;R<g;R++)h.push(wt.createEmptyBand(f,w));return{pixelData:{pixelBlock:new wt({width:t,height:n,pixels:h,mask:new Uint8Array(w),pixelType:f}),extent:e}}}const m=!!l.requestAsImageElement&&!this.pixelFilter,c=m&&!!l.returnImageBitmap,p={imageServiceParameters:u,imageProps:{extent:e,width:t,height:n,format:this.format},requestAsImageElement:m,returnImageBitmap:c,signal:l.signal};return this._requestArrayBuffer(p)}fetchKeyProperties(e){return D(o(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e==null?void 0:e.rasterFunction:null})}).then(t=>t.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new I("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):D(o(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e==null?void 0:e.rasterFunction:null})}).then(t=>Ht.fromJSON(t.data))}getCatalogItemRasterInfo(e,t){const n={...t,query:this._getQueryParams()};return Os(o(this.parsedUrl),e,n)}async getCatalogItemICSInfo(e,t){var Ke,Xe,Fe,fe,le;const{data:n}=await D(o(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),l=n==null?void 0:n.ics;if(!l)return;let u=null;try{u=(await D(o(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!(u!=null&&u.spatialReference))return{ics:l,icsToPixelTransform:null,icsExtent:null,northDirection:null};const m=this.version>=10.7?D(o(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then(x=>x.data).catch(()=>({})):{},c=u.spatialReference,p={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[u]}),inSR:St(c),outSR:"0:"+e},d=D(o(this.parsedUrl)+"/project",{query:this._getQueryParams(p),...t}).then(x=>x.data).catch(()=>({})),y=5,g=(u.xmin+u.xmax)/2,w=(u.ymax-u.ymin)/(y+1),f=u.ymin+w,h=[];for(let x=0;x<y;x++)h.push({x:g,y:f+w*x});const R={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:h}),inSR:St(c),outSR:"0:"+e},N=D(o(this.parsedUrl)+"/project",{query:this._getQueryParams(R),...t}).then(x=>x.data).catch(()=>({})),b=await Promise.all([m,d,N]);let P=b[0].ipxf;if(P==null){const x=(Ke=l.geodataXform)==null?void 0:Ke.xf_0;((Xe=x==null?void 0:x.name)==null?void 0:Xe.toLowerCase())==="topup"&&((Fe=x==null?void 0:x.coefficients)==null?void 0:Fe.length)===6&&(P={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:x.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const G=Qe.fromJSON((le=(fe=b[1])==null?void 0:fe.geometries)==null?void 0:le[0]);G&&(G.spatialReference=new ne({wkid:0,imageCoordinateSystem:l}));const S=b[2].geometries?b[2].geometries.filter(x=>(x==null?void 0:x.x)!=null&&x.y!=null&&x.x!=="NaN"&&x.y!=="NaN"):[],z=S.length;if(z<3)return{ics:l,icsToPixelTransform:P,icsExtent:G,northDirection:null};let J=0,_=0,C=0,q=0;for(let x=0;x<z;x++)J+=S[x].x,_+=S[x].y,C+=S[x].x*S[x].x,q+=S[x].x*S[x].y;const Q=(z*q-J*_)/(z*C-J*J);let ge=0;const Ie=S[y-1].x>S[0].x,Ee=S[y-1].y>S[0].y;return Q===1/0?ge=Ee?90:270:Q===0?ge=Ie?0:180:Q>0?ge=Ie?180*Math.atan(Q)/Math.PI:180*Math.atan(Q)/Math.PI+180:Q<0&&(ge=Ee?180+180*Math.atan(Q)/Math.PI:360+180*Math.atan(Q)/Math.PI),{ics:l,icsToPixelTransform:P,icsExtent:G,northDirection:ge}}async generateRasterInfo(e,t){var m;e=A(j,e);const n={...t,query:this._getQueryParams()};if(!e||((m=e.functionName)==null?void 0:m.toLowerCase())==="none"||this._isVectorFieldResampleFunction(e))return this.serviceRasterInfo??Jt(o(this.parsedUrl),this.sourceJSON,n);const l=Vs(e);if(!l)throw new I("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[l])return this._functionRasterInfos[l];const u=rr(o(this.parsedUrl),e,n);this._functionRasterInfos[l]=u;try{return await u}catch(c){throw this._functionRasterInfos[l]=null,c}}getExportImageServiceParameters(e,t,n,l){var R,N;e=e.clone().shiftCentralMeridian();const u=qe(e.spatialReference,o(this.parsedUrl)),m=this.exportImageServiceParameters.toJSON(),{bandIds:c,noData:p}=m;let{renderingRule:d}=m;const y=(R=this.rasterFunction)==null?void 0:R.rasterFunctionDefinition,g=(N=this.renderer)==null?void 0:N.type,w=!g||g==="raster-stretch"||g==="raster-colormap"||g==="unique-value"||g==="class-breaks"||g==="raster-shaded-relief";if(c!=null&&c.length&&this._hasRasterFunction(this.rasterFunction)&&!y&&w){const b={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:c}};if(d.rasterFunction==="Stretch")b.rasterFunctionArguments.Raster=d.rasterFunctionArguments.Raster,d.rasterFunctionArguments.Raster=b;else if(d.rasterFunction==="Colormap"){const P=d.rasterFunctionArguments.Raster;(P==null?void 0:P.rasterFunction)==="Stretch"?(b.rasterFunctionArguments.Raster=P.rasterFunctionArguments.Raster,P.rasterFunctionArguments.Raster=b):(b.rasterFunctionArguments.Raster=P,d.rasterFunctionArguments.Raster=b)}else b.rasterFunctionArguments.Raster=d,d=b;m.bandIds=void 0}else m.bandIds=c==null?void 0:c.join(",");Array.isArray(p)&&p.length>0&&(m.noData=p.join(","));const f=this._processMultidimensionalIntersection(null,l,this.exportImageServiceParameters.mosaicRule);if(f.isOutSide)return null;m.mosaicRule=f.mosaicRule!=null?JSON.stringify(f.mosaicRule):null,l=f.timeExtent,m.renderingRule=this._getRenderingRuleString(j.fromJSON(d));const h={};if(l!=null){const{start:b,end:P}=l.toJSON();b&&P&&b===P?h.time=""+b:b==null&&P==null||(h.time=`${b??"null"},${P??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:t+","+n,...m,...h}}async getSamples(e,t){const n=await this._fetchCapabilities(t==null?void 0:t.signal);if(!(n!=null&&n.operations.supportsGetSamples))throw new I("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=V(e);const{raster:l}=this;return l&&e.raster==null&&(e.raster=l),vs(this.url,e,this._getRequestOptions(t))}async identify(e,t){var m;if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsIdentify)throw new I("imagery-layer:identify","identify operation is not supported on the input image service");e=V(e),this.version<10.91&&((m=e.geometry)==null?void 0:m.type)==="extent"&&(e.geometry=bt.fromExtent(e.geometry));const n=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(n.isOutSide)throw new I("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=n.timeExtent,e.mosaicRule=n.mosaicRule;const{raster:l,rasterFunction:u}=this;return u&&e.rasterFunction==null&&(e.rasterFunction=u),l&&e.raster==null&&(e.raster=l),Et(this.url,e,this._getRequestOptions(t))}async imageToMap(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsImageToMap)throw new I("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return Ts(o(this.parsedUrl),e,this._getRequestOptions(t))}async imageToMapMultiray(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsImageToMapMultiray)throw new I("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return Ns(o(this.parsedUrl),e,this._getRequestOptions(t))}async mapToImage(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsMapToImage)throw new I("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return Ps(o(this.parsedUrl),e,this._getRequestOptions(t))}async findImages(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsFindImages)throw new I("imagery-layer:find-images","findImages operation is not supported on the input image service");return _s(o(this.parsedUrl),e,this._getRequestOptions(t))}async getImageUrl(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsGetImageUrl)throw new I("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return Cs(o(this.parsedUrl),e,this._getRequestOptions(t))}createQuery(){return new vt({outFields:["*"],returnGeometry:!0,where:this.definitionExpression||"1=1"})}async queryBoundary(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQueryBoundary)throw new I("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=e??{outSpatialReference:this.spatialReference},Ds(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasters(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),lr(this.url,e,t)}async queryObjectIds(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),or(this.url,e,t)}async queryGPSInfo(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQueryGPSInfo)throw new I("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=e??{where:"1=1"},js(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasterCount(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),ar(this.url,e,t)}async queryVisibleRasters(e,t){var G,S,z,J;if(!e)throw new I("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:n,returnDomainValues:l,returnTopmostRaster:u,showNoDataRecords:m}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let c=!1,p=null,d=null;const y=Pe.servicePixelValue.toLowerCase(),g=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(c=e.outFields.some(_=>!_.toLowerCase().startsWith(y)),this.version>=10.4)){const _=e.outFields.filter(q=>q.toLowerCase().startsWith(y)&&q.length>y.length).map(q=>{const Q=q.slice(y.length+1);return[this._updateRenderingRulesFunctionName(Q,g),Q]});p=_.map(q=>new j({functionName:q[0]})),d=_.map(q=>q[1]);const{rasterFunction:C}=this;p.length===0?C!=null&&C.functionName?(p.push(C),d.push(C.functionName)):p=null:C!=null&&C.functionName&&!p.some(q=>q.functionName===C.functionName)&&(p.push(C),d.push(C.functionName))}const w=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:f}=this;let h=e.timeExtent||this.timeExtent;if(f){const{isOutside:_,intersection:C}=ft(f,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:(G=this.exportImageServiceParameters.mosaicRule)==null?void 0:G.multidimensionalDefinition});if(_)throw new I("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");(C==null?void 0:C.timeExtent)!=null&&(h=C.timeExtent)}const R=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,h);let N=e.geometry;this.version<10.91&&(N==null?void 0:N.type)==="extent"&&(N=bt.fromExtent(N));const b=this._getQueryParams({geometry:N,timeExtent:h,mosaicRule:R,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:p,pixelSize:n,returnCatalogItems:c,returnGeometry:w,raster:this.raster,maxItemCount:u?1:null});delete b.f;const P=new Kt(b);try{await this._generateRasterInfo(this.rasterFunction);const _=await Et(this.url,P,{signal:t==null?void 0:t.signal,query:{...this.customParameters}}),C=e.outFields,q=_.value!=null&&_.value.toLowerCase().includes("nodata"),Q=c&&!w&&((S=_==null?void 0:_.catalogItems)==null?void 0:S.features.length)&&(m||!q),ge=this.multidimensionalInfo&&this.sourceType==="raster-dataset"?gi({rasterInfo:this.rasterInfo,multidimensionalDefinition:R==null?void 0:R.multidimensionalDefinition,timeExtent:h,multidimensionalSubset:this.multidimensionalSubset}):null;if(!Q)return this._processVisibleRastersResponse(_,{returnDomainValues:l,templateRRFunctionNames:d,showNoDataRecords:m,templateFields:C,effectiveMultidimensionalDefinition:ge});const Ie=this.objectIdField||"ObjectId",Ee=((z=_.catalogItems)==null?void 0:z.features)??[],Ke=Ee.map(fe=>{var le;return(le=fe.attributes)==null?void 0:le[Ie]}),Xe=new vt({objectIds:Ke,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[Ie]}),Fe=await this.queryRasters(Xe);return(J=Fe==null?void 0:Fe.features)!=null&&J.length&&Fe.features.forEach(fe=>{Ee.forEach(le=>{le.attributes[Ie]===fe.attributes[Ie]&&fe.geometry&&(le.geometry=fe.geometry.clone(),e.outSpatialReference!=null&&(le.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse(_,{returnDomainValues:l,templateRRFunctionNames:d,showNoDataRecords:m,templateFields:C,effectiveMultidimensionalDefinition:ge})}catch{throw new I("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const n=D(o(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then(m=>{var c;return(c=m.data)==null?void 0:c.statistics}),l=D(o(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then(m=>{var c;return(c=m.data)==null?void 0:c.histograms}),u=await Promise.all([n,l]);return u[0]&&u[0].forEach(m=>{m.avg=m.mean,m.stddev=m.standardDeviation}),{statistics:u[0]||null,histograms:u[1]||null}}async createFlowMesh(e,t){const n=this._rasterJobHandler.instance;return n?n.createFlowMesh(e,t):Gi(e.meshType,e.simulationSettings,e.flowData,t.signal!=null?t.signal:new AbortController().signal)}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return fi(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,n=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):Jt(o(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then(m=>(this._set("serviceRasterInfo",m),this._set("multidimensionalInfo",m.multidimensionalInfo),sr(m,t),m)),l=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,u=this._getRasterFunctionInfos();return Promise.all([n,l,u]).then(m=>{m[1]?this._set("rasterInfo",m[1]):this._set("rasterInfo",m[0]),m[2]&&this._set("rasterFunctionInfos",m[2]),this.internalRenderer&&!this._isSupportedRenderer(this.internalRenderer)&&(this._set("internalRenderer",null),Mt.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("internalRenderer",this._configRenderer(this.renderer)),this.addHandles([pi(()=>this.rasterFunction,p=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(p).then(d=>{d&&(this.rasterInfo=d)})})]);const{serviceRasterInfo:c}=this;c.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(c)})}_combineMosaicRuleWithTimeExtent(e,t){var f;const n=this.timeInfo,{multidimensionalInfo:l}=this.serviceRasterInfo;if(e==null||l==null||t==null||(n==null?void 0:n.startField)==null)return e;const{startField:u}=n,m=l.variables.some(h=>h.dimensions.some(R=>R.name===u))?u:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=(f=e.multidimensionalDefinition)==null?void 0:f.filter(h=>h.dimensionName!==m),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const c=e.multidimensionalDefinition.filter(h=>h.dimensionName===m),p=t.start!=null?t.start.getTime():null,d=t.end!=null?t.end.getTime():null,y=p==null||d==null||p===d,g=y?[p||d]:[[p,d]],w=this.version>=10.8;if(c.length)c.forEach(h=>{h.dimensionName===m&&(w?(h.dimensionName=null,h.isSlice=!1,h.values=[]):(h.isSlice=y,h.values=g))});else if(!w){const h=e.multidimensionalDefinition.filter(R=>R.variableName!=null&&R.dimensionName==null);h.length?h.forEach(R=>{R.dimensionName=m,R.isSlice=y,R.values=g}):e.multidimensionalDefinition.push(new wi({variableName:"",dimensionName:m,isSlice:y,values:g}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(t=>!(!t.variableName&&!t.dimensionName)),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t==null?void 0:t.signal)).operations.supportsQuery)throw new I("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?A(vt,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}async _initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const e=new Pi;this._rasterJobHandler.connectionPromise=e.initialize().then(()=>{this._rasterJobHandler.instance=e},()=>{}),await this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:n}=this;return e.type==="unique-value"&&this._hasRasterFunction(n)&&(t==null?void 0:t.bandCount)===1&&["u8","s8"].includes(t.pixelType)||t!=null&&e!=null&&Fi(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){var n;let t=this.sourceJSON;if(!t){const{data:l,ssl:u}=await D(o(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=l,this.sourceJSON=t,u&&(this.url=this.url.replace(/^http:/i,"https:"))}if(((n=t.capabilities)==null?void 0:n.toLowerCase().split(",").map(l=>l.trim()).indexOf("tilesonly"))>-1)throw new I("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){var t;return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":((t=e.fields)==null?void 0:t.length)>0}_isMosaicRuleSupported(e){var l;if(!e)return!1;const t=this._isMosaicDataset(e),n=e.currentVersion>=10.71&&e.hasMultidimensions&&!(((l=e.fields)==null?void 0:l.length)>1);return t||n}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:t,functionArguments:n}=e,l=(t==null?void 0:t.toLowerCase())==="resample",u=(n==null?void 0:n.ResampleType)||(n==null?void 0:n.resampleType);return l&&(u===7||u===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){var l,u,m;const t=this._isPicture(),{rasterInfo:n}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){const c=(u=(l=this.mosaicRule)==null?void 0:l.multidimensionalDefinition)==null?void 0:u[0].variableName,p=Di({variableName:c,rasterFunctionName:(m=this.rasterFunction)==null?void 0:m.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&n.bandCount>=3){const y=(p==null?void 0:p.bandIds)??ji(n);!y||n.bandCount===3&&y[0]===0&&y[1]===1&&y[2]===2||(this.bandIds=y)}e||(e=(p==null?void 0:p.renderer)??Ti(n,{bandIds:this.bandIds,variableName:this.rasterFunction?null:c}));const d=Ni(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=d,this.symbolizer.rasterInfo=n):this.symbolizer=new Vi({rendererJSON:d,rasterInfo:n}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){(e==null?void 0:e.renderingRule)!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:n}=this;return{raster:t,viewId:n,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e==null?void 0:e.query,...this.customParameters}}}_decodePixelBlock(e,t,n){return this._rasterJobHandler.instance?this._rasterJobHandler.instance.decode({data:e,options:t}):Vt(e,t,n)}async _getRasterFunctionInfos(e){var n;const t=this.sourceJSON.rasterFunctionInfos;return this.loaded?t:t&&this.version>=10.3?t.length===1&&t[0].name.toLowerCase()==="none"?t:(n=(await D(o(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data)==null?void 0:n.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:n,returnImageBitmap:l,signal:u}=e;if(n&&this._canRequestImageElement(t.format)){const f=`${o(this.parsedUrl)}/exportImage`,{data:h}=await D(f,{responseType:l?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:u});return h instanceof Blob?{imageBitmap:await At(h,f,u),params:t}:{imageOrCanvasElement:h,params:t}}const m=this._initJobHandler(),c=D(o(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:u}),p=(await Promise.all([c,m]))[0].data,d=t.format||"jpgpng";let y=d;if(y!=="bsq"&&y!=="bip"&&(y=Ai(p)),!y)throw new I("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(p)));const g={signal:u};return{pixelData:{pixelBlock:await(d==="gif"||d==="bmp"||d.includes("png")&&(y==="png"||y==="jpg")?Vt(p,{useCanvas:!0,...t},g):this._decodePixelBlock(p,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:d},g)),extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch(()=>null)}_isValidCustomizedMosaicRule(e){var t;return e&&JSON.stringify(e.toJSON())!==JSON.stringify((t=this.defaultMosaicRule)==null?void 0:t.toJSON())}_updateMultidimensionalDefinition(e){var n;if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=vi(e,{multidimensionalSubset:this.multidimensionalSubset});if(t!=null&&t.length>0){this.mosaicRule=this.mosaicRule||new Z;const l=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&((n=this.rasterFunction.functionName)==null?void 0:n.toLowerCase())!=="none"&&t.forEach(u=>u.variableName=""),t=t.filter(({variableName:u,dimensionName:m})=>u&&u!=="*"||m),!(l!=null&&l.length)&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){var b,P,G;t=t||{};const n=e.value,{templateRRFunctionNames:l,showNoDataRecords:u,returnDomainValues:m,templateFields:c}=t,p=e.processedValues;let d=(b=e.catalogItems)==null?void 0:b.features,y=((G=(P=e.properties)==null?void 0:P.Values)==null?void 0:G.map(S=>S.replaceAll(/ /gi,", ")))||[];const g=this.objectIdField||"ObjectId",w=typeof n=="string"&&n.toLowerCase().includes("nodata"),f=[];if(n&&!d&&!w){const S={};S[g]=0,y=[n],d=[new ni({geometry:this.fullExtent,attributes:S})],this.multidimensionalInfo&&this.sourceType==="raster-dataset"&&Ki(this.rasterFields,S,t.effectiveMultidimensionalDefinition)}if(!d)return[];this._updateResponseFieldNames(d,c),w&&!u&&(d=[]);const{itemPixelValue:h,servicePixelValue:R}=Pe,N=this.rasterFields.some(S=>S.name===h);for(let S=0;S<d.length;S++){const z=d[S];if(n!=null){const J=y[S],_=this.rasterFunction&&p&&p.length>0&&l&&l.length>0&&l.includes(this.rasterFunction.functionName)?p[l.indexOf(this.rasterFunction.functionName)]:n;if(J.toLowerCase()==="nodata"&&!u)continue;N&&(z.attributes[h]=J),z.attributes[R]=_,this._updateFeatureWithMagDirValues(z,J);const C=this.fields&&this.fields.length>0;let q=this.rasterFunction&&this.serviceRasterInfo.attributeTable!=null?C?J:n:_;this.rasterFunction||(q=C?J:n),this._updateFeatureWithRasterAttributeTableValues(z,q)}if(z.sourceLayer=z.layer=this,m&&this._updateFeatureWithDomainValues(z),l&&p&&l.length===p.length)for(let J=0;J<l.length;J++){const _=`${Pe.servicePixelValue}.${l[J]}`;z.attributes[_]=p[J]}f.push(d[S])}return f}_processMultidimensionalIntersection(e,t,n){const{multidimensionalSubset:l}=this;if(!l)return{isOutSide:!1,timeExtent:t,mosaicRule:n=this._combineMosaicRuleWithTimeExtent(n,t)};if(l){const{isOutside:u,intersection:m}=ft(l,{geometry:e,timeExtent:t});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null};(m==null?void 0:m.timeExtent)!=null&&(t=m.timeExtent)}if(n=this._combineMosaicRuleWithTimeExtent(n,t),n==null?void 0:n.multidimensionalDefinition){const{isOutside:u}=ft(l,{multidimensionalDefinition:n.multidimensionalDefinition});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:n}}_updateFeatureWithRasterAttributeTableValues(e,t){const n=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(n==null)return;const{features:l,fields:u}=n,m=u.map(p=>p.name).find(p=>p.toLowerCase()==="value");if(!m)return;const c=l.filter(p=>p.attributes[m]===(t!=null?parseInt(t,10):null));c&&c[0]&&u.forEach(p=>{const d=Xi+p.name;e.attributes[d]=c[0].attributes[p.name]})}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const n=t.split(/,\s*/).map(p=>parseFloat(p)),l=n.map(p=>[p]),u=n.map(p=>({minValue:p,maxValue:p,noDataValue:null})),m=new wt({height:1,width:1,pixelType:"f32",pixels:l,statistics:u});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:m,extent:new Qe(0,0,0,0,this.spatialReference)});const c=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[m.pixels[0][0],m.pixels[1][0]]:zi([m.pixels[0][0],m.pixels[1][0]]);e.attributes[Pe.magnitude]=c[0],e.attributes[Pe.direction]=c[1]}_updateFeatureWithDomainValues(e){const t=this.fields&&this.fields.filter(n=>n.domain&&n.domain.type==="coded-value");t!=null&&t.forEach(n=>{const l=e.attributes[n.name];if(l!=null){const u=n.domain.codedValues.find(m=>m.code===l);u&&(e.attributes[n.name]=u.name)}})}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const n=this.fieldsIndex;n!=null&&e.forEach(l=>{var u;if(l!=null&&l.attributes)for(const m of t){const c=(u=n.get(m))==null?void 0:u.name;c&&c!==m&&(l.attributes[m]=l.attributes[c],delete l.attributes[c])}})}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return(e==null?void 0:e.functionName)!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const n=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(n)?t.get(n):e}_isRFTJson(e){return(e==null?void 0:e.name)&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:n,rasterFunction:l}=this;l&&e.rasterFunction==null&&(e.rasterFunction=l),n&&e.mosaicRule==null&&(e.mosaicRule=n),t&&e.raster==null&&(e.raster=t)}_applyMosaicRule(e){const{raster:t,mosaicRule:n}=this;n&&e.mosaicRule==null&&(e.mosaicRule=n),t&&e.raster==null&&(e.raster=t)}_readCapabilities(e){var N;const t=e.capabilities?e.capabilities.toLowerCase().split(",").map(b=>b.trim()):["image","catalog"],{currentVersion:n,advancedQueryCapabilities:l,maxRecordCount:u}=e,m=t.includes("image"),c=e.serviceDataType==="esriImageServiceDataTypeElevation",p=!(!e.spatialReference&&!((N=e.extent)!=null&&N.spatialReference)),d=t.includes("edit"),y=t.includes("mensuration")&&p,g=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map(b=>b.trim()),w=y&&g.includes("basic"),f=this._isMosaicDataset(e)&&t.includes("catalog"),h=t.includes("download"),R=n>=10.7&&c||n>=11.4&&(c||y&&g.includes("3d"));return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:m,supportsExportImage:m,supportsIdentify:m,supportsImageToMap:n>=11.2&&f,supportsImageToMapMultiray:n>=11.2&&f,supportsMapToImage:n>=11.2&&f,supportsFindImages:n>=11.2&&f,supportsGetImageUrl:n>=11.3&&h,supportsMeasure:y,supportsMeasureFromImage:n>=11.2,supportsDownload:h,supportsQuery:f&&e.fields&&e.fields.length>0,supportsGetSamples:n>=10.2&&m,supportsProject:n>=10.3&&m,supportsComputeStatisticsHistograms:n>=10.4&&m,supportsQueryBoundary:n>=10.6&&m,supportsCalculateVolume:R,supportsComputePixelLocation:n>=10.7&&f,supportsComputeAngles:n>=10.91,supportsQueryGPSInfo:n>=11.2&&f,supportsAdd:d,supportsDelete:d,supportsEditing:d,supportsUpdate:d,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryBins:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:u,maxRecordCountFactor:void 0,supportsStatistics:!!(l!=null&&l.supportsStatistics),supportsOrderBy:!!(l!=null&&l.supportsOrderBy),supportsDistinct:!!(l!=null&&l.supportsDistinct),supportsPagination:!!(l!=null&&l.supportsPagination),supportsStandardizedQueriesOnly:!!(l!=null&&l.useStandardizedQueries),supportsPercentileStatistics:!!(l!=null&&l.supportsPercentileStatistics),supportsCentroid:!!(l!=null&&l.supportsReturningGeometryCentroid),supportsCurrentUser:!1,supportsDistance:!!(l!=null&&l.supportsQueryWithDistance),supportsExtent:!!(l!=null&&l.supportsReturningQueryExtent),supportsGeometryProperties:!!(l!=null&&l.supportsReturningGeometryProperties),supportsHavingClause:!!(l!=null&&l.supportsHavingClause),supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:!1,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!(l!=null&&l.supportsDefaultSR),supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0,supportsTrueCurve:!1},mensuration:{supportsDistanceAndAngle:w,supportsAreaAndPerimeter:w,supportsPointOrCentroid:w,supportsHeightFromBaseAndTop:y&&g.includes("base-top height"),supportsHeightFromBaseAndTopShadow:y&&g.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:y&&g.includes("top-top shadow height"),supports3D:y&&g.includes("3d")}}}};function o(e){return(e==null?void 0:e.path)??""}return r([a({clonable:!1})],i.prototype,"_functionRasterInfos",void 0),r([a({clonable:!1})],i.prototype,"_rasterJobHandler",void 0),r([a({clonable:!1})],i.prototype,"_cachedRendererJson",void 0),r([a({readOnly:!0})],i.prototype,"_serviceSupportsMosaicRule",void 0),r([U("_serviceSupportsMosaicRule",["currentVersion","fields"])],i.prototype,"readServiceSupportsMosaicRule",null),r([a({readOnly:!0})],i.prototype,"_rasterFunctionNamesIndex",null),r([a()],i.prototype,"adjustAspectRatio",void 0),r([a({type:[Ze],json:{write:!0}})],i.prototype,"bandIds",void 0),r([U("bandIds")],i.prototype,"readBandIds",null),r([a({readOnly:!0,json:{read:!1}})],i.prototype,"capabilities",void 0),r([U("service","capabilities",["capabilities","currentVersion","serviceDataType"])],i.prototype,"readCapabilities",null),r([a({type:Number})],i.prototype,"compressionQuality",void 0),r([T("compressionQuality")],i.prototype,"writeCompressionQuality",null),r([a({type:Number})],i.prototype,"compressionTolerance",void 0),r([T("compressionTolerance")],i.prototype,"writeCompressionTolerance",null),r([a({json:{read:{source:"copyrightText"}}})],i.prototype,"copyright",void 0),r([a({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],i.prototype,"defaultMosaicRule",void 0),r([U("defaultMosaicRule",["defaultMosaicMethod"])],i.prototype,"readDefaultMosaicRule",null),r([a({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],i.prototype,"definitionExpression",void 0),r([a({readOnly:!0,constructOnly:!0})],i.prototype,"exportImageServiceParameters",void 0),r([a()],i.prototype,"rasterInfo",void 0),r([a({readOnly:!0,type:[qi]})],i.prototype,"fields",void 0),r([a({readOnly:!0})],i.prototype,"fieldsIndex",null),r([a({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff","bip","bsq"],json:{write:!0}})],i.prototype,"format",null),r([U("service","format",["serviceDataType"])],i.prototype,"readFormat",null),r([a({type:Qe})],i.prototype,"fullExtent",void 0),r([a({readOnly:!0})],i.prototype,"hasMultidimensions",void 0),r([a({json:{read:{source:"maxImageHeight"}}})],i.prototype,"imageMaxHeight",void 0),r([a({json:{read:{source:"maxImageWidth"}}})],i.prototype,"imageMaxWidth",void 0),r([a({type:String,json:{type:Se.jsonValues,read:Se.read,write:Se.write}})],i.prototype,"interpolation",void 0),r([a()],i.prototype,"minScale",void 0),r([U("service","minScale")],i.prototype,"readMinScale",null),r([a()],i.prototype,"maxScale",void 0),r([U("service","maxScale")],i.prototype,"readMaxScale",null),r([a({type:Z})],i.prototype,"mosaicRule",null),r([U("mosaicRule",["mosaicRule","defaultMosaicMethod"])],i.prototype,"readMosaicRule",null),r([T("mosaicRule")],i.prototype,"writeMosaicRule",null),r([a()],i.prototype,"multidimensionalInfo",void 0),r([a({type:bi,json:{write:!0}})],i.prototype,"multidimensionalSubset",void 0),r([a({json:{type:Ze}})],i.prototype,"noData",void 0),r([T("noData")],i.prototype,"writeNoData",null),r([a({type:String,json:{type:ke.jsonValues,read:ke.read,write:ke.write}})],i.prototype,"noDataInterpretation",void 0),r([a({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],i.prototype,"objectIdField",void 0),r([U("objectIdField")],i.prototype,"readObjectIdField",null),r([a({readOnly:!0})],i.prototype,"geometryType",void 0),r([a({})],i.prototype,"typeIdField",void 0),r([a({})],i.prototype,"types",void 0),r([a({readOnly:!0})],i.prototype,"parsedUrl",null),r([a({type:Function})],i.prototype,"pixelFilter",void 0),r([a()],i.prototype,"raster",void 0),r([a({readOnly:!0})],i.prototype,"sourceType",void 0),r([U("sourceType",["serviceSourceType","fields"])],i.prototype,"readSourceType",null),r([a()],i.prototype,"viewId",void 0),r([a()],i.prototype,"renderer",null),r([a({types:Si,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:xi,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],i.prototype,"internalRenderer",null),r([U("internalRenderer")],i.prototype,"readRenderer",null),r([T("internalRenderer")],i.prototype,"writeRenderer",null),r([a({clonable:!1})],i.prototype,"symbolizer",void 0),r([a(ci)],i.prototype,"opacity",void 0),r([a({readOnly:!0})],i.prototype,"rasterFields",null),r([a({constructOnly:!0})],i.prototype,"rasterFunctionInfos",void 0),r([a({type:j,json:{name:"renderingRule"}})],i.prototype,"rasterFunction",null),r([U("rasterFunction",["renderingRule","rasterFunctionInfos"])],i.prototype,"readRasterFunction",null),r([a({readOnly:!0})],i.prototype,"serviceDataType",void 0),r([a({readOnly:!0,type:ne})],i.prototype,"spatialReference",void 0),r([U("spatialReference",["spatialReference","extent"])],i.prototype,"readSpatialReference",null),r([a({type:Ce.apiValues,json:{read:Ce.read,type:Ce.jsonValues}})],i.prototype,"pixelType",void 0),r([T("pixelType")],i.prototype,"writePixelType",null),r([a({constructOnly:!0,type:Ut})],i.prototype,"serviceRasterInfo",void 0),r([a()],i.prototype,"sourceJSON",void 0),r([a(di)],i.prototype,"url",void 0),r([a({readOnly:!0})],i.prototype,"version",void 0),r([U("version",["currentVersion","fields","timeInfo"])],i.prototype,"readVersion",null),i=r([v("esri.layers.mixins.ArcGISImageService")],i),i};let k=class extends pr(gr(mr(dr(yr(nr(As(hr(cr(ur(ai(he.ClonableMixin(li)))))))))))){constructor(...s){super(...s),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery",this._debouncedSaveOperations=ri(async(i,o,e)=>{const{save:t,saveAs:n}=await ei(()=>import("./imageryUtils-DZpgBwaI.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]),import.meta.url);switch(i){case Ye.SAVE:return t(this,o);case Ye.SAVE_AS:return n(this,e,o)}})}normalizeCtorArgs(s,i){return typeof s=="string"?{url:s,...i}:s}load(s){const i=s!=null?s.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},s).catch(si).then(()=>this._fetchService(i))),Promise.resolve(this)}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(s){this._set("legendEnabled",s)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(s){this._set("listMode",s)}writeOperationalLayerType(s,i,o){var t;const e=((t=this.renderer)==null?void 0:t.type)==="vector-field";i[o]=e?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){var s;return!(!this.raster||!((s=this.url)!=null&&s.toLowerCase().includes("/rasterrendering/imageserver")))}createPopupTemplate(s){const{rasterFields:i}=this,o=new Set,e=Pe.itemPixelValue.toLowerCase(),t=this.sourceType==="raster-dataset",n=er.toLowerCase(),l=`${Pe.servicePixelValue.toLowerCase()}.`;for(const c of i){const p=c.name.toLowerCase();p===e||p.startsWith(l)||t&&p.startsWith(n)||o.add(c.name)}const u=wr({fields:i,title:this.title},{...s,visibleFieldNames:o}),{rasterInfo:m}=this;return u!=null&&u.fieldInfos&&m&&Yi(u.fieldInfos,m),u}queryFeatures(s,i){return this.queryRasters(s,i).then(o=>{if(o!=null&&o.features)for(const e of o.features)e.layer=e.sourceLayer=this;return o})}queryFeatureCount(s,i){return this.queryRasterCount(s,i)}redraw(){this.emit("redraw")}async save(s){return this._debouncedSaveOperations(Ye.SAVE,s)}async saveAs(s,i){return this._debouncedSaveOperations(Ye.SAVE_AS,i,s)}serviceSupportsSpatialReference(s){return fr(this,s)}write(s,i){if(!this._isPreviewLayer)return super.write(s,i);if(i!=null&&i.messages){const o=`${i.origin}/${i.layerContainerType||"operational-layers"}`;i.messages.push(new I("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${o}'`,{layer:this}))}return null}};r([a(yi)],k.prototype,"legendEnabled",null),r([a({type:["show","hide"]})],k.prototype,"listMode",null),r([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],k.prototype,"isReference",void 0),r([a({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],k.prototype,"operationalLayerType",void 0),r([T("web-map","operationalLayerType")],k.prototype,"writeOperationalLayerType",null),r([a(hi)],k.prototype,"popupEnabled",void 0),r([a({type:oi,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],k.prototype,"popupTemplate",void 0),r([a({readOnly:!0})],k.prototype,"defaultPopupTemplate",null),r([a({readOnly:!0,json:{read:!1}})],k.prototype,"type",void 0),r([a({readOnly:!0})],k.prototype,"_isPreviewLayer",null),k=r([v("esri.layers.ImageryLayer")],k);const Fa=k;export{Fa as default};
