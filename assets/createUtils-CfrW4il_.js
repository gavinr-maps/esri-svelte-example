import{c as S,ad as k,G as U}from"./Accessor-BHnuXKD2.js";import{N as v,Q as A,j as B}from"./Point-XGrwlf63.js";import{I as C}from"./vec32-Dvg_eL9J.js";import{n as E}from"./vec3f64-BLpZdpfb.js";import{b as D}from"./Circle-aC-JFV1q.js";import{simplify as F,distance as H}from"./geometryEngine-CtEcpiHE.js";import{u as J,P as K,M as G,j as O,g as V,z as W}from"./Polyline-BmuD2-ZN.js";import{g as r}from"./surfaceCoordinateSystems-DRgCZXAE.js";function d(s,t){const o=new B({x:s[0],y:s[1],spatialReference:t});return s.length>2&&(o.z=s[2]),o}function lt(s,t){return new J({points:s,spatialReference:t})}function ot(s,t,o){const e=new K({paths:s,spatialReference:t});return o&&G(e),e}function P(s,t,o,e=!0){const l=S(s);l.forEach(a=>{const c=a[0],i=a[a.length-1];k(c,i)&&a.length!==1||a.push(a[0])});let n=new O({rings:l,spatialReference:t});return n.rings.forEach(a=>{V(a)||a.reverse()}),o&&G(n),e&&n.isSelfIntersecting&&v(t)&&(n=F(n)),n}function rt(s,t,o){const e=t.mapToLocalMultiple(s),l=[],n={x:e[0].x,y:e[0].y},a={x:e[1].x,y:e[1].y},c=Math.round(a.x-n.x),i=Math.round(a.y-n.y),p=Math.max(Math.abs(c),Math.abs(i));if(o){const u={x:n.x+p,y:n.y+p},f={x:n.x-p,y:n.y-p};l.push(r(u.x,f.y),r(f.x,f.y),r(f.x,u.y),r(u.x,u.y))}else{const u={x:c>0?n.x+p:n.x-p,y:i>0?n.y+p:n.y-p};l.push(r(n.x,n.y),r(u.x,n.y),r(u.x,u.y),r(n.x,u.y))}return q(P([l.map(u=>t.localToMap(u)).filter(U)],t.spatialReference,t.doUnnormalization,!0),l,t)}function st(s,t,o){let e=t.mapToLocalMultiple(s);if(e.length===1){const i=e[0];e=[r(i.x-48,i.y+48),r(i.x+48,i.y-48),r(i.x+48,i.y-48),r(i.x-48,i.y+48)]}const l=[],n={x:e[0].x,y:e[0].y},a={x:e[1].x,y:e[1].y};if(o){const c=Math.round(a.x-n.x),i=Math.round(a.y-n.y);l.push(r(n.x-c,n.y-i),r(a.x,n.y-i),r(a.x,a.y),r(n.x-c,a.y))}else l.push(r(n.x,n.y),r(a.x,n.y),r(a.x,a.y),r(n.x,a.y));return q(P([l.map(c=>t.localToMap(c)).filter(U)],t.spatialReference,t.doUnnormalization,!0),l,t)}function q(s,t,o){const e=z(t[3],t[2],o),l=z(t[1],t[2],o),n=z(t[0],t[1],o),a=z(t[0],t[3],o);return{geometry:s,midpoints:e!=null&&l!=null&&n!=null&&a!=null?{top:e,right:l,bottom:n,left:a}:null}}function z(s,t,o){T[0]=s.x,T[1]=s.y,T[2]=0,b[0]=t.x,b[1]=t.y,b[2]=0,C(T,T,b,.5),I.x=T[0],I.y=b[1],I.z=b[2];const e=o.localToMap(I);return e!=null?d(e,o.spatialReference):null}const I=r(0,0,0),T=E(),b=E();function it(s,t,o,e){const l=t.mapToLocalMultiple(s);let n=null,a=null;if(o)n=l[0],a=l[1];else{const y=l[0],x=l[1],R=Math.round(x.x-y.x),g=Math.round(x.y-y.y),h=Math.max(Math.abs(R),Math.abs(g));n=r(R>0?y.x+h/2:y.x-h/2,g>0?y.y+h/2:y.y-h/2),a=r(Math.abs(R)>Math.abs(g)?n.x-h/2:n.x,Math.abs(R)>Math.abs(g)?n.y:n.y-h/2)}const c=t.localToMap(n),i=t.localToMap(a);if(c==null||i==null)return null;t.doUnnormalization&&W([[c,i]],t.spatialReference);const p=d(c,t.spatialReference),u=d(i,t.spatialReference),f=A(t.spatialReference);let m=0;if(v(t.spatialReference))m=f*H(p,u,null);else{const y=n.x-a.x,x=n.y-a.y;m=f*Math.sqrt(y*y+x*x)*(e||1)}const $=new D({center:p,radius:m,radiusUnit:"meters",spatialReference:t.spatialReference});return{geometry:P($.rings,$.spatialReference,!1),center:p,edge:u}}function ct(s,t,o){const e=t.mapToLocalMultiple(s),l=e[0],n=e[1],a=Math.round(n.x-l.x),c=Math.round(n.y-l.y),i=r(o?l.x:l.x+a/2,o?l.y:l.y+c/2),p=o?a:a/2,u=o?c:c/2,f=60,m=[],$=2*Math.PI/f;function y(M){const N=Math.cos(M),Q=Math.sin(M);return r(p*N+i.x,u*Q+i.y)}for(let M=0;M<f;M++)m.push(y(M*$));m.push(m[0]);const{spatialReference:x,doUnnormalization:R}=t,g=P([m.map(M=>t.localToMap(M)).filter(U)],x,R,!1),h=t.localToMap(y(Math.PI/2)),w=t.localToMap(y(0)),j=t.localToMap(y(-Math.PI/2)),L=t.localToMap(y(Math.PI));return{geometry:g,midpoints:h!=null&&w!=null&&j!=null&&L!=null?{top:d(h,x),right:d(w,x),bottom:d(j,x),left:d(L,x)}:null}}export{it as L,ot as R,rt as T,st as b,lt as d,P as j,ct as v};
