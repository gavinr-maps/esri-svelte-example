import{u as o}from"./workerHelper-Bbyb81sR.js";import{EdgeInputBufferLayout as u}from"./bufferLayouts-DmKtt9ER.js";import{f as l,u as c,p,m as d,d as f}from"./edgeProcessing-Dmwf8z6c.js";import"./InterleavedLayout-_dYEAUNK.js";import"./BufferView-0osDbyWD.js";import"./vec2-ChnYg_BJ.js";import"./common-DQOJ18NT.js";import"./vec32-Dvg_eL9J.js";import"./vec3f64-BLpZdpfb.js";import"./vec42-YcqnINSP.js";import"./types-D0PSWh4d.js";import"./vec2f64-Dy6m9Nrb.js";import"./vec4f64-o2zAXfmz.js";import"./glUtil-CAJRmga-.js";import"./enums-D9v74xTE.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./VertexAttribute-Cq4MnHjR.js";import"./deduplicate-Cp1WDW0w.js";import"./mathUtils-Cfq9PL9W.js";import"./Indices-D8XWalpO.js";import"./Accessor-BmwT4B0c.js";import"./Normals-D6WqMXVD.js";class J{async extract(t){const e=a(t),r=l(e),s=[e.data.buffer];return{result:m(r,s),transferList:s}}async extractComponentsEdgeLocations(t){const e=a(t),r=c(e.data,e.skipDeduplicate,e.indices,e.indicesLength),s=p(r,y),n=[];return{result:o(s.regular.instancesData,n),transferList:n}}async extractEdgeLocations(t){const e=a(t),r=c(e.data,e.skipDeduplicate,e.indices,e.indicesLength),s=p(r,L),n=[];return{result:o(s.regular.instancesData,n),transferList:n}}}function a(i){return{data:u.createView(i.dataBuffer),indices:i.indicesType==="Uint32Array"?new Uint32Array(i.indices):i.indicesType==="Uint16Array"?new Uint16Array(i.indices):i.indices,indicesLength:i.indicesLength,writerSettings:i.writerSettings,skipDeduplicate:i.skipDeduplicate}}function m(i,t){return t.push(i.regular.lodInfo.lengths.buffer),t.push(i.silhouette.lodInfo.lengths.buffer),{regular:{instancesData:o(i.regular.instancesData,t),lodInfo:{lengths:i.regular.lodInfo.lengths.buffer}},silhouette:{instancesData:o(i.silhouette.instancesData,t),lodInfo:{lengths:i.silhouette.lodInfo.lengths.buffer}},averageEdgeLength:i.averageEdgeLength}}class g{allocate(t){return f.createBuffer(t)}trim(t,e){return t.slice(0,e)}write(t,e,r){t.position0.setVec(e,r.position0),t.position1.setVec(e,r.position1)}}class h{allocate(t){return d.createBuffer(t)}trim(t,e){return t.slice(0,e)}write(t,e,r){t.position0.setVec(e,r.position0),t.position1.setVec(e,r.position1),t.componentIndex.set(e,r.componentIndex)}}const L=new g,y=new h;export{J as default};
