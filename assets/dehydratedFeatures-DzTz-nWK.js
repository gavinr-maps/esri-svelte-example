import{C as d,D as x}from"./subclass-BR3PhgZG.js";import{c as Z}from"./Accessor-D6mNnsWy.js";import{f as k}from"./Point-TlcsOcXV.js";import{P as N,x as c}from"./aaBoundingBox-BGxkJAW0.js";import{D as I,h}from"./Polyline-BQFeqYXi.js";import{H as M,D as F,B as j,C as A}from"./quantizationUtils-DFd0XKEL.js";import{o as v}from"./geometry-CnaxvJsv.js";import{y as z}from"./Field-poIiHWUc.js";import"./mathUtils-ClvKsMak.js";class E{constructor(e,s,n){this.uid=e,this.geometry=s,this.attributes=n,this.visible=!0,this.objectId=null,this.centroid=null}}function G(t){return t.geometry!=null}class K{constructor(){this.exceededTransferLimit=!1,this.features=[],this.fields=[],this.hasM=!1,this.hasZ=!1,this.geometryType=null,this.objectIdFieldName=null,this.globalIdFieldName=null,this.geometryProperties=null,this.geohashFieldName=null,this.spatialReference=null,this.transform=null}}function Q(t,e){var p;const s=v.fromJSON(t.geometryType),n=k.fromJSON(t.spatialReference),r=t.transform,a=t.objectIdFieldName,f=e==null?void 0:e.maxStringAttributeLength,g=e==null?void 0:e.maxStringAttributeFields;let l;const y=t.features.map(u=>{const o=w(u,s,n,t.objectIdFieldName),i=o.geometry;if(D(o.attributes,g,f,b=>{l??(l=[]);const m=S(o,a);m!=null&&l.push({objectId:m,attribute:b})}),i!=null&&r)switch(i.type){case"point":o.geometry=A(r,i,i);break;case"multipoint":o.geometry=j(r,i,i);break;case"polygon":o.geometry=F(r,i,i);break;case"polyline":o.geometry=M(r,i,i);break;case"extent":case"mesh":o.geometry=i}return o});return{geometryType:s,features:y,spatialReference:n,fields:((p=t.fields)==null?void 0:p.map(u=>z.fromJSON(u)))??[],objectIdFieldName:t.objectIdFieldName,globalIdFieldName:t.globalIdFieldName,geohashFieldName:t.geohashFieldName,geometryProperties:t.geometryProperties,hasZ:t.hasZ,hasM:t.hasM,exceededTransferLimit:t.exceededTransferLimit,transform:null,missingAttributes:l}}function w(t,e,s,n){return{uid:Z(),objectId:n&&t.attributes?t.attributes[n]:null,attributes:t.attributes,geometry:R(t.geometry,e,s),visible:!0}}function R(t,e,s){if(t==null)return null;switch(e){case"point":{const n=t;return{x:n.x,y:n.y,z:n.z,m:n.m,hasZ:n.z!=null,hasM:n.m!=null,type:"point",spatialReference:s}}case"polyline":{const n=t;return{paths:n.paths,hasZ:!!n.hasZ,hasM:!!n.hasM,type:"polyline",spatialReference:s}}case"polygon":{const n=t;return{rings:n.rings,hasZ:!!n.hasZ,hasM:!!n.hasM,type:"polygon",spatialReference:s}}case"multipoint":{const n=t;return{points:n.points,hasZ:!!n.hasZ,hasM:!!n.hasM,type:"multipoint",spatialReference:s}}}}function T(t){if(t==null)return 0;let e=32;switch(t.type){case"point":e+=42;break;case"polyline":case"polygon":{let s=0;const n=2+(t.hasZ?1:0)+(t.hasM?1:0),r=t.type==="polyline"?t.paths:t.rings;for(const a of r)s+=a.length;e+=8*s*n+64,e+=128*s,e+=34,e+=32*(r.length+1);break}case"multipoint":{const s=2+(t.hasZ?1:0)+(t.hasM?1:0),n=t.points.length;e+=8*n*s+64,e+=128*n,e+=34,e+=32;break}case"extent":e+=98,t.hasM&&(e+=32),t.hasZ&&(e+=32);break;case"mesh":e+=x(t.vertexAttributes.position,t.vertexAttributes.normal,t.vertexAttributes.uv,t.vertexAttributes.tangent)}return e}function U(t){let e=32;return e+=d(t.attributes),e+=3,e+=8+T(t.geometry),e}function V(t){if(t==null)return 0;switch(t.type){case"point":return 1;case"polyline":{let e=0;for(const s of t.paths)e+=s.length;return e}case"polygon":{let e=0;for(const s of t.rings)e+=s.length;return e}case"multipoint":return t.points.length;case"extent":return 2;case"mesh":{const e=t.vertexAttributes&&t.vertexAttributes.position;return e?e.length/3:0}default:return}}function W(t){if(t==null)return!1;switch(t.type){case"extent":case"point":return!0;case"polyline":for(const e of t.paths)if(e.length>0)return!0;return!1;case"polygon":for(const e of t.rings)if(e.length>0)return!0;return!1;case"multipoint":return t.points.length>0;case"mesh":return!t.loaded||t.vertexAttributes.position.length>0}}function X(t,e){switch(N(e),t.type==="mesh"&&(t=t.extent),t.type){case"point":e[0]=e[3]=t.x,e[1]=e[4]=t.y,t.hasZ&&(e[2]=e[5]=t.z);break;case"polyline":for(let s=0;s<t.paths.length;s++)c(e,t.paths[s],!!t.hasZ);break;case"polygon":for(let s=0;s<t.rings.length;s++)c(e,t.rings[s],!!t.hasZ);break;case"multipoint":c(e,t.points,!!t.hasZ);break;case"extent":e[0]=t.xmin,e[1]=t.ymin,e[3]=t.xmax,e[4]=t.ymax,t.zmin!=null&&(e[2]=t.zmin),t.zmax!=null&&(e[5]=t.zmax)}}function Y(t,e){switch(I(e),t.type==="mesh"&&(t=t.extent),t.type){case"point":e[0]=e[2]=t.x,e[1]=e[3]=t.y;break;case"polyline":for(let s=0;s<t.paths.length;s++)h(e,t.paths[s]);break;case"polygon":for(let s=0;s<t.rings.length;s++)h(e,t.rings[s]);break;case"multipoint":h(e,t.points);break;case"extent":e[0]=t.xmin,e[1]=t.ymin,e[2]=t.xmax,e[3]=t.ymax}}function S(t,e){return t.objectId!=null?t.objectId:t.attributes&&e?t.attributes[e]:null}function D(t,e,s,n){if(e!=null&&e.size&&s!=null&&t)for(const r in t){if(!e.has(r))continue;const a=t[r];typeof a=="string"&&a.length>s&&(n(r),t[r]="")}}export{X as F,Y as I,S as M,W as N,U as Z,Q as b,E as f,K as g,V as k,G as y,D as z};
