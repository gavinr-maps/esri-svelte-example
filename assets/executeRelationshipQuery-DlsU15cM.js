import{f as d}from"./utils-YowqfOgk.js";import{P as f}from"./cast-CsZslgGN.js";import{a2 as y}from"./Point-Cz2JYYmX.js";import{t as j}from"./query-Bjn_Ozo1.js";import{d as R}from"./FeatureSet-B5-Veyin.js";import u from"./RelationshipQuery-B5a-mYy7.js";import"./Accessor-BmwT4B0c.js";import"./index-4eY77cms.js";import"./JSONSupport-DcrLLGjL.js";import"./writer-DKgfqj4X.js";import"./jsonUtils-CwFG8yN4.js";import"./Extent-g5W9hy0j.js";import"./Polyline-s-JzsQqo.js";import"./mathUtils-Cfq9PL9W.js";import"./normalizeUtils-BTGdXlpz.js";import"./normalizeUtilsCommon-lGDszWRI.js";import"./utils-B-dlKIhi.js";import"./pbfQueryUtils-mqiWagfZ.js";import"./pbf-BsmI3A9L.js";import"./memoryEstimations-Bcyf-mHz.js";import"./OptimizedGeometry-BJqUA4Pi.js";import"./OptimizedFeature-P2towpqD.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-BdW_vUm_.js";import"./projection-CyCZAIaD.js";import"./SimpleObservable-CvOkykwM.js";import"./vec3f64-BLpZdpfb.js";import"./projectBuffer-CQnuEMuP.js";import"./geodesicConstants-RQL9oKdk.js";import"./Graphic-Dt0LgVGU.js";import"./Clonable-Z-AWS-16.js";import"./reactiveUtils-XM7cS2OP.js";import"./Evented-Dw4_VOGn.js";import"./opacityUtils-Dim20wpZ.js";import"./Promise-DfET-uns.js";import"./enumeration-DpvDkLNI.js";import"./Color-VJEMvW-n.js";import"./colorUtils-Rxh2V3ai.js";import"./ActionToggle-D7439N1A.js";import"./Identifiable-BHVfzH03.js";import"./typeUtils-B6WBEKDM.js";import"./TextSymbol-BLIQ6RKX.js";import"./screenUtils-_ZIvrt5o.js";import"./collectionUtils-CTT-51g7.js";import"./Portal-CmmHxpLg.js";import"./aaBoundingBox-Dw3yBk2f.js";import"./Field-BDG0QV_T.js";import"./fieldType-CBeoJWlv.js";import"./Query-B_2mhyL4.js";import"./FullTextSearch-CBnxSwz4.js";import"./TimeExtent-BO6BsF_x.js";import"./timeUtils-C1c_L2Fd.js";function F(e,o){const t=e.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!(o!=null&&o.returnCountOnly)?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function b(e,o,t){const i=await l(e,o,t),r=i.data,p=r.geometryType,m=r.spatialReference,n={};for(const a of r.relatedRecordGroups){const s={fields:void 0,objectIdFieldName:void 0,geometryType:p,spatialReference:m,hasZ:!!r.hasZ,hasM:!!r.hasM,features:a.relatedRecords};if(a.objectId!=null)n[a.objectId]=s;else for(const c of Object.keys(a))c!=="relatedRecords"&&(n[a[c]]=s)}return{...i,data:n}}async function h(e,o,t){const i=await l(e,o,t,{returnCountOnly:!0}),r=i.data,p={};for(const m of r.relatedRecordGroups)m.objectId!=null&&(p[m.objectId]=m.count);return{...i,data:p}}async function l(e,o,t={},i){const r=j({...e.query,f:"json",...i,...F(o,i)});return f(e.path+"/queryRelatedRecords",{...t,query:{...t.query,...r}})}async function bt(e,o,t){o=u.from(o);const i=d(e);return b(i,o,t).then(r=>{const p=r.data,m={};return Object.keys(p).forEach(n=>m[n]=R.fromJSON(p[n])),m})}async function ht(e,o,t){o=u.from(o);const i=d(e);return h(i,o,{...t}).then(r=>r.data)}export{bt as executeRelationshipQuery,ht as executeRelationshipQueryForCount};
