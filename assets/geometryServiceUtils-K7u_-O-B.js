import{c as a,s as p}from"./subclass-BR3PhgZG.js";import{C as l}from"./Portal-liet8xHC.js";import{p as s,n as c}from"./project-C_6NxEch.js";import"./index-CeCSsEgo.js";import"./Evented-CXIxDjmW.js";import"./Accessor-D6mNnsWy.js";import"./assets-C2mb-ea2.js";import"./Promise-CZrWwByK.js";import"./jsonMap-DCC6W5ex.js";import"./writer-3zufXUNV.js";import"./Extent-DHjqVB-p.js";import"./Point-DB4Hp4hH.js";import"./jsonUtils-Cma_7A64.js";import"./Polyline-D97hl-6E.js";import"./mathUtils-ClvKsMak.js";import"./utils-D61i9O7E.js";import"./utils-Dx8bgRIB.js";async function f(r=null,m){var i,o;if(p.geometryServiceUrl)return p.geometryServiceUrl;if(!r)throw new a("internal:geometry-service-url-not-configured");let e;e="portal"in r?r.portal||l.getDefault():r,await e.load({signal:m});const t=(o=(i=e.helperServices)==null?void 0:i.geometry)==null?void 0:o.url;if(!t)throw new a("internal:geometry-service-url-not-configured");return t}async function L(r,m,e=null,t){const i=await f(e,t),o=new s({geometries:[r],outSpatialReference:m}),n=await c(i,o,{signal:t});if(n&&Array.isArray(n)&&n.length===1)return n[0];throw new a("internal:geometry-service-projection-failed")}export{f as getGeometryServiceURL,L as projectGeometry};
