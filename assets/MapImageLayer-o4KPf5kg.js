import{aF as $,dk as b,bw as f,ds as w,G as g,aO as I,dt as T,du as O,D as v,b as E,c as s,f as p,dv as x,b0 as M,aZ as F,g as R,aY as L,bO as P}from"./index-XUlETPJZ.js";import{m as j}from"./MultiOriginJSONSupport-7Qbe2KAC.js";import{i as J}from"./scaleUtils-A_wgkqWZ.js";import{i as N}from"./APIKeyMixin-yDqtxogw.js";import{E as U,f as q,X as A}from"./SublayersOwner-bmCXIrfa.js";import{l as _}from"./ArcGISService-js_eTuu8.js";import{a as k}from"./BlendLayer-zma1Sosw.js";import{o as V}from"./CustomParametersMixin-IV-ZCkcb.js";import{u as Z}from"./OperationalLayer-JqRxI3_b.js";import{j as z}from"./PortalLayer-TJUoDBMJ.js";import{f as D}from"./RefreshableLayer-jUlr6EOh.js";import{t as G}from"./ScaleRangeLayer-yPctuALK.js";import{a as B}from"./TemporalLayer-8uI_9CjI.js";import{d as C}from"./commonProperties-vCf9FiI6.js";import{m as H}from"./ExportImageParameters-awJGzzKM.js";import{t as K}from"./imageBitmapUtils-SEevvNoR.js";import{e as S}from"./sublayerUtils-HEWMZz4h.js";import{e as W}from"./versionUtils-lvgsyMS9.js";import"./Version-Wg9g_vDJ.js";import"./portalItemUtils-iR0JCk79.js";import"./UniqueValueRenderer-rNHfFDwn.js";import"./LegendOptions-KuTIRvg3.js";import"./diffUtils-FaRWg0DV.js";import"./SizeVariable-eDAmtsU9.js";import"./colorRamps-ucREs6wJ.js";import"./lengthUtils-uQbLh4h5.js";import"./ColorStop-FEjpkiot.js";import"./jsonUtils-FMkyl16O.js";import"./styleUtils-dULYu5Y-.js";import"./jsonUtils-RoKG_qA6.js";import"./DictionaryLoader-uS0Mi-We.js";import"./LRUCache-P08N0BvZ.js";import"./FieldsIndex-zLaqSf7A.js";import"./UnknownTimeZone-6z8cnIoM.js";import"./heatmapUtils-mFECwRl0.js";import"./vec4f64-_4WP0ZGf.js";import"./QueryTask-bD0XW1FN.js";import"./Query-XYhmJAcm.js";import"./Field-BZWZB6E0.js";import"./fieldType-h3FAXGdT.js";import"./executeForIds-Ej-0Dfrj.js";import"./query-zZyiJ9CO.js";import"./pbfQueryUtils-9R9dOnXI.js";import"./pbf-XJzY62Pa.js";import"./OptimizedGeometry-1RFAES06.js";import"./OptimizedFeatureSet-smVI1ez9.js";import"./queryZScale-JMBNq6Za.js";import"./executeQueryJSON-zeoSQNEA.js";import"./FeatureSet-41fq-equ.js";import"./executeQueryPBF-a1QzgvoO.js";import"./featureConversionUtils-AHVFLuq1.js";import"./FeatureType-7uQm1xKd.js";import"./FeatureTemplate-KrlpBNrV.js";import"./LabelClass-lFhwM9-Q.js";import"./labelUtils-bgvBkKE5.js";import"./defaultsJSON-HVtDPFXZ.js";import"./labelingInfo-yCRiW8FB.js";import"./LayerFloorInfo-DUJA49Sf.js";import"./serviceCapabilitiesUtils-sM67UNKK.js";import"./AttachmentQuery-5LMwiYDr.js";import"./popupUtils-jwtllF6O.js";import"./jsonUtils-SBL1xwKC.js";import"./parser-5WRmuohq.js";import"./ElevationInfo-W4L0wkkh.js";import"./floorFilterUtils-zOdaZIyV.js";let o=class extends k(B(G(U(q(_(Z(z(j(D(N(V(P)))))))))))){constructor(...e){super(...e),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch($).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const n=i.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,n,t){var h;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:r})=>r&&r.toArray().reverse()).toArray();let m=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&((h=this.capabilities.exportMap)!=null&&h.supportsDynamicLayers)){const r=b(t.origin);if(r===f.PORTAL_ITEM){const d=this.createSublayersForOrigin("service").sublayers;m=S(a,d,f.SERVICE)}else if(r>f.PORTAL_ITEM){const d=this.createSublayersForOrigin("portal-item");m=S(a,d.sublayers,b(d.origin))}}const l=[],u={writeSublayerStructure:m,...t};let c=m;a.forEach(r=>{const d=r.write({},u);l.push(d),c=c||r.originOf("visible")==="user"}),l.some(r=>Object.keys(r).length>1)&&(i.layers=l),c&&(i.visibleLayers=a.filter(r=>r.visible).map(r=>r.id))}createExportImageParameters(e,i,n,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const m=new H({layer:this,floors:t==null?void 0:t.floors,scale:J({extent:e,width:i})*a}),l=m.toJSON();m.destroy();const u=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=e==null?void 0:e.spatialReference,h=w(c);l.dpi*=a;const r={};if(t!=null&&t.timeExtent){const{start:d,end:y}=t.timeExtent.toJSON();r.time=d&&y&&d===y?""+d:`${d??"null"},${y??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(r.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:h,imageSR:h,size:i+","+n,...l,...u,...r}}async fetchImage(e,i,n,t){const{data:a}=await this._fetchImage("image",e,i,n,t);return a}async fetchImageBitmap(e,i,n,t){const{data:a,url:m}=await this._fetchImage("blob",e,i,n,t);return K(a,m,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await g(this.url,i),{extent:t,fullExtent:a,timeExtent:m}=n,l=t||a;return{fullExtent:l&&I.fromJSON(l),timeExtent:m&&T.fromJSON({start:m[0],end:m[1]})}}loadAll(){return O(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return W(this,e)}async _fetchImage(e,i,n,t,a){var u,c,h;const m={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(i,n,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},l=this.parsedUrl.path+"/export";if(((u=m.query)==null?void 0:u.dynamicLayers)!=null&&!((h=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&h.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:r}=await g(l,m);return{data:r,url:l}}catch(r){throw E(r)?r:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${l}`,{error:r})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:n}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([p(x("dateFieldsTimeReference"))],o.prototype,"dateFieldsTimeZone",void 0),s([p({type:Boolean})],o.prototype,"datesInUnknownTimezone",void 0),s([p()],o.prototype,"dpi",void 0),s([p()],o.prototype,"gdbVersion",void 0),s([p()],o.prototype,"imageFormat",void 0),s([M("imageFormat",["supportedImageFormatTypes"])],o.prototype,"readImageFormat",null),s([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],o.prototype,"imageMaxHeight",void 0),s([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],o.prototype,"imageMaxWidth",void 0),s([p()],o.prototype,"imageTransparency",void 0),s([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],o.prototype,"isReference",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"labelsVisible",void 0),s([p({type:["ArcGISMapServiceLayer"]})],o.prototype,"operationalLayerType",void 0),s([p({json:{read:!1,write:!1}})],o.prototype,"popupEnabled",void 0),s([p(x("preferredTimeReference"))],o.prototype,"preferredTimeZone",void 0),s([p()],o.prototype,"sourceJSON",void 0),s([p({json:{write:{ignoreOrigin:!0}}})],o.prototype,"sublayers",void 0),s([F("sublayers",{layers:{type:[A]},visibleLayers:{type:[L]}})],o.prototype,"writeSublayers",null),s([p({type:["show","hide","hide-children"]})],o.prototype,"listMode",void 0),s([p({json:{read:!1},readOnly:!0,value:"map-image"})],o.prototype,"type",void 0),s([p(C)],o.prototype,"url",void 0),o=s([R("esri.layers.MapImageLayer")],o);const mt=o;export{mt as default};
