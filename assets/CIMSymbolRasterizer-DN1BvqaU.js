import{i as F}from"./CIMResourceManager-d5CfLxhB.js";import{t as G,h as O,u as T}from"./CIMSymbolHelper-BDfNg_6w.js";import{OverrideHelper as q}from"./OverrideHelper-BItCoKFp.js";import{T as S,R as D}from"./rasterizingUtils-C1EbvluX.js";import{V as z}from"./utils-UPZJIDfz.js";import"./fontUtils-CGi-tOxo.js";import"./Accessor-BmwT4B0c.js";import"./imageUtils-DsXKmbqJ.js";import"./index-4eY77cms.js";import"./cast-CsZslgGN.js";import"./JSONSupport-DcrLLGjL.js";import"./BidiEngine-QXap_35O.js";import"./screenUtils-_ZIvrt5o.js";import"./Polyline-s-JzsQqo.js";import"./writer-DKgfqj4X.js";import"./Extent-g5W9hy0j.js";import"./Point-Cz2JYYmX.js";import"./mathUtils-Cfq9PL9W.js";import"./TextSymbol-BLIQ6RKX.js";import"./Color-VJEMvW-n.js";import"./colorUtils-Rxh2V3ai.js";import"./enumeration-DpvDkLNI.js";import"./jsonUtils-CwFG8yN4.js";import"./OptimizedGeometry-BJqUA4Pi.js";import"./memoryEstimations-Bcyf-mHz.js";import"./GeometryUtils-F7QfOKlc.js";import"./enums-BTM-fOHQ.js";import"./defaultCIMValues-Bb-CUowV.js";import"./definitions-CP59Y04S.js";import"./mat2d-D9DBP-jx.js";import"./common-DQOJ18NT.js";import"./mat2df32-orApM5a3.js";import"./vec2-ChnYg_BJ.js";import"./vec2f32-BbH2jxlN.js";import"./Rect-CUzevAry.js";import"./BoundingBox-CnpCxTZE.js";import"./defaults-FkBa0ybj.js";import"./defaultsJSON-GKolV7NZ.js";import"./colorUtils-DaPfwnk3.js";import"./vec42-YcqnINSP.js";import"./vec4f64-o2zAXfmz.js";import"./opacityUtils-Dim20wpZ.js";import"./Promise-DfET-uns.js";import"./callExpressionWithFeature-Dty09cLj.js";import"./quantizationUtils-DgFbqZi7.js";import"./floatRGBA-Cb__GiDF.js";const A=96/72;class kt{constructor(a){this._spatialReference=a,this._imageDataCanvas=null,this._cimResourceManager=new F}get _canvas(){return this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas")),this._imageDataCanvas}get resourceManager(){return this._cimResourceManager}async rasterizeCIMSymbolAsync(a,n,m,M,I,h,l,p,g,f){if(!a)return null;const{data:y}=a;if(!y||y.type!=="CIMSymbolReference"||!y.symbol)return null;const{symbol:v}=y;h||(h=z(v));const s=await q.resolveSymbolOverrides(y,n,this._spatialReference,I,h,l,p),d=this._cimResourceManager,x=[];G.fetchResources(s,d,x),G.fetchFonts(s,d,x),x.length>0&&await Promise.all(x);const{width:e,height:r}=m;let b=k(h,e,r,M,f);const t=G.getEnvelope(s,b,d);if(!t)return null;t.x===1/0&&(t.x=e+2),t.y===1/0&&(t.y=-r/2),t.width===-1/0&&(t.width=e),t.height===-1/0&&(t.height=r);let c=1,_=0,C=0;switch(v.type){case"CIMPointSymbol":case"CIMTextSymbol":{let i=1;t.width>e&&(i=e/t.width);let o=1;t.height>r&&(o=r/t.height),M==="preview"&&(t.width<e&&(i=e/t.width),t.height<r&&(o=r/t.height)),c=Math.min(i,o),_=t.x+t.width/2,C=t.y+t.height/2}break;case"CIMLineSymbol":if(f){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,o=t.height-r;b={paths:S(b.paths,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+o,ymax:t.height/2-o,width:t.width-2*i,height:t.height-2*o})}}else{(g||t.height>r)&&(c=r/t.height),C=t.y+t.height/2;const i=t.x*c+e/2,o=(t.x+t.width)*c+e/2,{paths:R}=b;R[0][0][0]-=i/c,R[0][2][0]-=(o-e)/c}break;case"CIMPolygonSymbol":if(f){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,o=t.height-r;b={paths:S(b.rings,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+o,ymax:t.height/2-o,width:t.width-2*i,height:t.height-2*o})}}else{_=t.x+t.width/2,C=t.y+t.height/2;const i=t.x*c+e/2,o=(t.x+t.width)*c+e/2,R=t.y*c+r/2,P=(t.y+t.height)*c+r/2,{rings:w}=b;i<0&&(w[0][0][0]-=i,w[0][3][0]-=i,w[0][4][0]-=i),R<0&&(w[0][0][1]+=R,w[0][1][1]+=R,w[0][4][1]+=R),o>e&&(w[0][1][0]-=o-e,w[0][2][0]-=o-e),P>r&&(w[0][2][1]+=P-r,w[0][3][1]+=P-r)}}const E={type:"cim",data:{type:"CIMSymbolReference",symbol:s}};return this.rasterize(E,e,r,_,C,c,h,1,b)}rasterize(a,n,m,M,I,h,l,p=0,g=null,f=window.devicePixelRatio||1){const{data:y}=a;if(!y||y.type!=="CIMSymbolReference"||!y.symbol)return null;const{symbol:v}=y,s=this._canvas,d=f*A;s.width=n*d,s.height=m*d,l||(l=z(v)),g||(g=k(l,n,m,"legend")),s.width+=2*p,s.height+=2*p;const x=s.getContext("2d",{willReadFrequently:!0}),e=O.createIdentity();return e.translate(-M,-I),e.scale(h*d,-h*d),e.translate(n*d/2+p,m*d/2+p),x.clearRect(0,0,s.width,s.height),new T(x,this._cimResourceManager,e,!0).drawSymbol(v,g),x.getImageData(0,0,s.width,s.height)}}function H(u,a,n,m){return a==="esriGeometryPolygon"?{rings:D(S(u.rings,{xmin:0,ymin:0,width:n,height:m}),-1*n/2,-1*m/2)}:a==="esriGeometryPolyline"?{paths:D(S(u.paths,{xmin:0,ymin:0,width:n,height:m}),-1*n/2,-1*m/2)}:null}function k(u,a,n,m,M){const h=-a/2+1,l=a/2-1,p=n/2-1,g=-n/2+1;if(M&&(u==="esriGeometryPolygon"||u==="esriGeometryPolyline")){const f=H(M,u,a,n);if(f)return f}switch(u){case"esriGeometryPoint":return{x:0,y:0};case"esriGeometryPolyline":return{paths:[[[h,0],[0,0],[l,0]]]};default:return m==="legend"?{rings:[[[h,p],[l,0],[l,g],[h,g],[h,p]]]}:{rings:[[[h,p],[l,p],[l,g],[h,g],[h,p]]]}}}export{kt as CIMSymbolRasterizer};
