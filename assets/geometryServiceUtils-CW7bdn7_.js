import{s as m,O as l}from"./Accessor-BmwT4B0c.js";import{C as p}from"./Portal-CmmHxpLg.js";import{m as s,n as c}from"./project-CvBujuEW.js";import"./index-4eY77cms.js";import"./cast-CsZslgGN.js";import"./JSONSupport-DcrLLGjL.js";import"./Promise-DfET-uns.js";import"./writer-DKgfqj4X.js";import"./Extent-g5W9hy0j.js";import"./Point-Cz2JYYmX.js";import"./jsonUtils-CwFG8yN4.js";import"./Polyline-s-JzsQqo.js";import"./mathUtils-Cfq9PL9W.js";import"./utils-YowqfOgk.js";import"./utils-B-dlKIhi.js";async function f(r=null,a){var i,o;if(l.geometryServiceUrl)return l.geometryServiceUrl;if(!r)throw new m("internal:geometry-service-url-not-configured");let e;e="portal"in r?r.portal||p.getDefault():r,await e.load({signal:a});const t=(o=(i=e.helperServices)==null?void 0:i.geometry)==null?void 0:o.url;if(!t)throw new m("internal:geometry-service-url-not-configured");return t}async function x(r,a,e=null,t){const i=await f(e,t),o=new s({geometries:[r],outSpatialReference:a}),n=await c(i,o,{signal:t});if(n&&Array.isArray(n)&&n.length===1)return n[0];throw new m("internal:geometry-service-projection-failed")}export{f as getGeometryServiceURL,x as projectGeometry};
