import{d as s,y as o,f as l,g as m,F as h,e4 as c,e as _}from"./index-B1qcMJFy.js";import{d as y}from"./FeatureSet-B0ca9TdS.js";import f from"./FeatureLayerView2D-Kxly5Eyh.js";import{d as g}from"./FeatureEffect-BLi5ervx.js";import"./diffUtils-ArzxlFJn.js";import"./Container-Cu2mymaD.js";import"./parser-BMJzm2a2.js";import"./highlightReasons-D5NOFQWa.js";import"./definitions-C14Q9bsB.js";import"./enums-CYMvjYBC.js";import"./Texture-geJFW1sL.js";import"./LayerView-CiN9pM-X.js";import"./scaleUtils-BiZ14rCn.js";import"./TechniqueInstance-BmqchXXM.js";import"./UpdateTracking2D-DqQVxF7b.js";import"./TurboLine-ZijYh2Mq.js";import"./enums-BRqP_wXA.js";import"./earcut-CT2IwvBr.js";import"./GeometryUtils-ByasXqdY.js";import"./OptimizedGeometry-CQuTPb9g.js";import"./utils-y0bK7WMB.js";import"./Rect-CUzevAry.js";import"./LabelMetric-C-5nd1ih.js";import"./Program-D73aiqol.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./labelUtils-BAW6mwzs.js";import"./defaultsJSON-CHAaurhX.js";import"./BindType-BmZEZMMh.js";import"./Util-B3rjJlnv.js";import"./vec42-B-sS29RP.js";import"./vec4f64-CCf6w8sj.js";import"./constants-D5zmR9t2.js";import"./TileContainer-BDAVfzMi.js";import"./WGLContainer-CbQ7-c9v.js";import"./ProgramTemplate-PPTPfqvG.js";import"./StyleDefinition-pu9RBNlY.js";import"./config-MDUrh2eL.js";import"./featureConversionUtils-D_5zMG16.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./tileUtils-B7X19rIS.js";import"./lengthUtils-DbqEO4K7.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./OrderByInfo-Bjqd1YIi.js";import"./labelingInfo-Bvinz6du.js";import"./LabelClass-BsrtqKpM.js";import"./jsonUtils-D4lwJas0.js";import"./heatmapUtils-BYQ7d-zD.js";import"./SDFHelper-BxqhC9Gy.js";import"./floatRGBA-CKX-bz9l.js";import"./FeatureCommandQueue-Bd0gKLXd.js";import"./HighlightCounter-Z3hJUp0w.js";import"./commonProperties-DknRhH4V.js";import"./ElevationInfo-C7Yz1Jr6.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./popupUtils-B07msJVZ.js";import"./RefreshableLayerView-B1ND2_Zv.js";import"./jsonUtils-PeZxWKr8.js";const v=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:g})],t.prototype,"filter",void 0),t=s([l("esri.layers.mixins.StreamLayerView")],t),t};let i=class extends v(f){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([m(()=>this.layer.customParameters,e=>this._worker.streamMessenger.updateCustomParameters(e)),this.layer.on("send-message-to-socket",e=>this._worker.streamMessenger.sendMessageToSocket(e)),this.layer.on("send-message-to-client",e=>{this._worker.streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()}),m(()=>this.layer.purgeOptions,()=>this._update()),m(()=>this.suspended,this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new h("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return c(e.map(p=>this.on(p,t)));const r=["data-received","message-received"].includes(e);r&&this._worker.streamMessenger.enableEvent(e,!0);const a=super.on(e,t),n=this;return _(()=>{a.remove(),r&&(n._worker.closed||n.hasEventListener(e)||n._worker.streamMessenger.enableEvent(e,!1))})}queryLatestObservations(e,t){var r,a,n;if(!((r=this.layer.timeInfo)!=null&&r.endField||(a=this.layer.timeInfo)!=null&&a.startField||(n=this.layer.timeInfo)!=null&&n.trackIdField))throw new h("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");return this._worker.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then(p=>{const d=y.fromJSON(p);return d.features.forEach(u=>{u.layer=this.layer,u.sourceLayer=this.layer}),d})}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval=setInterval(()=>this.incrementSourceRefreshVersion(),this.layer.updateInterval)}_doDisconnect(){this._worker.streamMessenger.disconnect(),this._doPause()}_doConnect(){this._worker.streamMessenger.connect(),this.resume()}_doClear(){this._worker.streamMessenger.clear(),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],i.prototype,"pipelineConnectionStatus",void 0),s([o()],i.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],i.prototype,"connectionError",null),s([o({readOnly:!0})],i.prototype,"_streamConnectionStatus",null),i=s([l("esri.views.2d.layers.StreamLayerView2D")],i);const Pe=i;export{Pe as default};
