import{r as o,m as n,a as s,B as p}from"./Accessor-BmwT4B0c.js";import{i as u}from"./cast-CsZslgGN.js";import{r as z}from"./enumeration-DpvDkLNI.js";const y=u()({naturalLog:"natural-log",squareRoot:"square-root",percentOfTotal:"percent-of-total",log:"log",field:"field"}),i="percent-of-total",l="field",f=m=>{let t=class extends m{constructor(){super(...arguments),this.normalizationField=null,this.normalizationMaxValue=null,this.normalizationMinValue=null,this.normalizationTotal=null}get normalizationType(){let a=this._get("normalizationType");const r=!!this.normalizationField,e=this.normalizationTotal!=null;return r||e?(a=r&&l||e&&i||null,r&&e&&p.getLogger(this).warn("warning: both normalizationField and normalizationTotal are set!")):a!==l&&a!==i||(a=null),a}set normalizationType(a){this._set("normalizationType",a)}};return o([n({type:String,json:{name:"parameters.normalizationField",write:!0}})],t.prototype,"normalizationField",void 0),o([n({type:Number,json:{name:"parameters.normalizationMaxValue",write:!0}})],t.prototype,"normalizationMaxValue",void 0),o([n({type:Number,json:{name:"parameters.normalizationMinValue",write:!0}})],t.prototype,"normalizationMinValue",void 0),o([n({type:Number,json:{name:"parameters.normalizationTotal",write:!0}})],t.prototype,"normalizationTotal",void 0),o([z(y,{name:"parameters.normalizationType"})],t.prototype,"normalizationType",null),t=o([s("esri.rest.support.NormalizationBinParametersMixin")],t),t};export{f as m,y as n};
