import{U as C}from"./assets-BNizZMOZ.js";import{c as Q}from"./reactiveUtils-BFQ0BtrB.js";import{c as _,n as v}from"./subclass-BR3PhgZG.js";import{b as G}from"./Accessor-D6mNnsWy.js";import{p as R}from"./jsonUtils-DtWlwXHP.js";import{a5 as I,G as Z}from"./Point-TlcsOcXV.js";import{o as A,r as P,e as M,n as N,t as z}from"./featureConversionUtils-B-SknPj_.js";import{m as B}from"./FeatureStore-GQfqFqRN.js";import{x as E,j as b}from"./timeSupport-86-Lo3YD.js";import{$ as J}from"./QueryEngine-BaqPXEl6.js";import{I as L,N as U,E as H}from"./geojson-B6ajRYE7.js";import{c as V,i as W,o as K}from"./clientSideDefaults-DDr2PCsV.js";import{j as Y,p as T,d as w,f as F,y as $}from"./sourceUtils-BvhUgfwA.js";import{Z as O}from"./FieldsIndex-DHql50vu.js";import{i as X}from"./fieldType-CIG5ey7e.js";import{H as ee,K as te}from"./fieldUtils-C5R42-PY.js";import{i as ie}from"./Promise-CZrWwByK.js";import"./index-BVncS3aY.js";import"./Evented-CXIxDjmW.js";import"./shared-B3wH2qpO.js";import"./Extent-B4rrMrqp.js";import"./Polyline-BQFeqYXi.js";import"./writer-3zufXUNV.js";import"./mathUtils-ClvKsMak.js";import"./jsonMap-DCC6W5ex.js";import"./aaBoundingBox-BGxkJAW0.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./BoundsStore-BYcuS8_t.js";import"./PooledRBush-CGlhTzFe.js";import"./quickselect-D0_cvEX6.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./optimizedFeatureQueryEngineAdapter-Buta7wlw.js";import"./centroid-DdLmOD72.js";import"./projection-tSh-0UvX.js";import"./projectBuffer-iyGwL2dv.js";import"./geodesicConstants-kj1AtlGg.js";import"./normalizeUtils-CuTX3yb4.js";import"./normalizeUtilsCommon-DNPu20r0.js";import"./geometry-CnaxvJsv.js";import"./utils-Blh5cXWv.js";import"./utils-Bh7lx_TM.js";import"./json-Wa8cmqdu.js";import"./MemCache-C6WUx-5V.js";import"./LRUCache-ju6LnIBZ.js";import"./WhereClause-CO6Fm86l.js";import"./TimeOnly-BtK5SiqG.js";import"./UnknownTimeZone-D0GlcniK.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./quantizationUtils-DFd0XKEL.js";import"./utils-hH5IaWNz.js";import"./screenUtils-PfxkaaMN.js";import"./timeUtils-DQR2jUPL.js";import"./heatmapUtils-C-uT6ZIV.js";import"./vec42-B1mBkh1w.js";import"./vec4f64-CBQL1T0x.js";import"./utils-HfpQY-3e.js";import"./Basemap-CKBB4cRW.js";import"./collectionUtils-Dm1icNvk.js";import"./Portal-DCqdz-K4.js";import"./loadAll-z9YY33Kx.js";import"./PortalItem-CaeKabGc.js";import"./persistableUrlUtils-Dx61-x4K.js";import"./writeUtils-BUKZUL8X.js";import"./layerUtils-BzjQnEdj.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-ybYUU6jq.js";import"./utils-DUUw13Ab.js";import"./ClassBreaksDefinition-BpZNgsmK.js";import"./enumeration--HlxOQ_N.js";import"./SnappingCandidate-O5eRSE6e.js";import"./Scheduler-CDoWuxMK.js";import"./signal-DzOfzcfh.js";import"./debugFlags-B3L9P_UW.js";import"./date-M6n_RqpC.js";import"./defaultsJSON-GKolV7NZ.js";import"./intl-CArXn1et.js";const re={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsQueryWithDistance:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsQueryWithResultType:!1,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class Rt{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[],[i]=await Promise.all([e.url?this._fetch(t==null?void 0:t.signal):null,this._checkProjection(e.spatialReference)]),r=L(i,{geometryType:e.geometryType}),a=e.fields||r.fields||[],u=e.hasZ!=null?e.hasZ:r.hasZ,m=r.geometryType;let c=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const h=e.spatialReference||I;let n=e.timeInfo;a===r.fields&&r.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const p=new O(a);let l=p.get(c);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1,c=l.name):(l={alias:c,name:c,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},a.unshift(l));const y={};for(const o of a){if(o.name==null&&(o.name=o.alias),o.alias==null&&(o.alias=o.name),!o.name)throw new _("geojson-layer:invalid-field-name","field name is missing",{field:o});if(!X.jsonValues.includes(o.type))throw new _("geojson-layer:invalid-field-type",`invalid type for field "${o.name}"`,{field:o});if(o.name!==l.name){const g=ee(o);g!==void 0&&(y[o.name]=g)}o.length==null&&(o.length=te(o))}if(n){if(n.startTimeField){const o=p.get(n.startTimeField);o?(n.startTimeField=o.name,o.type="esriFieldTypeDate"):n.startTimeField=null}if(n.endTimeField){const o=p.get(n.endTimeField);o?(n.endTimeField=o.name,o.type="esriFieldTypeDate"):n.endTimeField=null}if(n.trackIdField){const o=p.get(n.trackIdField);o?n.trackIdField=o.name:(n.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:n}}))}n.startTimeField||n.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:n}}),n=null)}const d=m?K(m):void 0,j=p.dateFields.length?{timeZoneIANA:ie}:null,f={warnings:s,featureErrors:[],layerDefinition:{...re,drawingInfo:d??void 0,templates:V(y),extent:void 0,geometryType:m,objectIdField:c,fields:a,hasZ:!!u,timeInfo:n,dateFieldsTimeReference:j}};this._queryEngine=new J({fieldsIndex:O.fromLayerJSON({fields:a,timeInfo:n,dateFieldsTimeReference:j}),geometryType:m,hasM:!1,hasZ:u,objectIdField:c,spatialReference:h,timeInfo:n,featureStore:new B({geometryType:m,hasM:!1,hasZ:u}),cacheSpatialQueries:!0});const q=this._queryEngine.fieldsIndex.requiredFields.indexOf(l);q>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(q,1),this._createDefaultAttributes=W(y,c);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const k=this._normalizeFeatures(x,f.featureErrors);this._queryEngine.featureStore.addMany(k);const{fullExtent:D,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=D,S){const{start:o,end:g}=S;f.layerDefinition.timeInfo.timeExtent=[o,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([Y(t,s),E(e.adds,t),E(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(e,t.signal)}async refresh(e){var i;this._loadOptions.customParameters=e,(i=this._snapshotTask)==null||i.abort(),this._snapshotTask=Q(this._snapshotFeatures),this._snapshotTask.promise.then(r=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,r);const a=this._normalizeFeatures(r);a&&this._queryEngine.featureStore.addMany(a)},r=>{this._queryEngine.featureStore.clear(),G(r)||v.getLogger("esri.layers.GeoJSONLayer").error(new _("geojson-layer:refresh","An error occurred during refresh",{error:r}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:s}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:s}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=U(e,{geometryType:t,hasZ:s,objectIdField:i});if(!Z(this._queryEngine.spatialReference,I))for(const a of r)a.geometry!=null&&(a.geometry=A(b(P(a.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),I,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,i=(await C(t??"",{responseType:"json",query:{...s},signal:e})).data;return H(i),i}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const a of e){const u=this._createDefaultAttributes(),m=T(i,u,a.attributes,!0);m?t==null||t.push(m):(this._assignObjectId(u,a.attributes,!0),a.attributes=u,a.objectId=u[s],r.push(a))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t!=null&&t.length&&this._applyAddEdits(r,t),s!=null&&s.length&&this._applyUpdateEdits(r,s),i==null?void 0:i.length){for(const m of i)r.deleteResults.push(w(m));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:a,timeExtent:u}=await this._queryEngine.fetchRecomputedExtents();return{extent:a,timeExtent:u,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:a,objectIdField:u,spatialReference:m,featureStore:c,fieldsIndex:h}=this._queryEngine,n=[];for(const p of t){if(p.geometry&&i!==R(p.geometry)){s.push(F("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),y=T(h,l,p.attributes);if(y)s.push(y);else{if(this._assignObjectId(l,p.attributes),p.attributes=l,p.uid!=null){const d=p.attributes[u];e.uidToObjectId[p.uid]=d}if(p.geometry!=null){const d=p.geometry.spatialReference??m;p.geometry=b($(p.geometry,d),d,m)}n.push(p),s.push(w(p.attributes[u]))}}c.addMany(M([],n,i,a,r,u))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:a,spatialReference:u,featureStore:m,fieldsIndex:c}=this._queryEngine;for(const h of t){const{attributes:n,geometry:p}=h,l=n==null?void 0:n[a];if(l==null){e.push(F(`Identifier field ${a} missing`));continue}if(!m.has(l)){e.push(F(`Feature with object id ${l} missing`));continue}const y=N(m.getFeature(l),s,r,i);if(p!=null){if(s!==R(p)){e.push(F("Incorrect geometry type."));continue}const d=p.spatialReference??u;y.geometry=b($(p,d),d,u)}if(n){const d=T(c,y.attributes,n);if(d){e.push(d);continue}}m.add(z(y,s,r,i,a)),e.push(w(l))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await E(I,e)}catch{throw new _("geojson-layer","Projection not supported")}}}export{Rt as default};
