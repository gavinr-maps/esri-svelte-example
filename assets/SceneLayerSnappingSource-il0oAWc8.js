import{r as i,m as n,a as u,g as y,l as f,i as k,aA as g,H as C,D as H,G as b}from"./Accessor-BHnuXKD2.js";import{h as L}from"./UpdatingHandles-ptqz1ck8.js";import{a as $}from"./EdgeWorkerHandle-LOv8HYlb.js";import{n as v}from"./vec3f64-BLpZdpfb.js";import{h as E}from"./WorkerHandle-B2QLNs3X.js";import{V as O}from"./sphere-DQxj5tsv.js";import{e as _,v as I}from"./RightAngleSnappingHint-CCcBBYgG.js";import{c as V}from"./SnappingManager-CF4NflXd.js";import{r as R}from"./VertexSnappingCandidate-DZRPt3Xf.js";import"./reactiveUtils-BR0C1Kq4.js";import"./Evented-DCWccWGU.js";import"./SimpleObservable-7oieNGD8.js";import"./workerHelper-B8H8hdjW.js";import"./InterleavedLayout-Dvj-Snan.js";import"./BufferView-_QDXRCew.js";import"./vec2-maR1OrZI.js";import"./common-DQOJ18NT.js";import"./vec32-Dvg_eL9J.js";import"./vec42-YcqnINSP.js";import"./types-D0PSWh4d.js";import"./vec2f64-Dy6m9Nrb.js";import"./vec4f64-o2zAXfmz.js";import"./edgeProcessing-BCtcmmbP.js";import"./deduplicate-8uOXlcvp.js";import"./mathUtils-DV9iOXpW.js";import"./Indices-Db9lERgy.js";import"./VertexAttribute-Cq4MnHjR.js";import"./bufferLayouts-C7weggCO.js";import"./glUtil-D0YUa0ow.js";import"./enums-D9v74xTE.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./Normals-OOhKYumi.js";import"./workers-D8Q3pEzK.js";import"./Queue-BOnccek2.js";import"./cast-BA_-jlhc.js";import"./index-tefRSezt.js";import"./JSONSupport-CGdeqxpk.js";import"./intl-Do3GEEJ7.js";import"./Promise-CmQqe-ke.js";import"./mat4-Fi6iAz29.js";import"./Polyline-BmuD2-ZN.js";import"./writer-B2bQV2uU.js";import"./Extent-CBBGeHb-.js";import"./Point-XGrwlf63.js";import"./mat3-CR8GKnhD.js";import"./mat3f64-BBpwCtoL.js";import"./plane-4dpuo6-e.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-CCm9z-pX.js";import"./mathUtils-B9R7G-2c.js";import"./Color-gncXBiLc.js";import"./colorUtils-Rxh2V3ai.js";import"./opacityUtils-CSd4XoR2.js";import"./timeUtils-D2X862bk.js";import"./projectVectorToVector-dS8io47t.js";import"./projectBuffer-DOU0xvVi.js";import"./geodesicConstants-yASAK_zX.js";import"./projectPointToVector-BS0u8fq6.js";import"./projection-B2I9Bzj_.js";import"./Query-DCBIeen2.js";import"./enumeration-Cr5WIZs4.js";import"./jsonUtils-Cu7OBRmN.js";import"./typeUtils-BSg8Y507.js";import"./Field-Cyk7Ur5d.js";import"./fieldType-L-VlbZqy.js";import"./FullTextSearch-BWm_kPUE.js";import"./Clonable-DvJsj5LF.js";import"./TimeExtent-J5qnUFx_.js";import"./InputManager-Bs9UE-jw.js";import"./signal-DSa0yokC.js";import"./keybindings-DrKrBFID.js";import"./utils-D02V2_jH.js";import"./Version-9k2AOv05.js";import"./geodesicUtils-Bh_GX0Qj.js";import"./elevationInfoUtils-RSZ4Logn.js";import"./unitConversionUtils-C4AR5obr.js";import"./lengthUtils-DjJgJFRg.js";import"./geometry2dUtils-vtViF5g_.js";import"./screenUtils-_ZIvrt5o.js";import"./viewUtils-Ce2x26K8.js";import"./PointSnappingHint-CurBFXPo.js";let d=class extends y{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new x(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:o}=e,s=P;this.renderCoordsHelper.toRenderCoords(o,r.spatialReference,s);const l=e.distance,p=typeof l=="number"?l:l.distance,m=await this._workerHandle.invoke({bounds:O(s[0],s[1],s[2],p),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return m.candidates.sort((h,S)=>h.distance-S.distance),m.candidates.map(h=>this._convertCandidate(r,h))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new V({objectId:t.objectId,targetPoint:_(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new R({objectId:t.objectId,targetPoint:_(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=v();return this.renderCoordsHelper.fromRenderCoords(t,r,e),I(r)}async _fetchAllEdgeLocations(e,t){const r=[],o=[];for(const{id:s,uid:l}of e.components)this._ids.has(s)&&r.push((async()=>{const p=await this.fetchEdgeLocations(s,t.signal),m=p.locations.buffer;return o.push(m),{id:s,uid:l,objectIds:p.objectIds,locations:m,origin:p.origin,type:p.type}})());return{result:{components:(await Promise.all(r)).filter(({id:s})=>this._ids.has(s))},transferList:o}}};i([n({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),i([n({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),i([n({constructOnly:!0})],d.prototype,"schedule",void 0),i([n({readOnly:!0})],d.prototype,"availability",void 0),d=i([u("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let x=class extends E{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const P=v();let a=class extends y{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new L,this._abortController=new AbortController}destroy(){this._tracker=f(this._tracker),this._abortController=k(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new $(w(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:w(t),fetchEdgeLocations:async(r,o)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,o)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([g(this._workerHandle),g(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){var r;if(this.destroyed)return;const e=(r=this._abortController)==null?void 0:r.signal,t=await this.getLayerView();t==null||C(e)||(this._tracker=t.trackSnappingSources({add:(o,s)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:o,bounds:s},e))},remove:o=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:o},e))}}))}};function w(e){return t=>e.immediate.schedule(t)}i([n({constructOnly:!0})],a.prototype,"getLayerView",void 0),i([n({constructOnly:!0})],a.prototype,"view",void 0),i([n({readOnly:!0})],a.prototype,"updating",null),i([n({readOnly:!0})],a.prototype,"availability",void 0),a=i([u("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],a);let c=class extends y{get updating(){return this._i3sSources.some(e=>e.updating)}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(e=>e.destroy()),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map(o=>o.fetchCandidates(e,t)));return H(t),r.flat()}refresh(){this._i3sSources.forEach(e=>e.refresh())}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map(r=>r.type==="building-component"?new a({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null).filter(b)}_getSceneLayerI3SSource(e,t){return new a({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};i([n({constructOnly:!0})],c.prototype,"layerSource",void 0),i([n({constructOnly:!0})],c.prototype,"view",void 0),i([n({readOnly:!0})],c.prototype,"updating",null),i([n({readOnly:!0})],c.prototype,"availability",void 0),c=i([u("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],c);export{c as SceneLayerSnappingSource};
