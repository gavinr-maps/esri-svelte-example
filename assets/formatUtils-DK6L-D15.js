import{r as A,l as I,p as k}from"./number-QOqKffTG.js";import{r as z}from"./Promise-DfET-uns.js";import{g as Z,s as X,r as h,m as g,a as j}from"./Accessor-BmwT4B0c.js";import{P as F,G,T as O,E as q,v as U,M as T,p as H,k as J}from"./coordinateFormatter-sQ_KRFCi.js";import{k as K,O as L}from"./projection-CyCZAIaD.js";import{j as Q,g as R,c as V,a3 as tt}from"./Point-Cz2JYYmX.js";function et(t,n){const e=N(n);return[t[0].toFixed(e),t[1].toFixed(e)]}function N(t){return t>=500?6:t<500&&t>=50?7:t<50&&t>=5?8:9}function it(t,n){const e=t.includes(",")?",":" ",[a,o,d]=t.split(e).map(p=>{const b=p.trim();return b?Number(b):null});if(!y(a)||!y(o))return null;const c=new Q({x:a,y:o,spatialReference:n||R.WGS84});return d&&(c.z=d,c.hasZ=!0),c}function y(t){return typeof t=="number"&&isFinite(t)}function M(t){return!!t&&y(t.x)&&y(t.y)}function C(t,n){if(t.spatialReference.isGeographic&&n){const[e,a]=et([t.x,t.y],n);return`${e}, ${a}`}return`${t.x.toFixed(3)}, ${t.y.toFixed(3)}`}const nt=["dd","dms","ddm","mgrs","usng","utm"];function lt(t){return nt.includes(t)}let l=class extends Z{constructor(t){super(t),this.conversionInfo=null,this.coordinateSegments=null,this._currentPattern=void 0,this.defaultPattern=null,this.name=null,this.viewModel=null}get currentPattern(){return(this._currentPattern||this.defaultPattern)??""}set currentPattern(t){this._currentPattern=t}get label(){return this.name??""}set label(t){this._overrideIfSome("label",t)}get hasDisplayProperties(){return!(!this.defaultPattern||!this.coordinateSegments)}get spatialReference(){var t;return this.name==="basemap"?this._viewSpatialReference:((t=this.conversionInfo)==null?void 0:t.spatialReference)??R.WGS84}set spatialReference(t){this._overrideIfSome("spatialReference",t)}get _viewSpatialReference(){var t,n;return((n=(t=this.viewModel)==null?void 0:t.view)==null?void 0:n.spatialReference)??R.WGS84}get _additionalCharactersPattern(){const t=this.coordinateSegments;if(!t)return null;const n=t.map(a=>a.alias),e=this.currentPattern.replaceAll(new RegExp(`["nsew${n.join()}]`,"gi"),"").replaceAll(" ","");return new RegExp(`[${e}]`,"g")}get test(){}async convert(t){var a;if(!M(t))throw new X("format:invalid-point","Could not convert invalid point.",{point:t});const n=(a=this.conversionInfo)==null?void 0:a.convert;if(n)return Promise.resolve().then(()=>n(t));const e=await this._project(t,this.spatialReference);return{location:e,coordinate:await this._getCoordinate(e)}}getConversionStrategy(){var n,e;const t=this._viewSpatialReference;return(n=this.conversionInfo)!=null&&n.convert||(e=this.viewModel)!=null&&e.formatterAvailable||this.name==="xy"&&(t.isWebMercator||t.isWGS84)||this.name==="basemap"?"client":"server"}getDisplayCoordinate(t){if(!t)return null;if(!this.coordinateSegments||!this.currentPattern)return t;let n=this.currentPattern;const e=this._getSegmentMatches(t,!1);for(let a=this.coordinateSegments.length-1;a>=0;a--){const o=this.coordinateSegments[a];n=n.replace(o.alias,e[a])}return n}_parseUserInput(t){const{defaultPattern:n,_additionalCharactersPattern:e,coordinateSegments:a}=this;if(!n||!e)return"";let o=n.replace(e,"");t=t.replace(e,"");const d=this._getSegmentMatches(t,!0);if(a)for(let c=a.length-1;c>=0;c--){const p=a[c];o=o.replace(p.alias,d[c])}return o}_getSegmentMatches(t,n){const e=new Array,{coordinateSegments:a}=this;if(!a)return e;for(let o=0;o<a.length;o++){const d=a[o],c=t.match(d.searchPattern);if(!c){e.push("");continue}let p=c[0];if(t=t.replace(p,"").trim(),d.substitution){const b=n?d.substitution.input(p):d.substitution.output(p);b&&(p=`${b}`)}e.push(p)}return e}async reverseConvert(t){var o,d;const n=this._parseUserInput(t),e=(o=this.conversionInfo)==null?void 0:o.reverseConvert;let a;if(e)a=e(n);else if(this.name==="xy"||this.name==="basemap")a=it(n,this.spatialReference);else if((d=this.viewModel)!=null&&d.formatterAvailable)switch(this.name){case"dd":case"ddm":case"dms":a=q(n,this.spatialReference);break;case"mgrs":{a=O(n,this.spatialReference,"automatic");break}case"utm":{a=G(n,this.spatialReference,"latitude-band-indicators");break}case"usng":a=F(n,this.spatialReference);break;default:a=null}if(!a)throw new X("format:invalid-input","Could not parse input into point.",{userInput:t});return this._project(a,this._viewSpatialReference)}async _getCoordinate(t){var e,a,o;const n=((a=(e=this.viewModel)==null?void 0:e.view)==null?void 0:a.scale)??0;if(!M(t))throw new X("format:invalid-point","Could not transform invalid point into coordinate.",{point:t});if((o=this.viewModel)!=null&&o.formatterAvailable||this.name==="basemap"||this.name==="xy")switch(this.name){case"dd":case"ddm":case"dms":{const d=N(n);return J(t,this.name,d)}case"mgrs":return H(t,"automatic",5,!1);case"usng":return T(t,5,!1);case"utm":return U(t,"latitude-band-indicators",!0);default:return C(t,n)}return C(t,n)}async _project(t,n){var e,a;if(V(t.spatialReference,n)||!n)return t;if((e=this.viewModel)!=null&&e.formatterAvailable&&K())return L(t,n);if(!((a=this.viewModel)!=null&&a.formatterAvailable)){const o=tt(t,n);if(o!=null)return o}return null}};h([g()],l.prototype,"conversionInfo",void 0),h([g()],l.prototype,"coordinateSegments",void 0),h([g()],l.prototype,"currentPattern",null),h([g()],l.prototype,"_currentPattern",void 0),h([g()],l.prototype,"label",null),h([g()],l.prototype,"defaultPattern",void 0),h([g({readOnly:!0})],l.prototype,"hasDisplayProperties",null),h([g()],l.prototype,"name",void 0),h([g({type:R})],l.prototype,"spatialReference",null),h([g()],l.prototype,"viewModel",void 0),h([g({readOnly:!0})],l.prototype,"_viewSpatialReference",null),h([g({readOnly:!0})],l.prototype,"_additionalCharactersPattern",null),l=h([j("esri.widgets.CoordinateConversion.support.Format")],l);const v=l,P=A().decimal,w={N:"north",S:"south",E:"east",W:"west"},u="°‎",S=new RegExp(`-?\\d+[\\.|\\${P}]?\\d*`),at=/^[\\0]+(?=\d)/;function pt(t,n){const e=z()==="ar",a=t.abbreviatedDirections.north,o=t.abbreviatedDirections.south,d=t.abbreviatedDirections.east,c=t.abbreviatedDirections.west,p=A().decimal,b={[a]:"N",[o]:"S",[d]:"E",[c]:"W"},Y=new RegExp(`-?\\d+[\\.|\\${p}]?\\d*`),D=new RegExp(`N|S|${a}|${o}`,"i"),E=new RegExp(`E|W|${d}|${c}`,"i"),_={ddm:`Y${u} A'${t.abbreviatedDirections.north}, X${u} B'${t.abbreviatedDirections.east}`,dms:`Y${u} A' B"${t.abbreviatedDirections.north}, X${u} C' D"${t.abbreviatedDirections.east}`,dd:`Y${u}${t.abbreviatedDirections.north}, X${u}${t.abbreviatedDirections.east}`,xy:`X${u}, Y${u}`,basemap:"X, Y"},W={ddm:`${t.abbreviatedDirections.north}${u}Y 'A ,${t.abbreviatedDirections.east}${u}X 'B`,dms:`${t.abbreviatedDirections.north}${u}Y 'A "B ,${t.abbreviatedDirections.east}${u}X 'C "D`,dd:`${t.abbreviatedDirections.north}${u}Y ,${t.abbreviatedDirections.east}${u}X`,xy:`X${u} ,Y${u}`,basemap:"X ,Y"},B=m=>m!=null&&Object.keys(_).includes(m),f=new RegExp(`\\d{1,2}[\\.|\\${p}]?\\d*`,"i"),x=new RegExp(`\\d{1,3}[\\.|\\${p}]?\\d*`,"i");n.forEach(m=>{const{name:$}=m;if($==="dd"?m.coordinateSegments=[{alias:"Y",description:"degrees latitude",searchPattern:f,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:t.abbreviatedDirections.north,description:"north/south indicator",searchPattern:D,substitution:{input:i=>b[i],output:i=>t.abbreviatedDirections[w[i]]}},{alias:"X",description:"degrees longitude",searchPattern:x,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:t.abbreviatedDirections.east,description:"east/west indicator",searchPattern:E,substitution:{input:i=>b[i],output:i=>t.abbreviatedDirections[w[i]]}}]:$==="ddm"?m.coordinateSegments=[{alias:"Y",description:"degrees latitude",searchPattern:f,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:"A",description:"minutes latitude",searchPattern:f,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:t.abbreviatedDirections.north,description:"north/south indicator",searchPattern:D,substitution:{input:i=>b[i],output:i=>t.abbreviatedDirections[w[i]]}},{alias:"X",description:"degrees longitude",searchPattern:x,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:"B",description:"minutes longitude",searchPattern:f,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:t.abbreviatedDirections.east,description:"east/west indicator",searchPattern:E,substitution:{input:i=>b[i],output:i=>t.abbreviatedDirections[w[i]]}}]:$==="dms"?m.coordinateSegments=[{alias:"Y",description:"degrees latitude",searchPattern:f,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:"A",description:"minutes latitude",searchPattern:f,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:"B",description:"seconds latitude",searchPattern:f,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:t.abbreviatedDirections.north,description:"north/south indicator",searchPattern:D,substitution:{input:i=>b[i],output:i=>t.abbreviatedDirections[w[i]]}},{alias:"X",description:"degrees longitude",searchPattern:x,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:"C",description:"minutes longitude",searchPattern:f,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:"D",description:"seconds longitude",searchPattern:f,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:t.abbreviatedDirections.east,description:"east/west indicator",searchPattern:E,substitution:{input:i=>b[i],output:i=>t.abbreviatedDirections[w[i]]}}]:(m.name==="xy"||m.name==="basemap")&&(m.coordinateSegments=[{alias:"X",description:"easting",searchPattern:Y,substitution:{input:i=>s(i),output:i=>r(i)}},{alias:"Y",description:"northing",searchPattern:Y,substitution:{input:i=>s(i),output:i=>r(i)}}]),B($)){const i=e?W[$]:_[$];m.defaultPattern=i,m.currentPattern=i}})}function ht(){const t=new RegExp("N|S","i"),n=new RegExp("E|W","i");return[new v({name:"basemap",coordinateSegments:[{alias:"X",description:"easting",searchPattern:S,substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"Y",description:"northing",searchPattern:S,substitution:{input:e=>s(e),output:e=>r(e)}}],defaultPattern:"X, Y",viewModel:null}),new v({name:"dd",coordinateSegments:[{alias:"Y",description:"degrees latitude",searchPattern:new RegExp(`\\d{1,2}[\\.|\\${P}]?\\d*(?=\\D*?[N|S])`,"i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"N",description:"north/south indicator",searchPattern:t},{alias:"X",description:"degrees longitude",searchPattern:new RegExp(`\\d{1,3}[\\.|\\${P}]?\\d*(?=\\D*?[E|W|])`,"i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"E",description:"east/west indicator",searchPattern:n}],defaultPattern:`Y${u}N, X${u}E`,viewModel:null}),new v({name:"ddm",coordinateSegments:[{alias:"Y",description:"degrees latitude",searchPattern:new RegExp("\\d{1,2}(?=.*?\\s+.*?[N|S])","i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"A",description:"minutes latitude",searchPattern:new RegExp(`\\d{1,2}[\\.\\${P}]?\\d*(?=.*?[N|S])`,"i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"N",description:"north/south indicator",searchPattern:t},{alias:"X",description:"degrees longitude",searchPattern:new RegExp("\\d{1,3}(?=\\D*?\\s+.*?[E|W])","i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"B",description:"minutes longitude",searchPattern:new RegExp(`\\d{1,2}[\\.|\\|${P}]?\\d*(?=.*?[E|W])`,"i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"E",description:"east/west indicator",searchPattern:n}],defaultPattern:`Y${u} A'N, X${u} B'E`,viewModel:null}),new v({name:"dms",coordinateSegments:[{alias:"Y",description:"degrees latitude",searchPattern:new RegExp("\\d{1,2}(?=.*?\\s+.*?[N|S])","i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"A",description:"minutes latitude",searchPattern:new RegExp("\\d{1,2}(?=.*?[N|S])","i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"B",description:"seconds latitude",searchPattern:new RegExp(`\\d{1,2}[\\.|\\${P}]?\\d*(?=.*?[N|S])`,"i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"N",description:"north/south indicator",searchPattern:t},{alias:"X",description:"degrees longitude",searchPattern:new RegExp("\\d{1,3}(?=.*?\\s+.*?[E|W])","i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"C",description:"minutes longitude",searchPattern:new RegExp("\\d{1,2}(?=.*?[E|W])","i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"D",description:"seconds longitude",searchPattern:new RegExp(`\\d{1,2}[\\.|\\${P}]?\\d*(?=.*?[E|W])`,"i"),substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"E",description:"east/west indicator",searchPattern:n}],defaultPattern:`Y${u} A' B"N, X${u} C' D"E`,viewModel:null}),new v({name:"xy",coordinateSegments:[{alias:"X",description:"longitude",searchPattern:S,substitution:{input:e=>s(e),output:e=>r(e)}},{alias:"Y",description:"latitude",searchPattern:S,substitution:{input:e=>s(e),output:e=>r(e)}}],defaultPattern:`X${u}, Y${u}`,viewModel:null}),new v({name:"mgrs",coordinateSegments:[{alias:"Z",description:"grid zone",searchPattern:/\d{1,2}\w|[abyz]/i},{alias:"S",description:"grid square",searchPattern:/\w{2}/},{alias:"X",description:"easting",searchPattern:/^\d{5}(?=.?\d{5}$)|^\d{4}(?=.?\d{4}$)|^\d{3}(?=.?\d{3}$)|^\d{2}(?=.?\d{2}$)|^\d(?=.?\d$)/},{alias:"Y",description:"northing",searchPattern:/^\d{1,5}/}],defaultPattern:"Z S X Y",viewModel:null}),new v({name:"usng",coordinateSegments:[{alias:"Z",description:"grid zone",searchPattern:/\d{1,2}\w|[abyz]/i},{alias:"S",description:"grid square",searchPattern:/\w{2}/},{alias:"X",description:"easting",searchPattern:/^\d{5}(?=.?\d{5}$)|^\d{4}(?=.?\d{4}$)|^\d{3}(?=.?\d{3}$)|^\d{2}(?=.?\d{2}$)|^\d(?=.?\d$)/},{alias:"Y",description:"northing",searchPattern:/^\d{1,5}/}],defaultPattern:"Z S X Y",viewModel:null}),new v({name:"utm",coordinateSegments:[{alias:"Z",description:"zone number",searchPattern:/\d{1,2}|[abyz]/i},{alias:"B",description:"latitude band",searchPattern:/^\D/},{alias:"X",description:"easting",searchPattern:/\d{1,7}(?=\s*\d{7}$)/},{alias:"Y",description:"northing",searchPattern:/\d{1,7}/}],defaultPattern:"ZB X Y",viewModel:null})]}function r(t){const n=t.match(at),e=n?n[0]:"",a=t.includes(".")?t.split(".")[1].length:0;return e+I(Number(t),{pattern:"###0.###",places:a,round:-1})}function s(t){return k(t)}export{v as R,pt as c,lt as f,u as o,ht as p,M as u};
