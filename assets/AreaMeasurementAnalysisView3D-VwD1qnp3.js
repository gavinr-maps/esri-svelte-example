import{g as se,r as l,m as d,a as N,B as Ee,N as M}from"./Accessor-BmwT4B0c.js";import{e as Fe}from"./defaultUnit-CHqZKPQE.js";import{s as We}from"./AnalysisView3D-DoDk2o7n.js";import{e as Z}from"./interfaces-js1RL7O8.js";import{d as R,C as re,A as Y,P as Ue}from"./reactiveUtils-XM7cS2OP.js";import{s as ke,a as qe}from"./mathUtils-Cfq9PL9W.js";import{a as J,s as k,l as ne}from"./quantityUtils-BsDK158M.js";import{al as xe,a5 as je,C as He,j as Be,aF as De,az as Ne,x as oe}from"./Point-Cz2JYYmX.js";import{o as ae,m as Je,r as Ke}from"./vec2-ChnYg_BJ.js";import{n as le,t as Ge}from"./vec2f64-Dy6m9Nrb.js";import{s as Re,u as ee,c as T,A as Ie,p as Qe,_ as Xe,y as Ze,P as x,g as K}from"./vec32-Dvg_eL9J.js";import{n as u}from"./vec3f64-BLpZdpfb.js";import{n as Ye,r as q}from"./vec4f64-o2zAXfmz.js";import{L as et,I as tt}from"./projection-CyCZAIaD.js";import{a as he}from"./spatialReferenceEllipsoidUtils-DBqQpPRa.js";import{n as j}from"./projectVectorToVector-CCOy_B5J.js";import{c as F}from"./projectPointToVector-BoxjK-qy.js";import{n as it,H as de,r as st}from"./Polyline-s-JzsQqo.js";import{t as ce}from"./Indices-D8XWalpO.js";import{G as pe}from"./Extent-g5W9hy0j.js";import{E as rt}from"./sphere-Cin5efBj.js";import{v as nt}from"./triangle-B1tKFm7z.js";import{g as ot,j as at,m as lt,p as ht,h as dt}from"./measurementUtils-CZMdV_le.js";import{a as ct}from"./ElevationProvider-aS5xrHHy.js";import{U as te,p as ue,q as pt}from"./mathUtils-BgCEaV43.js";import{U as me}from"./euclideanAreaMeasurementUtils-ButVfzxp.js";import{l as ut,h as mt}from"./euclideanLengthMeasurementUtils-Bcu5HQVu.js";import{u as gt,f as _t}from"./geodesicLengthMeasurementUtils-B4BXDmbs.js";import{e as ft}from"./geodesicMeasurementUtils-B-7dBAnY.js";import{i as yt}from"./Evented-Dw4_VOGn.js";import{t as vt,d as I}from"./LineVisualElement-BCLvCZUF.js";import{E as ge,p as wt,P as Lt,b as St}from"./EditGeometryOperations-CAMJU2Wn.js";import{f as $t}from"./intl-Duiy0OzY.js";import{F as Ct,S as _e,E as fe,R as Mt,P as ye}from"./colorUtils-DaPfwnk3.js";import{g as Oe}from"./quantityFormatUtils-Bo0-7oki.js";import{I as Pt,q as Vt}from"./mat4-Fi6iAz29.js";import{e as bt}from"./mat4f64-Dk4dwAN8.js";import{a as ve,_ as At,f as xt}from"./Segment-DI6rnOzR.js";import{E as we,a as Le}from"./vec42-YcqnINSP.js";import{a as Dt}from"./Object3DVisualElement-D0-_EXFp.js";import{t as Se}from"./Attribute-DGhdp5lO.js";import{G as Gt,u as Rt,H as It,g as Ot,c as $e,z as Tt,m as zt,t as Et,C as Ce,D as Ft,J as Wt,a2 as Ut,K as kt,E as qt,q as jt,F as Ht,A as Q,r as Me,e as Bt,f as Nt}from"./FloatArray-BQXWSSJh.js";import{b as Jt,p as b}from"./Material-C_-mgXN8.js";import{e as H}from"./VertexAttribute-Cq4MnHjR.js";import{n as Kt,m as X}from"./Matrix3PassUniform-uCCQMnlP.js";import{f as Qt}from"./DefaultBufferWriter-CqCDaNCZ.js";import{f as Xt}from"./DefaultLayouts-CBF6SkyQ.js";import{e as Zt}from"./TriangleMaterial-D-IjcYAX.js";import{_ as Yt}from"./index-4eY77cms.js";import{B as ei,g as ti}from"./renderState-Ci93M1-P.js";import{i as O}from"./ShaderTechniqueConfiguration-D4dZMCXS.js";import{h as ii}from"./lineStippleUtils-C89mzWlO.js";import{h as si}from"./Promise-DfET-uns.js";import"./BindType-BBwFZqyN.js";import{n as Pe}from"./glsl-BH37Aalp.js";import{i as ri}from"./ShaderBuilder-BKul5qh8.js";import{e as ni}from"./Float2PassUniform-x4sHx2JD.js";import"./getDefaultUnitForView-BBSnYQvp.js";import"./Portal-CmmHxpLg.js";import"./cast-CsZslgGN.js";import"./JSONSupport-DcrLLGjL.js";import"./writer-DKgfqj4X.js";import"./SimpleObservable-CvOkykwM.js";import"./common-DQOJ18NT.js";import"./projectBuffer-CQnuEMuP.js";import"./geodesicConstants-RQL9oKdk.js";import"./mat3-CR8GKnhD.js";import"./mat3f64-BBpwCtoL.js";import"./plane-CpXmOyqq.js";import"./quatf64-CCm9z-pX.js";import"./lineSegment-v806maA5.js";import"./geodesicAreaMeasurementUtils-CfJYiWyy.js";import"./geometryEngine-CLtm9OQA.js";import"./geometryEngineBase-B0ZyeKAX.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-DcIAHEVL.js";import"./geodesicUtils-Cvz9v8ds.js";import"./dehydratedFeatureUtils-1rrRm6hF.js";import"./earcut-D9gy186-.js";import"./line-BiDIlUeT.js";import"./aaBoundingBox-Dw3yBk2f.js";import"./ViewingMode-Dodu7ZZk.js";import"./RibbonLine.glsl-DwJpAQ1c.js";import"./basicInterfaces-CZwQPxTp.js";import"./InterleavedLayout-_dYEAUNK.js";import"./BufferView-0osDbyWD.js";import"./types-D0PSWh4d.js";import"./sdfPrimitives-DBgFWIDT.js";import"./doublePrecisionUtils-B0owpBza.js";import"./floatRGBA-Cb__GiDF.js";import"./enums-D9v74xTE.js";import"./Octree-CmoRJhci.js";import"./screenUtils-_ZIvrt5o.js";import"./Texture-BVJ22uHh.js";import"./signal-CySMLEX9.js";import"./getDataTypeBytes-BTGR5GyG.js";import"./RgbaFloatEncoding.glsl-_io2eW3M.js";import"./geometry2dUtils-D9Oax6Qb.js";import"./Color-VJEMvW-n.js";import"./colorUtils-Rxh2V3ai.js";import"./Cyclical-Dlbl-cQK.js";import"./unitFormatUtils-Q7ZG7HcF.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./viewUtils-CV6QVz7y.js";import"./elevationInfoUtils-D26wVF2d.js";import"./unitConversionUtils-rg07EgOm.js";import"./lengthUtils-_77UiyVF.js";import"./VisualElement-CaupdJPJ.js";import"./jsxFactory-Cnml7uXM.js";import"./uuid-Cl5lrJ4c.js";import"./TextOverlayItem-Bocd_PuB.js";import"./NoParameters-t-PuNrgq.js";import"./opacityUtils-Dim20wpZ.js";import"./requestImageUtils-DWgRKL5q.js";import"./TextureFormat-1mYWTFa-.js";import"./boundedPlane-DuGhiiFM.js";function Ve(t,e,i,s,r){Re(W,t),ee(U,t,e),j(W,i,W,r),j(U,i,U,r),T(s,U,W),Ie(s,s)}const W=u(),U=u();class oi{get numVertices(){return this._length}get hasStagedVertex(){return this._hasCursorPoint}constructor(e){this.validMeasurement=!1,this.positionsWorld=[],this.positionsRender=[],this.positionsFittedWorld=[],this.positionsFittedRender=[],this.positionsGeodesic=[],this.positionsSpherical=[],this.positionsStereographic=[],this.pathSegmentLengths=[],this.geodesicPathSegmentLengths=[],this.perimeterSegmentLengths=[],this.intersectingSegments=new Set,this.geodesicIntersectingSegments=new Set,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.areaCentroidWorldCoords=u(),this.areaCentroidRenderCoords=u(),this.geodesicAreaCentroidRenderCoords=u(),this.fittingMode=null,this.area=null,this.geodesicArea=null,this.pathLength=null,this.geodesicPathLength=null,this.perimeterLength=null,this._length=0,this._centroidRenderCoords=u(),this._planeWorldCoords=Ye(),this._worldUp=u(),this._worldTangent=u(),this._frame=[u(),u(),u()],this._pathVersion=-1,this._hasCursorPoint=!1,this._mode=null,this._tempU=u(),this._tempV=u(),this._tempVec3=u(),this._tempSphere=rt(),this._sceneView=e;const i=ut(e.spatialReference);this._measurementSR=i,this._lengthMeasurementUnit=xe(i)??"meters",this._areaMeasurementUnit=je(i)??"square-meters"}update(e,i,s,r,n,a){const o=i!=null,h=this._pathVersion===e.version,c=this._hasCursorPoint===o,p=this._mode===n;return!(h&&!a&&c&&p&&e.isValidPolygon)&&(this._pathVersion=e.version,this._hasCursorPoint=o,this._updateCursorSegmentLength(e,i),this._update(e,i,s,r,n),!0)}_update(e,i,s,r,n){const a=this._sceneView.renderSpatialReference,o=this._measurementSR,h=s.spatialReference;let c=e.numVertices;const p=!(i==null||i.equals(e.lastPoint)||c>2&&i.equals(e.firstPoint));p&&(c+=1);const m=!e.polygonIsClosed&&c>2,v=e.polygonIsClosed||m;this._resize(c);const f=he(h),_=h!=null&&ft(h)?h:null,C=_!=null&&et(h,f),{positionsGeodesic:w,positionsWorld:z,positionsRender:E,positionsSpherical:S}=this,V=(L,P)=>{ai(s.elevationProvider,L),F(L,z[P],o),F(L,E[P],a),C&&(F(L,w[P],_),F(L,S[P],f),Ie(S[P],S[P]))};e.forEachVertexPosition((L,P)=>V(L,P)),p&&V(i,c-1);const A=this._updatePathLengths(v);if(this.pathLength=this._length>1?J(A,this._lengthMeasurementUnit):null,C){const L=this._updateGeodesicPathLengths(v,_);this.geodesicPathLength=L!=null&&this._length>1?L:null}else this.geodesicPathLength=null;if(this._updateMode(n),!v)return this.area=null,this.geodesicArea=null,this.perimeterLength=null,this.triangleIndices=null,this.geodesicTriangleIndices=null,this.intersectingSegments.clear(),this.geodesicIntersectingSegments.clear(),void(this.validMeasurement=!1);this._updateAreaAndPerimeterLength(s,a,o,r),C&&this._updateGeodesicArea(s,_),this.validMeasurement=!0}getData(){return{validMeasurement:this.validMeasurement,numVertices:this.numVertices,hasStagedVertex:this.hasStagedVertex,positionsRender:this.positionsRender,positionsFittedWorld:this.positionsFittedWorld,positionsFittedRender:this.positionsFittedRender,intersectingSegments:this.intersectingSegments,geodesicIntersectingSegments:this.geodesicIntersectingSegments,triangleIndices:this.triangleIndices,geodesicTriangleIndices:this.geodesicTriangleIndices,areaCentroidRenderCoords:this.areaCentroidRenderCoords,geodesicAreaCentroidRenderCoords:this.geodesicAreaCentroidRenderCoords,area:this.area,geodesicArea:this.geodesicArea,pathLength:this.pathLength,geodesicPathLength:this.geodesicPathLength,perimeterLength:this.perimeterLength,actualMeasurementMode:this.actualMeasurementMode}}_resize(e){for(e<this._length&&(this.positionsWorld.length=e,this.positionsRender.length=e,this.positionsFittedWorld.length=e,this.positionsFittedRender.length=e,this.positionsGeodesic.length=e,this.positionsSpherical.length=e,this.positionsStereographic.length=e,this.pathSegmentLengths.length=e,this.geodesicPathSegmentLengths.length=e,this.perimeterSegmentLengths.length=e,this._length=e);this._length<e;)this.positionsWorld.push(u()),this.positionsRender.push(u()),this.positionsFittedWorld.push(le()),this.positionsFittedRender.push(u()),this.positionsGeodesic.push(u()),this.positionsSpherical.push(u()),this.positionsStereographic.push(le()),this.pathSegmentLengths.push(0),this.geodesicPathSegmentLengths.push(0),this.perimeterSegmentLengths.push(0),++this._length}_updatePathLengths(e){const i=this.positionsWorld,s=this.pathSegmentLengths;let r=0;const n=this._length;for(let a=0;a<n;++a){const o=s[a]=Qe(i[a],i[(a+1)%n]);(a<n-1||e)&&(r+=o)}return r}_updateGeodesicPathLengths(e,i){const s=this.positionsGeodesic,r=this.geodesicPathSegmentLengths;let n=0;const a=this._length;for(let o=0;o<a;++o){const h=gt(s[o],s[(o+1)%a],i);if(h==null)return null;const c=k(h,"meters").value,p=r[o]=c;(o<a-1||e)&&(n+=p)}return J(n,"meters")}_updateAreaAndPerimeterLength(e,i,s,r){const n=e.renderCoordsHelper,a=this.positionsWorld,o=this.positionsRender,h=this.positionsFittedWorld,c=this.positionsFittedRender,p=this._planeWorldCoords,m=this._centroidRenderCoords;te(o,m),n.worldUpAtPosition(m,this._worldUp),n.worldBasisAtPosition(m,it.X,this._worldTangent),Ve(m,this._worldUp,i,this._worldUp,s),Ve(m,this._worldTangent,i,this._worldTangent,s),a.length>2&&ot(a,p),this.fittingMode=this._selectFittingMode(p,a,this._worldUp,r);let v=0;if(this.fittingMode==="horizontal"){let S=-1/0;o.forEach((V,A)=>{const L=n.getAltitude(o[A]);L>S&&(S=L,v=A)})}const f=a[v];let _=p,C=this._worldTangent;this.fittingMode==="horizontal"?_=this._worldUp:this.fittingMode==="vertical"&&(_=this._tempVec3,C=this._worldUp,ue(p,this._worldUp,_)),Re(this._frame[2],_),ue(C,_,this._frame[0]),Xe(this._frame[1],this._frame[0],this._frame[2]),Ze(this._frame[1],this._frame[1]);const w=this._tempVec3,z=this._tempU,E=this._tempV;for(let S=0;S<this._length;++S){const V=h[S],A=c[S];T(w,a[S],f),ae(V,x(this._frame[0],w),x(this._frame[1],w)),K(z,this._frame[0],V[0]),K(E,this._frame[1],V[1]),ee(w,z,E),ee(w,w,f),j(w,s,A,i)}this.perimeterLength=this._length>0?this._updatePerimeterLengths():null,te(c,this.areaCentroidRenderCoords),j(this.areaCentroidRenderCoords,i,this.areaCentroidWorldCoords,s),this._updateIntersectingSegments(),this.area=this.intersectingSegments.size===0?this._computeArea():null}_updateGeodesicArea(e,i){const{renderCoordsHelper:s,spatialReference:r}=e,{positionsSpherical:n,positionsStereographic:a}=this,o=this._tempVec3,h=at(n,o);if(!h)return void(this.geodesicArea=null);const c=this._tempU,p=this._tempV;pt(o,c,p);for(let m=0;m<this._length;++m){const v=x(n[m],c),f=x(n[m],p),_=x(n[m],o);ae(a[m],v/_,f/_)}K(o,o,He(r).radius),s.toRenderCoords(o,he(r),this.geodesicAreaCentroidRenderCoords),this._updateGeodesicIntersectingSegments(),this.geodesicArea=h&&this.geodesicIntersectingSegments.size===0?this._computeGeodesicArea(i):null}_updatePerimeterLengths(){const e=this.positionsFittedWorld,i=this.perimeterSegmentLengths;let s=0;for(let r=0;r<this._length;++r)s+=i[r]=Je(e[r],e[(r+1)%this._length]);return J(s,this._lengthMeasurementUnit)}_updateIntersectingSegments(){const e=this.positionsFittedWorld,i=this.intersectingSegments;i.clear();for(let s=0;s<this._length;++s)for(let r=s+2;r<this._length;++r){if((r+1)%this._length===s)continue;const n=e[s],a=e[(s+1)%this._length],o=e[r],h=e[(r+1)%this._length];pe(n,a,o,h)&&(i.add(s),i.add(r))}}_computeArea(){const e=this.positionsFittedWorld,i=this.triangleIndices=ce(me(e));let s=0;for(let r=0;r<i.length;r+=3)s+=nt(e[i[r]],e[i[r+1]],e[i[r+2]]);return ne(s,this._areaMeasurementUnit)}_updateGeodesicIntersectingSegments(){const e=this.positionsStereographic,i=this.geodesicIntersectingSegments;i.clear();for(let s=0;s<this._length;++s)for(let r=s+2;r<this._length;++r){if((r+1)%this._length===s)continue;const n=e[s],a=e[(s+1)%this._length],o=e[r],h=e[(r+1)%this._length];pe(n,a,o,h)&&(i.add(s),i.add(r))}}_computeGeodesicArea(e){const i=this.positionsGeodesic,s=this.positionsStereographic,r=this.geodesicTriangleIndices=ce(me(s));let n=0;for(let a=0;a<r.length;a+=3){const o=lt(i[r[a]],i[r[a+1]],i[r[a+2]],e);if(o==null)return null;n+=k(o,"square-meters").value}return ne(n,"square-meters")}_selectFittingMode(e,i,s,r){const n=i.map(p=>Math.abs(ht(e,p))).reduce((p,m)=>Math.max(p,m),0);dt(i,this._tempSphere);const a=n/(2*this._tempSphere[3]),o=a<r.maxRelativeErrorCoplanar,h=a<r.maxRelativeErrorAlmostCoplanar;let c="horizontal";return o?c="oblique":h&&(c=Math.abs(x(s,e))>Math.cos(ke(r.verticalAngleThreshold))?"horizontal":"vertical"),c}_updateCursorSegmentLength(e,i){var r;const s=e.lastPoint;e.isValidPolygon||s==null||i==null?(this.geodesicStagedSegmentLength=null,this.stagedSegmentLength=null):(this.geodesicStagedSegmentLength=_t(s,i),this.stagedSegmentLength=(r=mt(s,i))==null?void 0:r.direct)}_updateMode(e){if(e===Z.Auto){this.actualMeasurementMode="euclidean";let i=0;this.geodesicPathLength!=null&&(i+=this.geodesicPathLength.value),i>li&&(this.actualMeasurementMode="geodesic")}else this.actualMeasurementMode=e===Z.Euclidean?"euclidean":"geodesic";this.geodesicPathLength==null&&(this.actualMeasurementMode="euclidean"),this._mode=e}}function ai(t,e){e.hasZ||(e.z=ct(t,e,"ground")??0)}const li=1e5;let D=class extends se{constructor(e){super(e)}initialize(){this._measurementDataManager=new oi(this.view),this.addHandles([this.analysisViewData.path.on("change",()=>this._update()),R(()=>this.analysisViewData.stagedPoint,()=>this._update(),re),R(()=>this.analysisViewData.mode,()=>this._update(),re)]),this._update()}_update(e=!1){const{analysisViewData:i,view:s}=this,r={maxRelativeErrorCoplanar:.005,maxRelativeErrorAlmostCoplanar:.01,verticalAngleThreshold:80};this._measurementDataManager.update(i.path,i.stagedPoint,s,r,i.mode,e)&&(i.measurementData=this._measurementDataManager.getData())}};l([d({constructOnly:!0})],D.prototype,"view",void 0),l([d({constructOnly:!0})],D.prototype,"analysis",void 0),l([d({constructOnly:!0})],D.prototype,"analysisViewData",void 0),D=l([N("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementController")],D);let $=class extends yt.EventedAccessor{constructor(e={}){super(e),this._version=0,this._internalGeometryChange=!1,this._extent=de()}set areaMeasurement(e){this._set("areaMeasurement",e),e!=null&&this.view!=null&&this._initialize(e,this.view)}set view(e){this._set("view",e),e!=null&&this.areaMeasurement!=null&&this._initialize(this.areaMeasurement,e)}get constructed(){return this.areaMeasurement!=null&&this.view!=null}get version(){return this._version}get isEmptyPolygon(){return!this.constructed||this._editGeometry.components.length===0}get isValidPolygon(){return this.constructed&&this.polygonIsClosed}get extent(){if(this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].vertices.length>0){const e=de(this._extent);return this.forEachVertex(i=>{st(e,i.pos)}),e}return null}get spatialReference(){return this.constructed?this._editGeometry.coordinateHelper.spatialReference:null}_initialize(e,i){this.removeAllHandles(),this.addHandles(R(()=>e.geometry,()=>{this._updateEditGeometryFromModelGeometry(e,i)},Y)),this._makeDirty(!0)}_makeDirty(e=!1){this.notifyChange("polygonIsClosed"),this.notifyChange("isValidPolygon"),this.notifyChange("initialized"),this.notifyChange("extent"),e&&this.notifyChange("numVertices")}_updateEditGeometryFromModelGeometry(e,i){if(this._version++,this._internalGeometryChange)return;this.removeHandles("EditGeometry");let s=e.geometry;if(s!=null){const r=tt(s,i.spatialReference);r==null&&vt(e,s.spatialReference,Ee.getLogger(this)),s=r}this._editGeometryOperations=s!=null?ge.fromGeometry(s,i.state.viewingMode):new ge(new wt("polygon",Lt(!0,!1,i.spatialReference)),i.state.viewingMode),this._makeDirty(!0),this.emit("change"),this.addHandles(this._editGeometry.on("change",r=>{this._makeDirty(r.addedVertices!=null||r.removedVertices!=null),this._internalGeometryChange=!0,e.geometry=this.numVertices>0?this._editGeometry.geometry:null,this._internalGeometryChange=!1}),"EditGeometry")}get _editGeometry(){return this._editGeometryOperations.data}get vertices(){const e=[];return this.forEachVertex(i=>{e.push(i)}),e}get numVertices(){return this.constructed&&this._editGeometry.components.length>0?this._editGeometry.components[0].vertices.length:0}get polygonIsClosed(){return this._editGeometry.components.length>0&&this._editGeometry.components[0].isClosed()}get firstPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getFirstVertex();if(e!=null)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}get lastPoint(){if(this.constructed&&this._editGeometry.components.length>0){const e=this._editGeometry.components[0].getLastVertex();if(e!=null)return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}return null}getVertex(e){if(!this.constructed||this._editGeometry.components.length===0||this._editGeometry.components[0].vertices.length===0)return null;const i=this._editGeometry.components[0].vertices[0];let s=i;do{if(s.index===e)return s;s=s.rightEdge.rightVertex}while(s!==i&&s!=null);return null}getVertexPositionAsPoint(e){return this._editGeometry.coordinateHelper.vectorToPoint(e.pos)}getVertexPositionAsPointFromIndex(e){return this._editGeometry.coordinateHelper.vectorToPoint(this.getVertex(e).pos)}forEachVertex(e){this.constructed&&this._editGeometry.components.length>0&&this._editGeometry.components[0].iterateVertices(e)}forEachVertexPosition(e){const i=this._editGeometry.coordinateHelper;this.forEachVertex((s,r)=>{i.vectorToPoint(s.pos,be),e(be,r)})}clear(){this.areaMeasurement!=null&&(this.areaMeasurement.geometry=null)}add(e){if(!this.constructed)return null;if(this._editGeometry.components.length===0){const s=this.view;this._editGeometry.components.push(new St(s.spatialReference,s.state.viewingMode))}const i=this._editGeometryOperations.appendVertex(this._editGeometry.coordinateHelper.pointToVector(e));return this.emit("change"),i}close(){if(!this.constructed||this._editGeometry.components.length===0)return null;const e=this._editGeometryOperations.closeComponent(this._editGeometry.components[0]);return this.emit("change"),e}ensureContains(e,i=""){let s=!1;if(this._editGeometry.components.forEach(r=>{r.iterateVertices(n=>{n===e&&(s=!0)})}),!s)throw new Error(`vertex doesnt exist ${i}`);return s}setVertexPosition(e,i){if(!this.constructed)return null;const s=this._editGeometryOperations.setVertexPosition(e,this._editGeometry.coordinateHelper.pointToVector(i));return this.emit("change"),s}equals(e){if(this.numVertices!==e.numVertices)return!1;let i=!0;return this.forEachVertexPosition((s,r)=>{const n=e.getVertexPositionAsPointFromIndex(r);s.equals(n)||(i=!1)}),!!i}};l([d({value:null})],$.prototype,"areaMeasurement",null),l([d({value:null})],$.prototype,"view",null),l([d()],$.prototype,"isEmptyPolygon",null),l([d()],$.prototype,"isValidPolygon",null),l([d()],$.prototype,"extent",null),l([d()],$.prototype,"spatialReference",null),l([d()],$.prototype,"numVertices",null),l([d()],$.prototype,"polygonIsClosed",null),$=l([N("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementPathHelper")],$);const be=new Be;function ie(t,e){return k(t,De(t.value,t.unit,e))}function Ae(t,e){return k(t,Te(t,e))}function Te(t,e){const i=hi(e);return Ne(t.value,t.unit,i)}function hi(t){switch(t){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-nautical-miles":return"nautical-miles";case"square-us-feet":return"us-feet";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";case"square-meters":return"meters";case"square-kilometers":return"kilometers"}throw new Error("unhandled area unit")}function ze(t){const e=new ri,{vertex:i,fragment:s,varyings:r}=e;return e.fragment.include(Gt,t),e.include(Rt,t),e.include(It,t),Ot(i,t),e.attributes.add(H.POSITION,"vec3"),e.attributes.add(H.UV0,"vec2"),r.add("vUV","vec2"),r.add("vpos","vec3"),i.main.add(Pe`vUV = uv0;
vpos = position;
forwardViewPosDepth((view * vec4(position, 1.0)).xyz);
gl_Position = proj * view * vec4(position, 1.0);`),s.uniforms.add(new ni("size",n=>n.size)),s.uniforms.add(new $e("color1",n=>n.color1)),s.uniforms.add(new $e("color2",n=>n.color2)),s.include(Tt),s.main.add(Pe`discardByTerrainDepth();
vec2 uvScaled = vUV / (2.0 * size);
vec2 uv = fract(uvScaled - 0.25);
vec2 ab = clamp((abs(uv - 0.5) - 0.25) / fwidth(uvScaled), -0.5, 0.5);
float fade = smoothstep(0.25, 0.5, max(fwidth(uvScaled.x), fwidth(uvScaled.y)));
float t = mix(abs(ab.x + ab.y), 0.5, fade);
fragColor = mix(color2, color1, t);
outputColorHighlightOID(fragColor, vpos);`),e}const di=Object.freeze(Object.defineProperty({__proto__:null,build:ze},Symbol.toStringTag,{value:"Module"}));class ci extends zt{constructor(e,i){super(e,i,new Et(di,()=>Yt(()=>Promise.resolve().then(()=>Li),void 0,import.meta.url)))}initializePipeline(e){const{oitPass:i,transparent:s,polygonOffset:r,output:n}=e,a=i===Ce.NONE,o=i===Ce.FrontFace;return ei({blending:s?kt(i):null,depthTest:{func:Ut(i)},depthWrite:Wt(e),drawBuffers:Ft(i,n),colorWrite:ti,polygonOffset:a||o?r?pi:null:{factor:-1,units:-25}})}}const pi={factor:0,units:-25};class G extends qt{constructor(){super(...arguments),this.transparent=!1,this.writeDepth=!0,this.polygonOffset=!1,this.terrainDepthTest=!1,this.cullAboveTerrain=!1,this.textureCoordinateType=jt.None,this.emissionSource=Ht.None,this.output=Kt.Color,this.occlusionPass=!1,this.objectAndLayerIdColorInstanced=!1}get discardInvisibleFragments(){return this.transparent&&this.writeDepth}}l([O()],G.prototype,"transparent",void 0),l([O()],G.prototype,"writeDepth",void 0),l([O()],G.prototype,"polygonOffset",void 0),l([O()],G.prototype,"terrainDepthTest",void 0),l([O()],G.prototype,"cullAboveTerrain",void 0);class ui extends Zt{constructor(e){super(e,gi),this._configuration=new G,this.produces=new Map([[Q.OPAQUE_MATERIAL,i=>X(i)&&!this.transparent],[Q.TRANSPARENT_MATERIAL,i=>X(i)&&this.transparent&&this.parameters.writeDepth],[Q.TRANSPARENT_MATERIAL_WITHOUT_DEPTH,i=>X(i)&&this.transparent&&!this.parameters.writeDepth]])}getConfiguration(e,i){return this._configuration.transparent=this.transparent,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.polygonOffset=this.parameters.polygonOffset,this._configuration.oitPass=i.oitPass,this._configuration.terrainDepthTest=i.terrainDepthTest,this._configuration.cullAboveTerrain=i.cullAboveTerrain,this._configuration}get visible(){return this.parameters.color1[3]>=Me||this.parameters.color2[3]>=Me}get transparent(){return this.parameters.color1[3]<1||this.parameters.color2[3]<1}createGLMaterial(e){return new mi(e)}createBufferWriter(){return new Qt(Xt)}}class mi extends Bt{beginSlot(e){return this.getTechnique(ci,e)}}class gi extends Jt{constructor(){super(...arguments),this.size=Ge(1,1),this.color1=q(.75,.75,.75,1),this.color2=q(.5,.5,.5,1),this.writeDepth=!0,this.polygonOffset=!1}}class _i extends Dt{constructor(e){super(e),this._checkerBoardMaterial=null,this._renderOccluded=b.OccludeAndTransparent,this._geometry=null,this._size=Ge(1,1),this._color1=q(1,.5,0,.5),this._color2=q(1,1,1,.5),this.applyProperties(e)}get renderOccluded(){return this._renderOccluded}set renderOccluded(e){e!==this._renderOccluded&&(this._renderOccluded=e,this._updateMaterial())}get geometry(){return this._geometry}set geometry(e){this._geometry=e,this.recreateGeometry()}get size(){return this._size}set size(e){Ke(this._size,e),this._updateMaterial()}get color1(){return this._color1}set color1(e){we(e,this._color1)||(Le(this._color1,e),this._updateMaterial())}get color2(){return this._color2}set color2(e){we(e,this._color2)||(Le(this._color2,e),this._updateMaterial())}_updateMaterial(){this._checkerBoardMaterial!=null&&this._checkerBoardMaterial.setParameters({size:this._size,color1:this._color1,color2:this._color2,renderOccluded:this._renderOccluded})}createExternalResources(){this._checkerBoardMaterial=new ui({size:this._size,color1:this._color1,color2:this._color2,writeDepth:!1,polygonOffset:!0,renderOccluded:b.OccludeAndTransparent,isDecoration:this.isDecoration})}destroyExternalResources(){this._checkerBoardMaterial=null}forEachExternalMaterial(e){this._checkerBoardMaterial!=null&&e(this._checkerBoardMaterial)}createGeometries(e){if(this._geometry==null||this._checkerBoardMaterial==null)return;const i=fi;Pt(i,this.transform);const s=this._geometry,r=[],n=u();s.position.forEach(h=>{T(n,h,i),r.push(n[0],n[1],n[2])});const a=[];s.uv.forEach(h=>{a.push(h[0],h[1])});const o=new Nt(this._checkerBoardMaterial,[[H.POSITION,new Se(r,s.triangleIndices,3,!0)],[H.UV0,new Se(a,s.triangleIndices,2,!0)]]);e.addGeometry(o)}}const fi=u();let y=class extends se{get _parameters(){const{accentColor:t,textColor:e}=this.view.effectiveTheme,i=Ct(t),s=_e(t,.5),r=_e(fe(t),.5),n=fe(e,Mt.Low);return{accentColor:i,transparentAccentColor:s,transparentContrastColor:r,intersectingLineColor:[1,.2,0,1],textColor:e,textBackgroundColor:ye(n,.6),textCalloutColor:ye(n,.5),pathLineWidth:3,perimeterLineWidth:2,projectionLineWidth:2,projectionLineStippleSize:5,labelDistance:25}}get visible(){return this.analysisViewData.visible}get _renderUnits(){const t=this.view.renderCoordsHelper.spatialReference;return xe(t)??"meters"}get testData(){}constructor(t){super(t),this._path=null,this._intersectedPath=null,this._perimeter=null,this._intersectedPerimeter=null,this._projectionLines=null,this._measurementArea=null,this._areaLabel=null,this._perimeterLengthLabel=null,this._pathSegments=[],this._perimeterSegments=[],this._origin=u(),this._originTransform=bt(),this.messages=null,this.viewData=wi,this.areaLabel=null,this.perimeterLengthLabel=null,this.loadingMessages=!0}initialize(){const{analysisViewData:t,_parameters:e,view:i}=this;this._path=new I({view:i,attached:!0,width:e.pathLineWidth,polygonOffset:!0,renderOccluded:b.OccludeAndTransparent,isDecoration:!0}),this._intersectedPath=new I({view:i,attached:!0,width:e.pathLineWidth,polygonOffset:!0,renderOccluded:b.OccludeAndTransparent,isDecoration:!0}),this._perimeter=new I({view:i,attached:!0,width:e.perimeterLineWidth,polygonOffset:!0,renderOccluded:b.OccludeAndTransparent,isDecoration:!0}),this._intersectedPerimeter=new I({view:i,attached:!0,width:e.perimeterLineWidth,color:e.intersectingLineColor,polygonOffset:!0,renderOccluded:b.OccludeAndTransparent,isDecoration:!0}),this._projectionLines=new I({view:i,attached:!0,width:e.projectionLineWidth,stipplePattern:ii(e.projectionLineStippleSize),polygonOffset:!0,renderOccluded:b.OccludeAndTransparent,isDecoration:!0}),this._measurementArea=new _i({view:i,attached:!0,isDecoration:!0});const s={attached:!0,view:i,isDecoration:!0};this._areaLabel=new ve({...s,fontSize:B.Large}),this._perimeterLengthLabel=new ve({...s,fontSize:B.Small}),this.addHandles([R(()=>[t.mode,this.visible,t.unit,t.measurementData,t.stagedPoint],()=>this._update(),Y),R(()=>{var r;return(r=i.state)==null?void 0:r.camera},()=>this._updateLabels(),Y),si(()=>this._updateMessageBundle()),R(()=>this._parameters,({accentColor:r,transparentAccentColor:n,transparentContrastColor:a,textColor:o,textBackgroundColor:h,textCalloutColor:c})=>{const{_path:p,_intersectedPath:m,_perimeter:v,_projectionLines:f,_measurementArea:_,_areaLabel:C,_perimeterLengthLabel:w}=this;p.color=r,m.color=r,v.color=r,f.color=r,_.color1=n,_.color2=a,C.textColor=o,C.backgroundColor=h,C.calloutColor=c,w.textColor=o,w.backgroundColor=h,w.calloutColor=c},Ue)]),this._updateMessageBundle()}destroy(){this._measurementArea=M(this._measurementArea),this._path=M(this._path),this._intersectedPath=M(this._intersectedPath),this._perimeter=M(this._perimeter),this._intersectedPerimeter=M(this._intersectedPerimeter),this._areaLabel=M(this._areaLabel),this._perimeterLengthLabel=M(this._perimeterLengthLabel),this._projectionLines=M(this._projectionLines),this.set("view",null)}_update(){if(this.destroyed||!this.view.ready||!this.view.renderCoordsHelper)return;const{analysisViewData:{measurementData:t},analysisViewData:e}=this;t!=null&&(this._updateViewData(t,e.path),this._updateOrigin(),this._updatePathSegments(),this._updatePerimeterSegments(),this._updateArea(),this._updateProjectionLines(),this._updateLabels())}_updateViewData(t,e){const i=t.validMeasurement,s=t.actualMeasurementMode==="geodesic",r=s?t.geodesicArea:t.area;let n=1;if(r){const o=ie(r,this.analysisViewData.unit);n=qe(Math.sqrt(o.value)/Math.sqrt(300)),n*=Math.sqrt(oe(1,o.unit,"square-meters")),n=oe(n,"meters",this._renderUnits)}const a={validMeasurement:i,numVertices:t.numVertices,hasStagedVertex:t.hasStagedVertex,path:e,mode:t.actualMeasurementMode,positionsRender:t.positionsRender,positionsFittedWorld:t.positionsFittedWorld,positionsFittedRender:t.positionsFittedRender,intersectingSegments:s?t.geodesicIntersectingSegments:t.intersectingSegments,triangleIndices:s?t.geodesicTriangleIndices:t.triangleIndices,areaCentroid:s?t.geodesicAreaCentroidRenderCoords:t.areaCentroidRenderCoords,perimeterLengthLabelSegmentIndex:0,area:s?t.geodesicArea:t.area,pathLength:s?t.geodesicPathLength:t.pathLength,perimeterLength:t.perimeterLength,checkerSize:n};this._set("viewData",a)}_updateOrigin(){const t=this.viewData;te(t.positionsRender,this._origin),Vt(this._originTransform,this._origin),this._measurementArea.transform=this._originTransform,this._projectionLines.transform=this._originTransform}_createSegments(t){const e=this.viewData,i=this.view.renderCoordsHelper.spatialReference,s=e.mode,r=[],n=[],a=[],o=e.numVertices,h=e.validMeasurement?o:o-1;for(let p=0;p<h;++p){const m=e[t][p],v=e[t][(p+1)%o];let f=null;switch(s){case"euclidean":f=new xt(m,v);break;case"geodesic":f=new At(m,v,i)}e.intersectingSegments.has(p)?a.push(f):n.push(f),r.push(f)}let c=null;return e.validMeasurement&&e.hasStagedVertex&&h>=2?c=r[r.length-2]:e.hasStagedVertex&&h>=1&&(c=r[r.length-1]),{all:r,nonIntersecting:n,intersecting:a,stagedSegment:c}}_updatePathSegments(){const{visible:t}=this,e=this._createSegments("positionsRender");this._path.setGeometryFromSegments(e.nonIntersecting,this._origin),this._path.visible=t,this._intersectedPath.setGeometryFromSegments(e.intersecting,this._origin),this._intersectedPath.visible=t,this._pathSegments=e.all}_updatePerimeterSegments(){const t=this.visible&&this.viewData.mode==="euclidean",e=this._createSegments("positionsFittedRender");this._perimeter.setGeometryFromSegments(e.nonIntersecting,this._origin),this._perimeter.visible=t,this._intersectedPerimeter.setGeometryFromSegments(e.intersecting,this._origin),this._intersectedPerimeter.visible=t,this._perimeterSegments=e.all}_updateArea(){const t=this.viewData;switch(t.mode){case"euclidean":this._updateAreaEuclidean(t);break;case"geodesic":this._updateAreaGeodesic()}}_updateAreaEuclidean(t){const e=this.visible;t.validMeasurement&&t.intersectingSegments.size===0&&t.triangleIndices?(this._measurementArea.geometry={uv:t.positionsFittedWorld,position:t.positionsFittedRender,triangleIndices:t.triangleIndices},this._measurementArea.size=[t.checkerSize,t.checkerSize],this._measurementArea.visible=e):this._measurementArea.visible=!1}_updateAreaGeodesic(){this._measurementArea.visible=!1}_updateProjectionLines(){const t=this.viewData,e=this.visible,i=t.mode,s=t.numVertices;if(s>0&&t.validMeasurement&&i==="euclidean"){const r=[];for(let n=0;n<s;++n){const a=u();T(a,t.positionsRender[n],this._origin);const o=u();T(o,t.positionsFittedRender[n],this._origin),r.push([a,o])}this._projectionLines.geometry=r,this._projectionLines.visible=e}else this._projectionLines.geometry=null,this._projectionLines.visible=!1}_updateLabels(){if(this.destroyed)return;const{viewData:t}=this,{area:e,path:i}=t;if(!i)return;const s=this.visible,r=yi(this.messages,e,this.analysisViewData.unit);if(r!=null?(this._areaLabel.geometry={type:"point",point:t.areaCentroid},this._areaLabel.text=r,this._areaLabel.visible=t.validMeasurement&&t.intersectingSegments.size===0&&s):this._areaLabel.visible=!1,this._set("areaLabel",r),t.validMeasurement&&t.intersectingSegments.size===0){const n=t.mode==="geodesic"||!t.validMeasurement,a=n?t.pathLength:t.perimeterLength,o=vi(this.messages,a,this.analysisViewData.unit);this._set("perimeterLengthLabel",o),this._perimeterLengthLabel.distance=this._parameters.labelDistance,this._perimeterLengthLabel.anchor="top",this._perimeterLengthLabel.text=o,this._perimeterLengthLabel.visible=!0;let h=!0;for(let c=0;c<t.numVertices;++c){const p=(t.perimeterLengthLabelSegmentIndex+c)%t.numVertices,m=n?this._pathSegments[p]:this._perimeterSegments[p];if(h=!0,this._perimeterLengthLabel.geometry={type:"segment",segment:m,sampleLocation:"center"},!this._perimeterLengthLabel.overlaps(this._areaLabel))break;h=!1}this._perimeterLengthLabel.visible=h&&s}else this._perimeterLengthLabel.visible=!1}_updateMessageBundle(){this.loadingMessages=!0,$t("esri/core/t9n/Units").then(t=>{this.messages=t,this.view&&this._update()}).finally(()=>{this.loadingMessages=!1})}};function yi(t,e,i){return t&&e&&Oe(t,e,De(e.value,e.unit,i))}function vi(t,e,i){return t&&e&&Oe(t,e,Te(e,i))}var B;l([d()],y.prototype,"_parameters",null),l([d()],y.prototype,"view",void 0),l([d()],y.prototype,"messages",void 0),l([d()],y.prototype,"analysis",void 0),l([d()],y.prototype,"viewData",void 0),l([d()],y.prototype,"analysisViewData",void 0),l([d({readOnly:!0})],y.prototype,"areaLabel",void 0),l([d({readOnly:!0})],y.prototype,"perimeterLengthLabel",void 0),l([d()],y.prototype,"loadingMessages",void 0),l([d()],y.prototype,"visible",null),l([d()],y.prototype,"_renderUnits",null),y=l([N("esri.views.3d.analysis.AreaMeasurement.support.AreaMeasurementVisualization")],y),function(t){t[t.Small=12]="Small",t[t.Large=16]="Large"}(B||(B={}));const wi={validMeasurement:!1,numVertices:0,hasStagedVertex:!1,path:null,mode:null,positionsRender:null,positionsFittedWorld:null,positionsFittedRender:null,intersectingSegments:null,triangleIndices:null,areaCentroid:null,perimeterLengthLabelSegmentIndex:null,checkerSize:null,area:null,pathLength:null,perimeterLength:null};let g=class extends We(se){constructor(t){super(t),this.type="area-measurement-view-3d",this.analysis=null,this.measurementData=null,this.lastDraggedVertex=null,this.stagedPoint=null,this.mode=Z.Auto}initialize(){const{analysis:t,view:e}=this;this.path=new $({view:e,areaMeasurement:t}),this.analysisVisualization=new y({view:e,analysis:t,analysisViewData:this}),this.analysisController=new D({view:e,analysis:t,analysisViewData:this})}destroy(){this.analysisController=M(this.analysisController),this.analysisVisualization=M(this.analysisVisualization),this.path.destroy()}get updating(){var t;return!!((t=this.analysisVisualization)!=null&&t.loadingMessages)}get result(){const{measurementData:t}=this;if(t==null)return{area:null,mode:null,perimeter:null};const{unit:e}=this;if(t.actualMeasurementMode==="euclidean"){const{area:r,perimeterLength:n}=t;return{area:r!=null?ie(r,e):null,perimeter:n!=null?Ae(n,e):null,mode:"euclidean"}}const{geodesicArea:i,pathLength:s}=t;return{area:i!=null?ie(i,e):null,perimeter:s!=null?Ae(s,e):null,mode:"geodesic"}}get viewData(){return this.analysisVisualization.viewData}get validMeasurement(){return this.path.isValidPolygon}get unit(){return this.analysis.unit??this._defaultUnit}get testData(){}};l([d({readOnly:!0})],g.prototype,"type",void 0),l([d({constructOnly:!0,nonNullable:!0})],g.prototype,"analysis",void 0),l([d()],g.prototype,"updating",null),l([d()],g.prototype,"analysisVisualization",void 0),l([d()],g.prototype,"analysisController",void 0),l([d()],g.prototype,"result",null),l([d()],g.prototype,"measurementData",void 0),l([d()],g.prototype,"viewData",null),l([d()],g.prototype,"validMeasurement",null),l([d()],g.prototype,"path",void 0),l([d()],g.prototype,"lastDraggedVertex",void 0),l([d()],g.prototype,"stagedPoint",void 0),l([d()],g.prototype,"mode",void 0),l([d()],g.prototype,"unit",null),l([d(Fe)],g.prototype,"_defaultUnit",void 0),g=l([N("esri.views.3d.analysis.AreaMeasurementAnalysisView3D")],g);const Gr=g,Li=Object.freeze(Object.defineProperty({__proto__:null,build:ze},Symbol.toStringTag,{value:"Module"}));export{Gr as default};
