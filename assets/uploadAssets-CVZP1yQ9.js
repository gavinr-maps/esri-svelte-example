import"./geometry-D964gYQX.js";import{V as y,U as f,d as _}from"./assets-C43MgM-v.js";import{j as x,n as G}from"./subclass-BZA_h8Db.js";import{s as p,I as V,M as W,p as K}from"./Accessor-BLX9ikPh.js";import{r as Q}from"./uuid-fwrPAdZb.js";import{m as X,b as Y,a as E,i as N,N as Z}from"./External-B2-Xb0PD.js";import{r as ee,n as se,a as te,d as oe,c as R,l as ne,t as ae,u as re,p as ie}from"./uploadAssetErrors-CA2vkP4k.js";import{i as w,h as ce,e as A,m as pe,a as le}from"./progressUtils-DPI25tXa.js";import{g as ue}from"./arcgisLayerUrl-BX1FE5Hm.js";import{m as me,l as fe,s as de,u as ge,a as ye}from"./infoFor3D-C0hFfS1m.js";import{t as we}from"./meshSpatialReferenceScaleUtils-zow-o13f.js";import{i as he,n as Pe}from"./meshFeatureAttributes-ch2d0Ntd.js";import{g as Te}from"./Point-Cg0-ChZE.js";import"./Extent-Bf3YTe7m.js";import"./tslib.es6-B3Jf3DVX.js";import"./Polyline-D9YkgmM_.js";import"./writer-DNAwXnhG.js";import"./mathUtils-C4_ghTv4.js";import"./jsonMap-0cxwUWs2.js";import"./index-Bh2oEzTI.js";import"./persistableUrlUtils-fa1mAujs.js";import"./MeshTransform-D2t3aEmK.js";import"./mat4-GpOFENPA.js";import"./vec3f64-BLpZdpfb.js";import"./common-DQOJ18NT.js";import"./mat4f64-Dk4dwAN8.js";import"./quat-4pa1e6ds.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-CCm9z-pX.js";import"./vec32-Dvg_eL9J.js";import"./vec42-YcqnINSP.js";import"./axisAngleDegrees-Ci2HA7Jo.js";import"./cast-Bjksrh93.js";const U=1e6,S=20*U,be=2e9,Ae=3;async function je({data:s,name:t,description:e},o,n){let r=null;try{const a=y(o,"uploads"),i=y(a,"info"),{data:l}=await f(i,{query:{f:"json"},responseType:"json"});p(n);const d=ue(o),g=l.maxUploadFileSize*U,m=d?be:g,c=d?Math.min(S,g):S;if(s.size>m)throw new Error("Data too large");const k=y(a,"register"),{data:j}=await f(k,{query:{f:"json",itemName:ve(t),description:e},responseType:"json",method:"post"});if(p(n),!j.success)throw new Error("Registration failed");const{itemID:z}=j.item;r=y(a,z);const B=y(r,"uploadPart"),v=Math.ceil(s.size/c),h=new Array;for(let u=0;u<v;++u)h.push(s.slice(u*c,Math.min((u+1)*c,s.size)));const P=h.slice().reverse(),F=new Array,M=w(v,n==null?void 0:n.onProgress,"uploadItem"),L=async()=>{for(;P.length!==0;){const u=h.length-P.length,T=P.pop(),b=new FormData,H=M.simulate(u,ce(T.size));try{b.append("f","json"),b.append("file",T),b.append("partId",`${u}`);const{data:J}=await f(B,{timeout:0,body:b,responseType:"json",method:"post"});if(p(n),!J.success)throw new Error("Part upload failed")}finally{H.remove()}}};for(let u=0;u<Ae&&P.length!==0;++u)F.push(L());await Promise.all(F);const $=y(r,"commit"),{data:D}=await f($,{query:{f:"json",parts:h.map((u,T)=>T).join(",")},responseType:"json",method:"post"});if(p(n),!D.success)throw new Error("Commit failed");return D.item}catch(a){if(r!=null){const i=y(r,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function ve(s){return s.replaceAll("/","_").replaceAll("\\","_")}async function Fs(s,t,e){var r;const o=s.length;if(!o)return(r=e==null?void 0:e.onProgress)==null||r.call(e,1),[];const n=w(o,e==null?void 0:e.onProgress,"uploadAssets");return Promise.all(s.map((a,i)=>Fe(a,t,{...e,onProgress:n.makeOnProgress(i)})))}async function Fe(s,{layer:t,ongoingUploads:e},o){var a;const n=e.get(s);if(n)return n;if(!He(t))throw new ee;if(De(s,t))return(a=o==null?void 0:o.onProgress)==null||a.call(o,1),s;const r=Se(s,t,o);e.set(s,r);try{await r}finally{e.delete(s)}return s}function De(s,t){const{parsedUrl:e}=t;return e!=null&&s.metadata.externalSources.some(o=>X(o,e))}async function Se(s,t,e){const{metadata:o}=s,{displaySource:n}=o,r=C(n==null?void 0:n.source,t,{checkForConversionRequired:x("enable-feature:georeferenced-uploads")}),a=r!=null?xe(r,t,e):o.externalSources.length>0?Ee(s,t,e):Ne(s,t,e),i=await a;return p(e),s.addExternalSources([i]),s}async function xe(s,t,e){return{source:await I(s,t,e),original:!0,unitConversionDisabled:!0}}async function Ee(s,t,e){const o=O(t),{externalSources:n}=s.metadata,r=Ue(n,t);if(!r)throw new se;const a=w(A.uploadConvertibleSource,e==null?void 0:e.onProgress,"uploadConvertibleSource"),i=await I(r,t,{onProgress:a.makeOnProgress("uploadEditSource")});s.addExternalSources([{source:i,original:!0}]);const l=r.reduce((g,{asset:m})=>m instanceof File?g+m.size:g,0),d=a.simulate("serviceAssetsToGlb",pe(l));try{const{source:g,transform:m,origin:c}=await Be(i,t,o);return s.transform=m,c&&(s.metadata.georeferenced=!0,e!=null&&e.useAssetOrigin&&(s.vertexSpace.origin=[c.x,c.y,c.z??0],s.spatialReference=c.spatialReference)),{source:g,unitConversionDisabled:!0}}finally{d.remove()}}async function Ne(s,t,e){const o=w(A.uploadLocalMesh,e==null?void 0:e.onProgress,"uploadLocalMesh"),n=Re(s,t,{...e,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await q([n],t,{...e,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:s.extent.clone(),original:!0}}async function Re(s,t,e){const o=O(t),n=await s.load(e),r=await n.toBinaryGLTF({origin:n.origin,signal:e==null?void 0:e.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return p(e),{blob:new Blob([r],{type:"model/gltf-binary"}),assetName:`${Q()}.glb`,assetType:o}}function Ue(s,t){for(const e of s){const o=C(e.source,t);if(o)return o}return null}function C(s,{infoFor3D:t},e={}){if(!s)return null;const{supportedFormats:o,editFormats:n}=t,r=Z(s),a=new Array,i=me(t),l=fe(t);let d=!1;for(const g of r){const m=Ce(g,o);if(!m)return null;const{assetType:c}=m;if(e.checkForConversionRequired&&(c===i||c===l))return null;n.includes(c)&&(d=!0),a.push(m)}return d?a:null}function Ce(s,t){const e=Y(s,t);return e?{asset:s,assetType:e}:null}async function I(s,t,e){return q(s.map(o=>Ie(o,e)),t,e)}async function q(s,t,e){const o=w(A.uploadAssetBlobs,e==null?void 0:e.onProgress,"uploadAssetBlobs"),n=await Oe(s,t,{...e,onProgress:o.makeOnProgress("prepareAssetItems")});p(e);const r=n.map(({item:i})=>i),{uploadResults:a}=await ke(r,t,{...e,onProgress:o.makeOnProgress("uploadAssetItems")});return p(e),s.map((i,l)=>ze(n[l],a[l],t))}async function Ie(s,t){const{asset:e,assetType:o}=s;if(e instanceof File)return{blob:e,assetName:e.name,assetType:o};const n=await e.toBlob(t);return p(t),{blob:n,assetName:e.assetName,assetType:o}}async function qe(s,t,e){const{blob:o,assetType:n,assetName:r}=s;let a=null;try{const i=await je({data:o,name:r},t.url,e);p(e),a={assetType:n,assetUploadId:i.itemID}}catch(i){K(i),Je().warnOnce(`Service ${t.url} does not support the REST Uploads API.`)}if(!a){const i=await _(o);if(p(e),!i.isBase64)throw new re;a={assetType:n,assetData:i.data}}if(!a)throw new ie;return{item:a,assetName:r}}function Oe(s,t,e){const o=w(s.length,e==null?void 0:e.onProgress,"prepareAssetItems");return Promise.all(s.map(async(n,r)=>{const a=qe(await n,t,{...e,onProgress:o.makeOnProgress(r)});return p(e),a}))}async function ke(s,t,e){const o=le(e==null?void 0:e.onProgress);try{const n=await f(y(t.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(s)},method:"post",responseType:"json"});if(p(e),n.data.uploadResults.length!==s.length)throw new te(s.length,n.data.uploadResults.length);return n.data}finally{o.remove()}}function ze(s,t,e){const{success:o}=t;if(!o){const{error:d}=t;throw new oe(s.assetName,d)}const{assetHash:n}=t,{assetName:r,item:{assetType:a}}=s,{infoFor3D:{supportedFormats:i}}=e,l=de(a,i);if(!l)throw new R(a);return new E(r,l,[new N(`${e.parsedUrl.path}/assets/${n}`,n)])}async function Be(s,t,e){var r;const o=s.map(({assetName:a,parts:i})=>({assetName:a,assetHash:i[0].partHash}));let n;try{const a=y(t.parsedUrl.path,"convert3D"),i=(r=t.capabilities)==null?void 0:r.operations.supportsAsyncConvert3D;n=(await(i?$e:Le)(a,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:e,async:i},responseType:"json",timeout:0})).data}catch{throw new ne}return Me(t,n)}function Me(s,t){const e={source:t.assets.map(o=>{const n=ge(o.contentType,s.infoFor3D.supportedFormats);if(!n)throw new R(n);return new E(o.assetName,o.contentType,[new N(o.assetURL,o.assetHash)])}),origin:void 0,transform:void 0};if(x("enable-feature:georeferenced-uploads")&&t.transform){if(e.transform=he(t.transform),t.spatialReference){const o=Te.fromJSON(t.spatialReference);e.origin=Pe(t.transform,o)}}else e.transform=we(s.spatialReference);return e}function Le(s,t){return f(s,t)}async function $e(s,t){const e=(await f(s,t)).data.statusUrl;for(;;){const o=(await f(e,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return f(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await V(_e)}}function He(s){return!!s.infoFor3D&&!!s.url}function O({infoFor3D:s}){const t=ye(s);if(!t)throw new ae;return t}function Je(){return G.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const _e=W(1e3);export{Fs as uploadAssets};
