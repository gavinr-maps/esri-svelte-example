import{r as n,m as h,a as u}from"./Accessor-BHnuXKD2.js";import{x as g,M as f,R as m,k as b,E as w,V as y,Y as j,C as k,g as M,j as R}from"./Point-XGrwlf63.js";import{j as p}from"./Polyline-BmuD2-ZN.js";import{j as P}from"./geodesicUtils-Bh_GX0Qj.js";var d;let c=d=class extends p{constructor(e){super(e),this.center=null,this.geodesic=!1,this.numberOfPoints=60,this.radius=1e3,this.radiusUnit="meters"}initialize(){const e=this.center,a=this.numberOfPoints;if(this.hasZ=(e==null?void 0:e.hasZ)??!1,this.rings.length!==0||!e)return;const o=g(this.radius,this.radiusUnit,"meters"),t=e.spatialReference;let i,r="geographic";if(t.isWebMercator?r="webMercator":((t.wkid&&f[t.wkid])!=null||(t.wkt2||t.wkt)&&m(t.wkt2||t.wkt))&&(r="projected"),this.geodesic){let s;switch(r){case"webMercator":s=b(e);break;case"projected":console.error("Creating a geodesic circle requires the center to be specified in web mercator or geographic coordinate system");break;case"geographic":s=e}i=this._createGeodesicCircle(s,o,a),r==="webMercator"&&(i=w(i))}else{let s;r==="webMercator"||r==="projected"?s=o/y(e.spatialReference):r==="geographic"&&(s=j(o,"meters",k(e.spatialReference).radius)),i=this._createPlanarCircle(e,s,a)}this.spatialReference=i.spatialReference,this.addRing(i.rings[0])}clone(){const{center:e,numberOfPoints:a,radius:o,radiusUnit:t,geodesic:i}=this;return new d({center:e==null?void 0:e.clone(),numberOfPoints:a,radius:o,radiusUnit:t,geodesic:i})}_createGeodesicCircle(e,a,o){const t=[],i=[e.x,e.y];for(let r=0;r<360;r+=360/o){const s=this.hasZ?[0,0,e.z??0]:[0,0];P(s,i,r,a,M.WGS84),t.push(s)}return t.push(t[0]),new p({rings:[t]})}_createPlanarCircle(e,a,o){const t=[],i=2*Math.PI/o;for(let r=0;r<o;++r){const s=i*r,l=[e.x+Math.cos(-s)*a,e.y+Math.sin(-s)*a];this.hasZ&&l.push(e.z??0),t.push(l)}return t.push(t[0]),new p({spatialReference:e.spatialReference,rings:[t]})}};n([h({type:R})],c.prototype,"center",void 0),n([h()],c.prototype,"geodesic",void 0),n([h()],c.prototype,"numberOfPoints",void 0),n([h()],c.prototype,"radius",void 0),n([h()],c.prototype,"radiusUnit",void 0),c=d=n([u("esri.geometry.Circle")],c);const U=c;export{U as b};
