import{g as V,B as X,r as p,m as l,a as Y}from"./Accessor-BmwT4B0c.js";import{s as U}from"./mathUtils-Cfq9PL9W.js";import{x as D}from"./Point-Cz2JYYmX.js";import{w as E}from"./vec32-Dvg_eL9J.js";import{U as F,O as G}from"./projection-CyCZAIaD.js";import{P as W}from"./normalizeUtils-BTGdXlpz.js";import{u as B}from"./scaleUtils-DPfHG2g0.js";import{l as H,u as I,t as T}from"./gridUtils-DPJnnI3Y.js";import{f as d,d as _,c as k}from"./RightAngleSnappingHint-BepRvd6S.js";import{r as j,a as q}from"./SnappingManager-DoaI-UDx.js";import"./cast-CsZslgGN.js";import"./index-4eY77cms.js";import"./JSONSupport-DcrLLGjL.js";import"./writer-DKgfqj4X.js";import"./vec3f64-BLpZdpfb.js";import"./common-DQOJ18NT.js";import"./SimpleObservable-CvOkykwM.js";import"./Extent-g5W9hy0j.js";import"./Polyline-s-JzsQqo.js";import"./projectBuffer-CQnuEMuP.js";import"./geodesicConstants-RQL9oKdk.js";import"./normalizeUtilsCommon-lGDszWRI.js";import"./jsonUtils-CwFG8yN4.js";import"./utils-YowqfOgk.js";import"./utils-B-dlKIhi.js";import"./geodesicUtils-Cvz9v8ds.js";import"./Color-VJEMvW-n.js";import"./colorUtils-Rxh2V3ai.js";import"./reactiveUtils-XM7cS2OP.js";import"./Evented-Dw4_VOGn.js";import"./opacityUtils-Dim20wpZ.js";import"./Promise-DfET-uns.js";import"./timeUtils-C1c_L2Fd.js";import"./projectVectorToVector-CCOy_B5J.js";import"./projectPointToVector-BoxjK-qy.js";import"./Query-B_2mhyL4.js";import"./enumeration-DpvDkLNI.js";import"./typeUtils-B6WBEKDM.js";import"./Field-BDG0QV_T.js";import"./fieldType-CBeoJWlv.js";import"./FullTextSearch-CBnxSwz4.js";import"./Clonable-Z-AWS-16.js";import"./TimeExtent-BO6BsF_x.js";import"./InputManager-DZ3jJnlx.js";import"./Queue-BQesTh_6.js";import"./signal-CySMLEX9.js";import"./keybindings-CTmT1RTo.js";import"./utils-BjSXFjBJ.js";import"./Version-Cd3TlGH0.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Dy6m9Nrb.js";import"./vec42-YcqnINSP.js";import"./vec4f64-o2zAXfmz.js";import"./plane-CpXmOyqq.js";import"./mat3f64-BBpwCtoL.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-CCm9z-pX.js";import"./mathUtils-BgCEaV43.js";import"./sphere-Cin5efBj.js";import"./mat4-Fi6iAz29.js";import"./mat3-CR8GKnhD.js";import"./elevationInfoUtils-D26wVF2d.js";import"./unitConversionUtils-rg07EgOm.js";import"./lengthUtils-_77UiyVF.js";import"./geometry2dUtils-D9Oax6Qb.js";import"./screenUtils-_ZIvrt5o.js";import"./viewUtils-CV6QVz7y.js";let n=class extends V{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var t;return(t=this.grid)!=null&&t.rotateWithMap?0:U(this.view.rotation??0)}get gridRotation(){var t;return U(((t=this.grid)==null?void 0:t.rotation)??0)}get gridCenter(){var r;const{spatialReference:t,grid:i}=this;if(!i||!t||!F(i.center.spatialReference,t))return null;try{const e=G(i.center,t),o=t.isWrappable&&((r=this.view)==null?void 0:r.center)!=null?W(e.x,this.view.center.x,t):e.x;return d(o,e.y,e.z)}catch(e){return X.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",e),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:i}=this;if(!i||!t)return 1;const{majorLineInterval:r,dynamicScaling:e}=i;return r<1?null:H(r,t,e)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?D(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*B(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?I(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:i}=this;return i&&t?t/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,i,r){var m;const{options:e,view:o}=this;if(!(e!=null&&e.effectiveGridEnabled)||!o.grid||(m=r.feature)!=null&&m.attributes&&_ in r.feature.attributes)return[];const s=r.coordinateHelper.arrayToPoint(t),a=e.distance*(r.pointer==="touch"?e.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(s,a)}fetchCandidatesSync(t,i){const r=[],{grid:e,effectiveViewRotation:o,gridRotation:s,gridCenter:a,viewMetersPerPixel:m,viewMetersPerSRUnit:f,offsetScaleFactor:S,spatialReference:g,gridMetersPerStride:C,pixelsPerStride:$}=this;if(!(e&&m&&f&&a&&g&&S&&C&&$)||!e.dynamicScaling&&$<T||!F(t.spatialReference,g))return r;const y=G(t,g),L=d(y.x,y.y,y.z),u=h(L,-s,a,-o),P=C/f*S,c=A(u,P,a),{shouldSnapX:w,shouldSnapY:v}=J(c,u,i,m,f);if(!w&&!v)return[];const O=d((w?c:u)[0],(v?c:u)[1]),M=h(O,s,a,o),b=h(c,s,a,o);if(v){const R=z(c,u,P,"y"),x=h(R,s,a,o);r.push(new j({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}if(w){const R=z(c,u,P,"x"),x=h(R,s,a,o);r.push(new j({lineStart:b,lineEnd:x,targetPoint:M,isDraped:!1}))}return w&&v&&r.push(new q(M,r[0],r[1],!1)),r}};p([l({constructOnly:!0})],n.prototype,"view",void 0),p([l()],n.prototype,"options",void 0),p([l()],n.prototype,"grid",null),p([l()],n.prototype,"effectiveViewRotation",null),p([l()],n.prototype,"gridRotation",null),p([l()],n.prototype,"gridCenter",null),p([l()],n.prototype,"offsetScaleFactor",null),p([l()],n.prototype,"spatialReference",null),p([l()],n.prototype,"gridMetersPerStride",null),p([l()],n.prototype,"viewMetersPerPixel",null),p([l()],n.prototype,"viewMetersPerSRUnit",null),p([l()],n.prototype,"pixelsPerStride",null),p([l()],n.prototype,"updating",null),n=p([Y("esri.views.interactive.snapping.GridSnappingEngine")],n);const h=(t,i,r,e)=>{const o=k(t[0],t[1],t[2]);return E(o,E(o,o,r,i),r,e)},A=(t,i,r)=>{const e=(t[0]-r[0])/i,o=(t[1]-r[1])/i,s=Math.trunc(e),a=Math.trunc(o),m=Math.round(e%1),f=Math.round(o%1),S=r[0]+(s+m)*i,g=r[1]+(a+f)*i;return d(S,g)},J=(t,i,r,e,o)=>{if(e<=0)return{shouldSnapX:!1,shouldSnapY:!1};const s=(t[0]-i[0])/e,a=(t[1]-i[1])/e;return{shouldSnapX:Math.abs(s*o)<r,shouldSnapY:Math.abs(a*o)<r}},z=(t,i,r,e)=>{if(e==="y"){const s=i[0]>t[0]?1:-1;return d(t[0]+r*s,t[1])}const o=i[1]>t[1]?1:-1;return d(t[0],t[1]+r*o)};export{n as GridSnappingEngine};
