import{h as z,c as m,n as k}from"./subclass-BR3PhgZG.js";import{C as x,A as K,c as R,P as s,B as M,G as d,M as g,U as G,L as T,D as q,V as F}from"./enums-BlUEVwJR.js";const j=()=>k.getLogger("esri.views.webgl.checkWebGLError");function Z(t,e){switch(e){case t.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case t.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case t.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case t.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case t.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case t.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}const H=!!z("enable-feature:webgl-debug");function $(){return H}function ue(){return H}function S(t){if($()){const e=t.getError();if(e){const r=Z(t,e),a=new Error().stack;j().error(new m("webgl-error","WebGL error occurred",{message:r,stack:a}))}}}function J(t){switch(t){case x.BYTE:case x.UNSIGNED_BYTE:return 1;case x.SHORT:case x.UNSIGNED_SHORT:case x.HALF_FLOAT:return 2;case x.FLOAT:case x.INT:case x.UNSIGNED_INT:return 4}}function Q(t){const e=t.gl;switch(e.getError()){case e.NO_ERROR:return null;case e.INVALID_ENUM:return"An unacceptable value has been specified for an enumerated argument";case e.INVALID_VALUE:return"An unacceptable value has been specified for an argument";case e.INVALID_OPERATION:return"The specified command is not allowed for the current state";case e.INVALID_FRAMEBUFFER_OPERATION:return"The currently bound framebuffer is not framebuffer complete";case e.OUT_OF_MEMORY:return"Not enough memory is left to execute the command";case e.CONTEXT_LOST_WEBGL:return"WebGL context is lost"}return"Unknown error"}function he(t,e){return t.vertexBuffers[e].usedMemory/ee(t.layout[e])}function ee(t){return t[0].stride}function de(t,e,r,a,i=0){var _;const c=t.gl;t.bindBuffer(r);for(const n of a){const o=e.get(n.name);if(o===void 0){console.warn(`There is no location for vertex attribute '${n.name}' defined.`);continue}const u=i*n.stride;if(n.count<=4)c.vertexAttribPointer(o,n.count,n.type,n.normalized,n.stride,n.offset+u),c.enableVertexAttribArray(o),n.divisor>0&&t.gl.vertexAttribDivisor(o,n.divisor);else if(n.count===9)for(let l=0;l<3;l++)c.vertexAttribPointer(o+l,3,n.type,n.normalized,n.stride,n.offset+12*l+u),c.enableVertexAttribArray(o+l),n.divisor>0&&t.gl.vertexAttribDivisor(o+l,n.divisor);else if(n.count===16)for(let l=0;l<4;l++)c.vertexAttribPointer(o+l,4,n.type,n.normalized,n.stride,n.offset+16*l+u),c.enableVertexAttribArray(o+l),n.divisor>0&&((_=t.gl)==null||_.vertexAttribDivisor(o+l,n.divisor));else console.error("Unsupported vertex attribute element count: "+n.count);if($()){const l=Q(t),h=J(n.type),p=n.offset,E=Math.round(h/p)!==h/p?`. Offset not a multiple of stride. DataType requires ${h} bytes, but descriptor has an offset of ${p}`:"";l&&console.error(`Unable to bind vertex attribute "${n.name}" with baseInstanceOffset ${u}${E}:`,l,n)}}}function pe(t,e,r,a){var c,_,n;const i=t.gl;t.bindBuffer(r);for(const o of a){const u=e.get(o.name);if(o.count<=4)i.disableVertexAttribArray(u),o.divisor&&o.divisor>0&&((c=t.gl)==null||c.vertexAttribDivisor(u,0));else if(o.count===9)for(let l=0;l<3;l++)i.disableVertexAttribArray(u+l),o.divisor&&o.divisor>0&&((_=t.gl)==null||_.vertexAttribDivisor(u+l,0));else if(o.count===16)for(let l=0;l<4;l++)i.disableVertexAttribArray(u+l),o.divisor&&o.divisor>0&&((n=t.gl)==null||n.vertexAttribDivisor(u+l,0));else console.error("Unsupported vertex attribute element count: "+o.count)}t.unbindBuffer(K.ARRAY_BUFFER)}function te(t){switch(t){case d.ALPHA:case d.LUMINANCE:case d.RED:case d.RED_INTEGER:case s.R8:case s.R8I:case s.R8UI:case s.R8_SNORM:case M.STENCIL_INDEX8:return 1;case d.LUMINANCE_ALPHA:case d.RG:case d.RG_INTEGER:case s.RGBA4:case s.R16F:case s.R16I:case s.R16UI:case s.RG8:case s.RG8I:case s.RG8UI:case s.RG8_SNORM:case s.RGB565:case s.RGB5_A1:case M.DEPTH_COMPONENT16:return 2;case d.DEPTH_COMPONENT:case d.RGB:case d.RGB_INTEGER:case s.RGB8:case s.RGB8I:case s.RGB8UI:case s.RGB8_SNORM:case s.SRGB8:case M.DEPTH_COMPONENT24:return 3;case d.DEPTH_STENCIL:case d.DEPTH24_STENCIL8:case d.RGBA:case d.RGBA_INTEGER:case s.RGBA8:case s.R32F:case s.R11F_G11F_B10F:case s.RG16F:case s.R32I:case s.R32UI:case s.RG16I:case s.RG16UI:case s.RGBA8I:case s.RGBA8UI:case s.RGBA8_SNORM:case s.SRGB8_ALPHA8:case s.RGB9_E5:case s.RGB10_A2UI:case s.RGB10_A2:case M.DEPTH_STENCIL:case M.DEPTH_COMPONENT32F:case M.DEPTH24_STENCIL8:return 4;case M.DEPTH32F_STENCIL8:return 5;case s.RGB16F:case s.RGB16I:case s.RGB16UI:return 6;case s.RG32F:case s.RG32I:case s.RG32UI:case s.RGBA16F:case s.RGBA16I:case s.RGBA16UI:return 8;case s.RGB32F:case s.RGB32I:case s.RGB32UI:return 12;case s.RGBA32F:case s.RGBA32I:case s.RGBA32UI:return 16;case R.COMPRESSED_RGB_S3TC_DXT1_EXT:case R.COMPRESSED_RGBA_S3TC_DXT1_EXT:return .5;case R.COMPRESSED_RGBA_S3TC_DXT3_EXT:case R.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case R.COMPRESSED_R11_EAC:case R.COMPRESSED_SIGNED_R11_EAC:case R.COMPRESSED_RGB8_ETC2:case R.COMPRESSED_SRGB8_ETC2:case R.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case R.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return .5;case R.COMPRESSED_RG11_EAC:case R.COMPRESSED_SIGNED_RG11_EAC:case R.COMPRESSED_RGBA8_ETC2_EAC:case R.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}var O;(function(t){t[t.Texture=0]="Texture",t[t.RenderBuffer=1]="RenderBuffer"})(O||(O={}));class re{constructor(e=0,r=e){this.width=e,this.height=r,this.target=g.TEXTURE_2D,this.pixelFormat=d.RGBA,this.dataType=G.UNSIGNED_BYTE,this.samplingMode=T.LINEAR,this.wrapMode=q.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.depth=1,this.isImmutable=!1}}function ie(t){return t.width<=0||t.height<=0?0:Math.round(t.width*t.height*(t.hasMipmap?4/3:1)*(t.internalFormat==null?4:te(t.internalFormat)))}class B extends re{constructor(e,r){switch(super(),this.context=e,Object.assign(this,r),this.internalFormat){case s.R16F:case s.R16I:case s.R16UI:case s.R32F:case s.R32I:case s.R32UI:case s.R8_SNORM:case s.R8:case s.R8I:case s.R8UI:this.pixelFormat=d.RED}}static validate(e,r){return new B(e,r)}}const C=4;let se=class f{constructor(e,r=null,a=null){if(this.type=O.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,"context"in e)this._descriptor=e,a=r;else{const i=B.validate(e,r);if(!i)throw new m("Texture descriptor invalid");this._descriptor=i}this._descriptor.target===g.TEXTURE_CUBE_MAP?this._setDataCubeMap(a):this.setData(a)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return ie(this._descriptor)}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._glName&&this._descriptor.context.instanceCounter.decrement(F.Texture,this),this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null)}release(){this.dispose()}resize(e,r){const a=this._descriptor;if(a.width!==e||a.height!==r){if(this._wasImmutablyAllocated)throw new m("Immutable textures can't be resized!");a.width=e,a.height=r,this._descriptor.target===g.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(e=null){for(let r=g.TEXTURE_CUBE_MAP_POSITIVE_X;r<=g.TEXTURE_CUBE_MAP_NEGATIVE_Z;r++)this._setData(e,r)}setData(e){this._setData(e)}_setData(e,r){var u;if(!((u=this._descriptor.context)!=null&&u.gl))return;const a=this._descriptor.context.gl;S(a),this._glName||(this._glName=a.createTexture(),this._glName&&this._descriptor.context.instanceCounter.increment(F.Texture,this)),e===void 0&&(e=null);const i=this._descriptor,c=r??i.target,_=b(c);e===null&&(i.width=i.width||C,i.height=i.height||C,_&&(i.depth=i.depth??1));const n=this._descriptor.context.bindTexture(this,f.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(f.TEXTURE_UNIT_FOR_UPDATES),P(i),this._configurePixelStorage(),S(a);const o=this._deriveInternalFormat();if(y(e)){let l="width"in e?e.width:e.codedWidth,h="height"in e?e.height:e.codedHeight;const p=1;e instanceof HTMLVideoElement&&(l=e.videoWidth,h=e.videoHeight),i.width&&i.height,_&&i.depth,i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(c,o,i.hasMipmap,l,h,p),this._texImage(c,0,o,l,h,p,e),S(a),i.hasMipmap&&this.generateMipmap(),i.width||(i.width=l),i.height||(i.height=h),_&&!i.depth&&(i.depth=p)}else{const{width:l,height:h,depth:p}=i;if(l==null||h==null)throw new m("Width and height must be specified!");if(_&&p==null)throw new m("Depth must be specified!");if(i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(c,o,i.hasMipmap,l,h,p),U(e)){const E=e.levels,N=X(c,l,h,p),I=Math.min(N-1,E.length-1);a.texParameteri(i.target,this._descriptor.context.gl.TEXTURE_MAX_LEVEL,I);const A=o;if(!oe(A))throw new m("Attempting to use compressed data with an uncompressed format!");this._forEachMipmapLevel((D,w,V,W)=>{const Y=E[Math.min(D,E.length-1)];this._compressedTexImage(c,D,A,w,V,W,Y)},I)}else this._texImage(c,0,o,l,h,p,e),S(a),i.hasMipmap&&this.generateMipmap()}L(a,this._descriptor),v(a,this._descriptor),ae(this._descriptor.context,this._descriptor),S(a),this._descriptor.context.bindTexture(n,f.TEXTURE_UNIT_FOR_UPDATES)}updateData(e,r,a,i,c,_,n=0){_||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const o=this._descriptor,u=this._deriveInternalFormat(),{context:l,pixelFormat:h,dataType:p,target:E,isImmutable:N}=o;if(N&&!this._wasImmutablyAllocated)throw new m("Cannot update immutable texture before allocation!");const I=l.bindTexture(this,f.TEXTURE_UNIT_FOR_UPDATES,!0);(r<0||a<0||r+i>o.width||a+c>o.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:A}=l;n&&A.pixelStorei(A.UNPACK_SKIP_ROWS,n),y(_)?A.texSubImage2D(E,e,r,a,i,c,h,p,_):U(_)?A.compressedTexSubImage2D(E,e,r,a,i,c,u,_.levels[e]):A.texSubImage2D(E,e,r,a,i,c,h,p,_),n&&A.pixelStorei(A.UNPACK_SKIP_ROWS,0),l.bindTexture(I,f.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(e,r,a,i,c,_,n,o){o||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const u=this._descriptor,l=this._deriveInternalFormat(),{context:h,pixelFormat:p,dataType:E,isImmutable:N,target:I}=u;if(N&&!this._wasImmutablyAllocated)throw new m("Cannot update immutable texture before allocation!");b(I)||console.warn("Attempting to set 3D texture data on a non-3D texture");const A=h.bindTexture(this,f.TEXTURE_UNIT_FOR_UPDATES);h.setActiveTexture(f.TEXTURE_UNIT_FOR_UPDATES),(r<0||a<0||i<0||r+c>u.width||a+_>u.height||i+n>u.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:D}=h;if(U(o))o=o.levels[e],D.compressedTexSubImage3D(I,e,r,a,i,c,_,n,l,o);else{const w=o;D.texSubImage3D(I,e,r,a,i,c,_,n,p,E,w)}h.bindTexture(A,f.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const e=this._descriptor;if(!e.hasMipmap){if(this._wasImmutablyAllocated)throw new m("Cannot add mipmaps to immutable texture after allocation");e.hasMipmap=!0,this._samplingModeDirty=!0,P(e)}e.samplingMode===T.LINEAR?(this._samplingModeDirty=!0,e.samplingMode=T.LINEAR_MIPMAP_NEAREST):e.samplingMode===T.NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=T.NEAREST_MIPMAP_NEAREST);const r=this._descriptor.context.bindTexture(this,f.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(f.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(e.target),this._descriptor.context.bindTexture(r,f.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){const e=this._descriptor;if(e.hasMipmap){if(this._wasImmutablyAllocated)throw new m("Cannot delete mipmaps to immutable texture after allocation");e.hasMipmap=!1,this._samplingModeDirty=!0,P(e)}e.samplingMode===T.LINEAR_MIPMAP_NEAREST?(this._samplingModeDirty=!0,e.samplingMode=T.LINEAR):e.samplingMode===T.NEAREST_MIPMAP_NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=T.NEAREST)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,P(this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const e=this._descriptor,r=e.context.gl;this._samplingModeDirty&&(L(r,e),this._samplingModeDirty=!1),this._wrapModeDirty&&(v(r,e),this._wrapModeDirty=!1)}_deriveInternalFormat(){if(this._descriptor.internalFormat!=null)return this._descriptor.internalFormat===d.DEPTH_STENCIL&&(this._descriptor.internalFormat=d.DEPTH24_STENCIL8),this._descriptor.internalFormat;switch(this._descriptor.dataType){case G.FLOAT:switch(this._descriptor.pixelFormat){case d.RGBA:return this._descriptor.internalFormat=s.RGBA32F;case d.RGB:return this._descriptor.internalFormat=s.RGB32F;default:throw new m("Unable to derive format")}case G.UNSIGNED_BYTE:switch(this._descriptor.pixelFormat){case d.RGBA:return this._descriptor.internalFormat=s.RGBA8;case d.RGB:return this._descriptor.internalFormat=s.RGB8}}return this._descriptor.internalFormat=this._descriptor.pixelFormat===d.DEPTH_STENCIL?d.DEPTH24_STENCIL8:this._descriptor.pixelFormat}_configurePixelStorage(){const e=this._descriptor.context.gl,{unpackAlignment:r,flipped:a,preMultiplyAlpha:i}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,r),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,a?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_texStorage(e,r,a,i,c,_){const{gl:n}=this._descriptor.context;if(!ne(r))throw new m("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const o=a?X(e,i,c,_):1;if(b(e)){if(_==null)throw new m("Missing depth dimension for 3D texture upload");n.texStorage3D(e,o,r,i,c,_)}else n.texStorage2D(e,o,r,i,c);this._wasImmutablyAllocated=!0}_texImage(e,r,a,i,c,_,n){const o=this._descriptor.context.gl,u=b(e),{isImmutable:l,pixelFormat:h,dataType:p}=this._descriptor;if(l){if(n!=null){const E=n;if(u){if(_==null)throw new m("Missing depth dimension for 3D texture upload");o.texSubImage3D(e,r,0,0,0,i,c,_,h,p,E)}else o.texSubImage2D(e,r,0,0,i,c,h,p,E)}}else{const E=n;if(u){if(_==null)throw new m("Missing depth dimension for 3D texture upload");o.texImage3D(e,r,a,i,c,_,0,h,p,E)}else o.texImage2D(e,r,a,i,c,0,h,p,E)}}_compressedTexImage(e,r,a,i,c,_,n){const o=this._descriptor.context.gl,u=b(e);if(this._descriptor.isImmutable){if(n!=null)if(u){if(_==null)throw new m("Missing depth dimension for 3D texture upload");o.compressedTexSubImage3D(e,r,0,0,0,i,c,_,a,n)}else o.compressedTexSubImage2D(e,r,0,0,i,c,a,n)}else if(u){if(_==null)throw new m("Missing depth dimension for 3D texture upload");o.compressedTexImage3D(e,r,a,i,c,_,0,n)}else o.compressedTexImage2D(e,r,a,i,c,0,n)}_forEachMipmapLevel(e,r=1/0){let{width:a,height:i,depth:c,hasMipmap:_,target:n}=this._descriptor;const o=n===g.TEXTURE_3D;if(a==null||i==null||o&&c==null)throw new m("Missing texture dimensions for mipmap calculation");for(let u=0;e(u,a,i,c),_&&(a!==1||i!==1||o&&c!==1)&&!(u>=r);++u)a=Math.max(1,a>>1),i=Math.max(1,i>>1),o&&(c=Math.max(1,c>>1))}};function P(t){(t.width!=null&&t.width<0||t.height!=null&&t.height<0||t.depth!=null&&t.depth<0)&&console.error("Negative dimension parameters are not allowed!")}function L(t,e){let r=e.samplingMode,a=e.samplingMode;r===T.LINEAR_MIPMAP_NEAREST||r===T.LINEAR_MIPMAP_LINEAR?(r=T.LINEAR,e.hasMipmap||(a=T.LINEAR)):r!==T.NEAREST_MIPMAP_NEAREST&&r!==T.NEAREST_MIPMAP_LINEAR||(r=T.NEAREST,e.hasMipmap||(a=T.NEAREST)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,r),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,a)}function v(t,e){typeof e.wrapMode=="number"?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}function ae(t,e){const r=t.capabilities.textureFilterAnisotropic;r&&t.gl.texParameterf(e.target,r.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}function ne(t){return t in s}function oe(t){return t in R}function U(t){return t!=null&&"type"in t&&t.type==="compressed"}function ce(t){return t!=null&&"byteLength"in t}function y(t){return t!=null&&!U(t)&&!ce(t)}function b(t){return t===g.TEXTURE_3D||t===g.TEXTURE_2D_ARRAY}function X(t,e,r,a=1){let i=Math.max(e,r);return t===g.TEXTURE_3D&&(i=Math.max(i,a)),Math.round(Math.log(i)/Math.LN2)+1}se.TEXTURE_UNIT_FOR_UPDATES=0;export{de as E,pe as _,te as a,O as b,se as c,$ as d,re as e,ue as f,he as i,H as n,Q as o,J as s,S as u};
