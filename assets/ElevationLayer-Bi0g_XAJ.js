const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./ElevationQuery-ClnmdMRA.js","./reactiveUtils-BR0C1Kq4.js","./Accessor-BHnuXKD2.js","./Evented-DCWccWGU.js","./SimpleObservable-7oieNGD8.js","./Point-XGrwlf63.js","./cast-BA_-jlhc.js","./index-tefRSezt.js","./index-Cx51aysm.css","./JSONSupport-CGdeqxpk.js","./writer-B2bQV2uU.js","./Polyline-BmuD2-ZN.js","./Extent-CBBGeHb-.js","./mathUtils-DV9iOXpW.js","./projection-B2I9Bzj_.js","./vec3f64-BLpZdpfb.js","./projectBuffer-DOU0xvVi.js","./geodesicConstants-yASAK_zX.js","./ElevationSamplerData-ejt2NMnl.js","./ElevationTile-BVRMxCrp.js","./TileKey-DZd6gJy7.js"])))=>i.map(i=>d[i]);
import{_ as n}from"./index-tefRSezt.js";import{K as v,s as f,V as w,D as m,r as a,m as p,a as g}from"./Accessor-BHnuXKD2.js";import{P as d,v as T}from"./cast-BA_-jlhc.js";import{S}from"./MultiOriginJSONSupport-nGLpCFeg.js";import{o as c}from"./writer-B2bQV2uU.js";import{v as b}from"./HeightModelInfo-B3GZyQFz.js";import{f as _}from"./Layer-C9uQlTBT.js";import{p as $}from"./ArcGISCachedService-Ba-PnMQ3.js";import{l as I}from"./ArcGISService-BHkTabnw.js";import{b as O}from"./OperationalLayer-Bts9W3HA.js";import{j as E}from"./PortalLayer-jhi5QQgB.js";import{y as D}from"./commonProperties-C0eC30J9.js";import{s as L,a as j}from"./LercDecoder-BneQW32N.js";import"./JSONSupport-CGdeqxpk.js";import"./Point-XGrwlf63.js";import"./Evented-DCWccWGU.js";import"./Identifiable-BrT7zvUW.js";import"./Portal-CTRRujjZ.js";import"./Promise-CmQqe-ke.js";import"./Extent-CBBGeHb-.js";import"./TimeExtent-J5qnUFx_.js";import"./timeUtils-D2X862bk.js";import"./TileInfo-CRfZy5zq.js";import"./Polyline-BmuD2-ZN.js";import"./mathUtils-DV9iOXpW.js";import"./TileKey-DZd6gJy7.js";import"./TileInfoTilemapCache-ChbmPWxO.js";import"./TilemapCache-DSmTO5V1.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./LRUCache-DS2O1kTf.js";import"./MemCache-CDoaVBHf.js";import"./reactiveUtils-BR0C1Kq4.js";import"./SimpleObservable-7oieNGD8.js";import"./memoryEstimations-5gFNwkKK.js";import"./layerContainerType-C5CzMsLd.js";import"./layerUtils-dJgsXxkC.js";import"./PortalItem-CXk7DqVv.js";import"./portalItemUtils-rm7sAgcm.js";import"./projection-B2I9Bzj_.js";import"./vec3f64-BLpZdpfb.js";import"./projectBuffer-DOU0xvVi.js";import"./geodesicConstants-yASAK_zX.js";import"./ElevationInfo-Di4W6v5U.js";import"./opacityUtils-CSd4XoR2.js";import"./unitConversionUtils-C4AR5obr.js";import"./lengthUtils-DjJgJFRg.js";import"./AttributeTableTemplate-B7rH2qLr.js";import"./WorkerHandle-B2QLNs3X.js";import"./workers-D8Q3pEzK.js";import"./Queue-BOnccek2.js";import"./intl-Do3GEEJ7.js";let o=class extends $(I(O(E(S(_))))){constructor(...t){super(...t),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=L()}normalizeCtorArgs(t,r){return typeof t=="string"?{url:t,...r}:t}destroy(){this._lercDecoder=v(this._lercDecoder)}readCapabilities(t,r){const e=r.capabilities&&r.capabilities.split(",").map(i=>i.toLowerCase().trim());return e?{operations:{supportsTileMap:e.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(t,r){let e=r.currentVersion;return e||(e=9.3),e}load(t){const r=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{if(e.typeKeywords){for(let i=0;i<e.typeKeywords.length;i++)if(e.typeKeywords[i].toLowerCase()==="elevation 3d layer")return!0}throw new f("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},t).catch(w).then(()=>this._fetchImageService(r))),Promise.resolve(this)}fetchTile(t,r,e,i){const s=i==null?void 0:i.signal,y={responseType:"array-buffer",signal:s},u={noDataValue:i==null?void 0:i.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(t,r,e,i)).then(()=>d(this.getTileUrl(t,r,e),y)).then(l=>this._lercDecoder.decode(l.data,u,s)).then(l=>new j(l))}getTileUrl(t,r,e){const i=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,s=T({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${t}/${r}/${e}${s?"?"+s:""}`}async queryElevation(t,r){const{ElevationQuery:e}=await n(()=>import("./ElevationQuery-ClnmdMRA.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]),import.meta.url);return m(r),new e().query(this,t,r)}async createElevationSampler(t,r){const{ElevationQuery:e}=await n(()=>import("./ElevationQuery-ClnmdMRA.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]),import.meta.url);return m(r),new e().createSampler(this,t,r)}_fetchTileAvailability(t,r,e,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(t,r,e,i):Promise.resolve("unknown")}async _fetchImageService(t){var i;if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:t},e=await d(this.parsedUrl.path,r);e.ssl&&(this.url=(i=this.url)==null?void 0:i.replace(/^http:/i,"https:")),this.sourceJSON=e.data,this.read(e.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[h]}};a([p({readOnly:!0})],o.prototype,"capabilities",void 0),a([c("service","capabilities",["capabilities"])],o.prototype,"readCapabilities",null),a([p({json:{read:{source:"copyrightText"}}})],o.prototype,"copyright",void 0),a([p({readOnly:!0,type:b})],o.prototype,"heightModelInfo",void 0),a([p({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],o.prototype,"path",void 0),a([p({type:["show","hide"]})],o.prototype,"listMode",void 0),a([p({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],o.prototype,"minScale",void 0),a([p({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],o.prototype,"maxScale",void 0),a([p({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],o.prototype,"opacity",void 0),a([p({type:["ArcGISTiledElevationServiceLayer"]})],o.prototype,"operationalLayerType",void 0),a([p()],o.prototype,"sourceJSON",void 0),a([p({json:{read:!1},value:"elevation",readOnly:!0})],o.prototype,"type",void 0),a([p(D)],o.prototype,"url",void 0),a([p()],o.prototype,"version",void 0),a([c("version",["currentVersion"])],o.prototype,"readVersion",null),o=a([g("esri.layers.ElevationLayer")],o);const h=Symbol("default-fetch-tile");o.prototype.fetchTile[h]=!0;const De=o;export{De as default};
