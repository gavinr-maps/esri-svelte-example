import{M as H}from"./mathUtils-Cfq9PL9W.js";import{e as k,a as A,x as B}from"./Polyline-s-JzsQqo.js";function j(n,e,r,o){if(n.type==="point")return n.x+=e,n.y+=r,n.hasZ&&o!=null,n;if(n.type==="multipoint"){const x=n.points;for(let a=0;a<x.length;a++)x[a]=C(x[a],e,r,o);return n}if(n.type==="extent")return n.xmin+=e,n.xmax+=e,n.ymin+=r,n.ymax+=r,n;const m=k(n),t=n.type==="polyline"?n.paths:n.rings;for(let x=0;x<m.length;x++){const a=m[x];for(let s=0;s<a.length;s++)a[s]=C(a[s],e,r,o)}return"paths"in n?n.paths=t:n.rings=t,n}function K(n,e,r,o,m){const t=n.clone(),x=o.resolution;if(t.type==="point"){if(m)j(t,e*x,-r*x);else{const a=o.state.transform,s=o.state.inverseTransform,l=a[0]*t.x+a[2]*t.y+a[4],y=a[1]*t.x+a[3]*t.y+a[5];t.x=s[0]*(l+e)+s[2]*(y+r)+s[4],t.y=s[1]*(l+e)+s[3]*(y+r)+s[5]}return t}if(t.type==="multipoint"){if(m)j(t,e*x,-r*x);else{const a=t.points,s=o.state.transform,l=o.state.inverseTransform;for(let y=0;y<a.length;y++){const c=a[y],p=s[0]*c[0]+s[2]*c[1]+s[4],v=s[1]*c[0]+s[3]*c[1]+s[5],f=l[0]*(p+e)+l[2]*(v+r)+l[4],u=l[1]*(p+e)+l[3]*(v+r)+l[5];a[y]=Z(c,f,u)}}return t}if(t.type==="extent"){if(m)j(t,e*x,-r*x);else{const a=o.state.transform,s=o.state.inverseTransform,l=a[0]*t.xmin+a[2]*t.ymin+a[4],y=a[1]*t.xmin+a[3]*t.ymin+a[5],c=a[0]*t.xmax+a[2]*t.ymax+a[4],p=a[1]*t.xmax+a[3]*t.ymax+a[5];t.xmin=s[0]*(l+e)+s[2]*(y+r)+s[4],t.ymin=s[1]*(l+e)+s[3]*(y+r)+s[5],t.xmax=s[0]*(c+e)+s[2]*(p+r)+s[4],t.ymax=s[1]*(c+e)+s[3]*(p+r)+s[5]}return t}if(m)j(t,e*x,-r*x);else{const a=k(t),s=t.type==="polyline"?t.paths:t.rings,l=o.state.transform,y=o.state.inverseTransform;for(let c=0;c<a.length;c++){const p=a[c];for(let v=0;v<p.length;v++){const f=p[v],u=l[0]*f[0]+l[2]*f[1]+l[4],h=l[1]*f[0]+l[3]*f[1]+l[5],M=y[0]*(u+e)+y[2]*(h+r)+y[4],g=y[1]*(u+e)+y[3]*(h+r)+y[5];p[v]=Z(f,M,g)}}"paths"in t?t.paths=s:t.rings=s}return t}function L(n,e,r,o){if(n.type==="point"){const{x:f,y:u}=n,h=o?o[0]:f,M=o?o[1]:u,g=n.clone(),T=(f-h)*e+h,i=(u-M)*r+M;return g.x=T,g.y=i,g}if(n.type==="multipoint"){const f=k(n),u=A(),[h,M,g,T]=B(u,[f]),i=o?o[0]:(h+g)/2,q=o?o[1]:(T+M)/2,d=n.clone(),w=d.points;for(let b=0;b<w.length;b++){const z=w[b],[D,E]=z,F=(D-i)*e+i,G=(E-q)*r+q;w[b]=Z(z,F,G)}return d}if(n.type==="extent"){const{xmin:f,xmax:u,ymin:h,ymax:M}=n,g=o?o[0]:(f+u)/2,T=o?o[1]:(M+h)/2,i=n.clone();if(i.xmin=(f-g)*e+g,i.ymax=(M-T)*r+T,i.xmax=(u-g)*e+g,i.ymin=(h-T)*r+T,i.xmin>i.xmax){const q=i.xmin,d=i.xmax;i.xmin=d,i.xmax=q}if(i.ymin>i.ymax){const q=i.ymin,d=i.ymax;i.ymin=d,i.ymax=q}return i}const m=k(n),t=A(),[x,a,s,l]=B(t,m),y=o?o[0]:(x+s)/2,c=o?o[1]:(l+a)/2,p=n.clone(),v=p.type==="polyline"?p.paths:p.rings;for(let f=0;f<m.length;f++){const u=m[f];for(let h=0;h<u.length;h++){const M=u[h],[g,T]=M,i=(g-y)*e+y,q=(T-c)*r+c;v[f][h]=Z(M,i,q)}}return"paths"in p?p.paths=v:p.rings=v,p}function N(n,e,r,o,m,t){const x=Math.sqrt((r-n)*(r-n)+(o-e)*(o-e));return Math.sqrt((m-n)*(m-n)+(t-e)*(t-e))/x}function O(n,e,r,o=!1){const m=Math.atan2(e.y-r.y,e.x-r.x)-Math.atan2(n.y-r.y,n.x-r.x),t=Math.atan2(Math.sin(m),Math.cos(m));return o?t:H(t)}function C(n,e,r,o){return Z(n,n[0]+e,n[1]+r,n[2]!=null&&o!=null?n[2]+o:void 0)}function Z(n,e,r,o){const m=[e,r];return n.length>2&&m.push(n[2]),n.length>3&&m.push(n[3]),m}export{N as a,K as i,O as m,L as s};
