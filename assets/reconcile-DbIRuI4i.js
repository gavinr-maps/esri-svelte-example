import{P as d}from"./cast-CsZslgGN.js";import{r,m as t,a as v,s as c}from"./Accessor-BmwT4B0c.js";import{f as w,i as y,s as g}from"./utils-YowqfOgk.js";import{r as j}from"./serverVersionUtils-DbFDrZd4.js";import{S as P}from"./JSONSupport-DcrLLGjL.js";import"./index-4eY77cms.js";let o=class extends P{constructor(e){super(e),this.hasConflicts=!1,this.moment=null,this.didPost=!1,this.success=!1}};r([t({type:Boolean,json:{write:!0}})],o.prototype,"hasConflicts",void 0),r([t({type:Date,json:{type:Number,write:{writer:(e,s)=>{s.moment=e?e.getTime():null}}}})],o.prototype,"moment",void 0),r([t({type:Boolean,json:{write:!0}})],o.prototype,"didPost",void 0),r([t({type:Boolean,json:{write:!0}})],o.prototype,"success",void 0),o=r([v("esri.rest.versionManagement.gdbVersion.support.ReconcileResult")],o);const S=o,n=new Map;async function $(e,s,p,m){n.has(e)||await j(n,e);const i=n.get(e);if(((i==null?void 0:i.serverVersion)??0)<=11.1)throw new c("reconcile:enterprise-version","versioning API requires ArcGIS Enterprise version 11.2 or higher");if(!s)throw new c("reconcile:missing-guid","guid for version is missing");const a=w(e),l=p.toJSON(),u=y(a.query,{query:g({...l,f:"json"}),...m,method:"post"});s.startsWith("{")&&(s=s.slice(1,-1));const f=`${a.path}/versions/${s}/reconcile`,{data:h}=await d(f,u);return S.fromJSON(h)}export{$ as reconcile,n as serverVersionCacheMap};
