import{P as A}from"./cast-CsZslgGN.js";import{a as D}from"./reactiveUtils-XM7cS2OP.js";import{s as _,E as Q,B as v}from"./Accessor-BmwT4B0c.js";import{v as R}from"./jsonUtils-CwFG8yN4.js";import{a4 as E,c as P}from"./Point-Cz2JYYmX.js";import{s as Z,u as G,n as M,r as B,o as N}from"./featureConversionUtils-CvnFcmH_.js";import{u as z}from"./executeQueryForSnapping-DWE9tz1Z.js";import{f as L}from"./FeatureStore-BuDu5Iw5.js";import{x as F,j as b}from"./queryUtils-DBEPdow2.js";import{L as J}from"./QueryEngine-BokU27l9.js";import{I as U,N as W,E as H}from"./geojson-C9Ip3oRW.js";import{l as V,a as K,u as Y}from"./clientSideDefaults-DyCV_B9d.js";import{S as X,E as ee,g as w,f as T,p as I,h as $}from"./sourceUtils-BFhZjJqS.js";import{Z as O}from"./FieldsIndex-FW1AMU67.js";import{i as te}from"./fieldType-CBeoJWlv.js";import{c as ie,K as re}from"./opacityUtils-Dim20wpZ.js";import{n as se}from"./Promise-DfET-uns.js";import"./index-4eY77cms.js";import"./JSONSupport-DcrLLGjL.js";import"./Evented-Dw4_VOGn.js";import"./SimpleObservable-CvOkykwM.js";import"./Extent-g5W9hy0j.js";import"./Polyline-s-JzsQqo.js";import"./writer-DKgfqj4X.js";import"./mathUtils-Cfq9PL9W.js";import"./aaBoundingBox-Dw3yBk2f.js";import"./OptimizedFeature-P2towpqD.js";import"./memoryEstimations-Bcyf-mHz.js";import"./OptimizedGeometry-BJqUA4Pi.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./normalizeUtils-BTGdXlpz.js";import"./normalizeUtilsCommon-lGDszWRI.js";import"./utils-YowqfOgk.js";import"./utils-B-dlKIhi.js";import"./timeSupport-C7DiFkF_.js";import"./BoundsStore-CI-maf3v.js";import"./PooledRBush--ue4CxG1.js";import"./quickselect-QQC62dOK.js";import"./optimizedFeatureQueryEngineAdapter-D7doR0mc.js";import"./projection-CyCZAIaD.js";import"./vec3f64-BLpZdpfb.js";import"./projectBuffer-CQnuEMuP.js";import"./geodesicConstants-RQL9oKdk.js";import"./json-Wa8cmqdu.js";import"./WhereClauseCache-CJbuf62r.js";import"./LRUCache-CXiGQWMN.js";import"./MemCache-CmojB_Z1.js";import"./WhereClause-xGR0ztic.js";import"./TimeOnly-CveCl9ie.js";import"./QueryEngineCapabilities-B_pTbIiR.js";import"./timeUtils-C1c_L2Fd.js";import"./quantizationUtils-DgFbqZi7.js";import"./utils-Co_tyUES.js";import"./screenUtils-_ZIvrt5o.js";import"./heatmapUtils-Cyq-bAyG.js";import"./vec42-YcqnINSP.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./utils-v4CMtYiY.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-Fi6iAz29.js";import"./intl-Duiy0OzY.js";import"./timeZoneUtils-DxzjpEBb.js";import"./utils-Dyua10sr.js";import"./ClassBreaksDefinition-C7KVmBug.js";import"./enumeration-DpvDkLNI.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-ZfcJap1f.js";import"./NormalizationBinParametersMixin-CZD0XfhN.js";import"./Clonable-Z-AWS-16.js";import"./Scheduler-i_u8qdlN.js";import"./signal-CySMLEX9.js";import"./debugFlags-B1LM_Apo.js";import"./date-Ctp1FiBW.js";import"./defaultsJSON-GKolV7NZ.js";const ne={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:X};class St{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[],[i]=await Promise.all([e.url?this._fetch(t==null?void 0:t.signal):null,this._checkProjection(e.spatialReference)]),r=U(i,{geometryType:e.geometryType}),o=e.fields||r.fields||[],p=e.hasZ!=null?e.hasZ:r.hasZ,d=r.geometryType;let c=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const h=e.spatialReference||E;let n=e.timeInfo;o===r.fields&&r.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const u=new O(o);let l=u.get(c);l?(l.type!=="esriFieldTypeString"&&(l.type="esriFieldTypeOID"),l.editable=!1,l.nullable=!1,c=l.name):(l={alias:c,name:c,type:r.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(l));const y={};for(const a of o){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new _("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!te.jsonValues.includes(a.type))throw new _("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==l.name){const g=ie(a);g!==void 0&&(y[a.name]=g)}a.length==null&&(a.length=re(a))}if(n){if(n.startTimeField){const a=u.get(n.startTimeField);a?(n.startTimeField=a.name,a.type="esriFieldTypeDate"):n.startTimeField=null}if(n.endTimeField){const a=u.get(n.endTimeField);a?(n.endTimeField=a.name,a.type="esriFieldTypeDate"):n.endTimeField=null}if(n.trackIdField){const a=u.get(n.trackIdField);a?n.trackIdField=a.name:(n.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:n}}))}n.startTimeField||n.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:n}}),n=null)}const m=d?Y(d):void 0,q=u.dateFields.length?{timeZoneIANA:se}:null,f={warnings:s,featureErrors:[],layerDefinition:{...ne,drawingInfo:m??void 0,templates:V(y),extent:void 0,geometryType:d,objectIdField:c,fields:o,hasZ:!!p,timeInfo:n,dateFieldsTimeReference:q}};this._queryEngine=new J({fieldsIndex:O.fromLayerJSON({fields:o,timeInfo:n,dateFieldsTimeReference:q}),geometryType:d,hasM:!1,hasZ:p,objectIdField:c,spatialReference:h,timeInfo:n,featureStore:new L({geometryType:d,hasM:!1,hasZ:p})});const j=this._queryEngine.fieldsIndex.requiredFields.indexOf(l);j>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(j,1),this._createDefaultAttributes=K(y,c);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const C=this._normalizeFeatures(x,f.featureErrors);this._queryEngine.featureStore.addMany(C);const{fullExtent:k,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=k,S){const{start:a,end:g}=S;f.layerDefinition.timeInfo.timeExtent=[a,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([ee(t,s),F(e.adds,t),F(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),z(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){var i;this._loadOptions.customParameters=e,(i=this._snapshotTask)==null||i.abort(),this._snapshotTask=D(this._snapshotFeatures),this._snapshotTask.promise.then(r=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,r);const o=this._normalizeFeatures(r);o&&this._queryEngine.featureStore.addMany(o)},r=>{this._queryEngine.featureStore.clear(),Q(r)||v.getLogger("esri.layers.GeoJSONLayer").error(new _("geojson-layer:refresh","An error occurred during refresh",{error:r}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:s}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:s}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:s,objectIdField:i}=this._queryEngine,r=W(e,{geometryType:t,hasZ:s,objectIdField:i});if(!P(this._queryEngine.spatialReference,E))for(const o of r)o.geometry!=null&&(o.geometry=Z(b(G(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),E,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,i=(await A(t??"",{responseType:"json",query:{...s},signal:e})).data;return H(i),i}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:i}=this._queryEngine,r=[];for(const o of e){const p=this._createDefaultAttributes(),d=w(i,p,o.attributes,!0);d?t==null||t.push(d):(this._assignObjectId(p,o.attributes,!0),o.attributes=p,o.objectId=p[s],r.push(o))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:i}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t!=null&&t.length&&this._applyAddEdits(r,t),s!=null&&s.length&&this._applyUpdateEdits(r,s),i==null?void 0:i.length){for(const d of i)r.deleteResults.push(T(d));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:o,timeExtent:p}=await this._queryEngine.fetchRecomputedExtents();return{extent:o,timeExtent:p,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:i,hasM:r,hasZ:o,objectIdField:p,spatialReference:d,featureStore:c,fieldsIndex:h}=this._queryEngine,n=[];for(const u of t){if(u.geometry&&i!==R(u.geometry)){s.push(I("Incorrect geometry type."));continue}const l=this._createDefaultAttributes(),y=w(h,l,u.attributes);if(y)s.push(y);else{if(this._assignObjectId(l,u.attributes),u.attributes=l,u.uid!=null){const m=u.attributes[p];e.uidToObjectId[u.uid]=m}if(u.geometry!=null){const m=u.geometry.spatialReference??d;u.geometry=b($(u.geometry,m),m,d)}n.push(u),s.push(T(u.attributes[p]))}}c.addMany(M([],n,i,o,r,p))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:i,hasZ:r,objectIdField:o,spatialReference:p,featureStore:d,fieldsIndex:c}=this._queryEngine;for(const h of t){const{attributes:n,geometry:u}=h,l=n==null?void 0:n[o];if(l==null){e.push(I(`Identifier field ${o} missing`));continue}if(!d.has(l)){e.push(I(`Feature with object id ${l} missing`));continue}const y=B(d.getFeature(l),s,r,i);if(u!=null){if(s!==R(u)){e.push(I("Incorrect geometry type."));continue}const m=u.spatialReference??p;y.geometry=b($(u,m),m,p)}if(n){const m=w(c,y.attributes,n);if(m){e.push(m);continue}}d.add(N(y,s,r,i,o)),e.push(T(l))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if(s.type==="esriFieldTypeString")return()=>s.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const r of t)r.objectId&&(i=Math.max(i,r.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,s=!1){const i=this._queryEngine.objectIdField;e[i]=s&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await F(E,e)}catch{throw new _("geojson-layer","Projection not supported")}}}export{St as default};
