import{a9 as w,aa as y,ab as I,ac as V,G as v,ad as H,j as p,ae as c,Q as T,af as o,ag as g,ah as q}from"./index-3399a756.js";import"./MagnifierPrograms-eef972b8.js";import"./Container-1a5da220.js";import"./BufferPool-6e79b111.js";import"./color-199f3589.js";import"./WGLContainer-d8afca4f.js";import"./enums-64ab819c.js";import"./Texture-cba35665.js";import"./ProgramTemplate-e80c0ea0.js";import"./MaterialKey-cce0ae8e.js";import"./utils-126220d8.js";import"./VertexArrayObject-98ddbe48.js";import"./StyleDefinition-fbc907c2.js";import"./enums-fb086c25.js";import"./OrderIndependentTransparency-e1b3a745.js";import"./floatRGBA-72238bb3.js";import"./webgl-debug-b1f7a2c5.js";import{a as Q}from"./GraphicsView2D-8d82edee.js";import"./AttributeStoreView-6133d335.js";import"./earcut-61f7b102.js";import"./vec3f32-ad1dc57f.js";import{t as U,o as f,n as d}from"./imageUtils-dd4d47bd.js";import{f as b,u as S}from"./LayerView-7a9bc80f.js";import{n as C}from"./HighlightGraphicContainer-2dbc32ec.js";import{i as k}from"./RefreshableLayerView-f8269e55.js";import{P as F,S as G,a as P}from"./drapedUtils-6c3e3076.js";import"./_commonjsHelpers-2f3e7994.js";import"./ExpandedCIM-c21ed6c9.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./enums-55085e26.js";import"./definitions-3ddd14a8.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-8cf98e7a.js";import"./rasterizingUtils-96cb521f.js";import"./GeometryUtils-dd03fc25.js";import"./imageutils-12ab85f1.js";import"./Matcher-c99a71cb.js";import"./visualVariablesUtils-0b29afa3.js";import"./visualVariablesUtils-1b9fc8b0.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-c5d22745.js";import"./devEnvironmentUtils-5002a058.js";import"./CircularArray-c04f3762.js";import"./ComputedAttributeStorage-a877177c.js";import"./arcadeTimeUtils-90af5493.js";import"./executionError-fb3f283a.js";import"./centroid-3df0d3b7.js";import"./VertexElementDescriptor-2925c6af.js";import"./config-1337d16e.js";import"./basicInterfaces-b7051eb1.js";import"./normalizeUtilsSync-0119d177.js";import"./projectionSupport-3c43db74.js";import"./json-48e3ea08.js";import"./schemaUtils-18fcc6c1.js";import"./util-8c53f1d8.js";import"./TiledDisplayObject-6fc1e3a1.js";import"./BitmapTileContainer-33a7d382.js";import"./Bitmap-23a3c332.js";import"./TileContainer-628b08e3.js";import"./BaseGraphicContainer-143c5355.js";import"./FeatureContainer-fed03af3.js";import"./scaleUtils-860b3136.js";import"./floorFilterUtils-080a7cd2.js";import"./sublayerUtils-81a7cb6a.js";import"./popupUtils-a22c0a5e.js";const R=[0,0];let h=class extends k(U(b(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(e,i)=>this.fetchTile(e,i)}),this._tileStrategy=new V({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),F(this,this.layer)){const e=this._highlightView=new Q({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new C(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new G({createFetchPopupFeaturesQueryGeometry:(i,r)=>P(i,r,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(i,r)=>{e.graphicUpdateHandler({graphic:i,property:r})},layerView:this,updatingHandles:this.updatingHandles})}this.requestUpdate(),this.addAttachHandles(v(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):{remove(){}}}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return H((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(t=>this._enqueueTileFetch(t)))}isUpdating(){var t;return((t=this._fetchQueue)==null?void 0:t.updating)??!1}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(R,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(e),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:r,resamplingLevel:n=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(s){if(!p(s)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(n<3){const m=this._tileInfoView.getTileParentId(t.id);if(m){const u=new c(m),_=await this.fetchTile(u,{...e,resamplingLevel:n+1});return d(this._tileInfoView,_,u,t)}}throw s}const a=new c(0,0,0,0);let l;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,a,{signal:r}),a.level!==t.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);l=await this._fetchImage(a,r)}catch(s){if(p(s))throw s;l=await this._fetchImage(t,r)}return this.resampling?d(this._tileInfoView,l,a,t):l}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){p(e)||T.getLogger(this.declaredClass).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};o([g()],h.prototype,"_fetchQueue",void 0),o([g()],h.prototype,"resampling",null),h=o([q("esri.views.2d.layers.TileLayerView2D")],h);const Nt=h;export{Nt as default};
