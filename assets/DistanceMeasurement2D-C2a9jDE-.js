import{e as s}from"./Evented-CXIxDjmW.js";import{u as f,O as ee,t as te}from"./Accessor-D6mNnsWy.js";import{y as r,b as R,E as ie,n as se}from"./subclass-BR3PhgZG.js";import{e as G,B as re,n as I}from"./jsxFactory-Be5PKa9i.js";import{d as g,P as $,w as oe}from"./reactiveUtils-BFQ0BtrB.js";import{_ as D,f as U,j as ne,ae as O}from"./Point-TlcsOcXV.js";import{K as M,W as ae}from"./projection-tSh-0UvX.js";import{e as le}from"./defaultUnit-6wOlq6cB.js";import"./geometry-CnaxvJsv.js";import{d as A}from"./Graphic-Bi5hWHps.js";import"./intl-CArXn1et.js";import{d as pe}from"./symbols-CfvYGR4J.js";import{G as E,R as j,q as me}from"./colorUtils-D5nOabzP.js";import{g as he,d as ue,D as ce}from"./unitFormatUtils-BtkL2qzA.js";import{h as de}from"./UpdatingHandles-CMtXpTiG.js";import{geodesicLength as ge,geodesicDensify as ve,planarLength as ye}from"./geometryEngine-DyRMGqqp.js";import{w as K,v as T,R as C}from"./geodesicUtils-DyOqnDq-.js";import x from"./GraphicsLayer-DACkzSwx.js";import{l as H}from"./ViewingMode-Dodu7ZZk.js";import{f as _e}from"./SnappingVisualizer2D-D8iIxBDy.js";import{l as fe}from"./Draw-BJJbi6cJ.js";import{E as B,p as we,P as be}from"./EditGeometryOperations-yqtNdguW.js";import{n as Me,p as Le,E as $e,f as Se}from"./InteractiveToolBase-BwczmwYA.js";import{S as De}from"./GraphicManipulator-Dp-uSe1P.js";import{e as Oe}from"./SnappingContext-lR2hMWGP.js";import{f as Te}from"./SnappingDragPipelineStep-Xj6G0KqT.js";import{a as Ce}from"./SnappingManagerPool-CxgepikZ.js";import{N as xe}from"./SnappingManager-DFm0py-D.js";import{h as P,e as Ae}from"./Promise-CZrWwByK.js";import{m as Re,a as ke,y as z}from"./TextSymbol-zZq0BA1M.js";import{m as Ge}from"./Polyline-BQFeqYXi.js";import{p as Ie,u as Ue}from"./MeasurementWidgetContent-CNKyAkoI.js";import{e as W}from"./globalCss-CZa70j6i.js";import"./uuid-fwrPAdZb.js";import"./jsonMap-DCC6W5ex.js";import"./assets-BNizZMOZ.js";import"./index-BVncS3aY.js";import"./shared-B3wH2qpO.js";import"./writer-3zufXUNV.js";import"./mathUtils-ClvKsMak.js";import"./Extent-B4rrMrqp.js";import"./projectBuffer-iyGwL2dv.js";import"./geodesicConstants-kj1AtlGg.js";import"./getDefaultUnitForView-C278cFTz.js";import"./Portal-DCqdz-K4.js";import"./PopupTemplate-D8mXPxzU.js";import"./Clonable-cKbRam6-.js";import"./fieldUtils-C5R42-PY.js";import"./enumeration--HlxOQ_N.js";import"./Color-DDUWtbqR.js";import"./colorUtils-CS9vdHXB.js";import"./ActionToggle-C0Z1k2jc.js";import"./Identifiable-BLvpQbOc.js";import"./jsonUtils-DtWlwXHP.js";import"./screenUtils-PfxkaaMN.js";import"./materialUtils-CQ3JLQ1x.js";import"./opacityUtils-BT7mQkwC.js";import"./aaBoundingBox-BGxkJAW0.js";import"./persistableUrlUtils-Dx61-x4K.js";import"./collectionUtils-Dm1icNvk.js";import"./vec42-B1mBkh1w.js";import"./vec4f64-CBQL1T0x.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./Cyclical-BY_I03kj.js";import"./quantityUtils-Cz8e0KG8.js";import"./geometryEngineBase-RmbNeFm7.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-CRSW297p.js";import"./GraphicsCollection-B0IuEpT5.js";import"./Layer-CfUiPX3n.js";import"./TimeExtent-Dl-qaORu.js";import"./timeUtils-DQR2jUPL.js";import"./BlendLayer-DmvCcS5c.js";import"./jsonUtils-C4Wp5KpV.js";import"./parser-BN6zmHl-.js";import"./utils-D20M4_S8.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-ybYUU6jq.js";import"./ScaleRangeLayer-CKYXLXxK.js";import"./ElevationInfo-jptbPjRY.js";import"./unitConversionUtils-BUA_O87q.js";import"./lengthUtils-vgIBtB6M.js";import"./vec2-B_ymkwGp.js";import"./vec2f64-Diu2Kaa8.js";import"./enums-BRXbslMp.js";import"./SnappingVisualizer-Bg9_3fTb.js";import"./PointSnappingHint-DJuRAzp4.js";import"./projectVectorToVector-BLdiwuTJ.js";import"./projectPointToVector-C-hGM2ap.js";import"./SnappingOperation-CqqVcxu4.js";import"./Scheduler-CDoWuxMK.js";import"./signal-DzOfzcfh.js";import"./debugFlags-B3L9P_UW.js";import"./InputManager-C4xu1R9l.js";import"./Queue-DpHko4Yk.js";import"./keybindings-DYR2fa8r.js";import"./screenUtils-BGG3AyYa.js";import"./elevationInfoUtils-C0SzfJu0.js";import"./surfaceCoordinateSystems-BE1mjxbn.js";import"./memoize-DsJmrG76.js";import"./ReactiveSet-HYC-4KEs.js";import"./diffUtils--7ofoPN-.js";import"./dehydratedFeatureComparison-NNZuxUKF.js";import"./SketchLabelOptions-10TdxHmI.js";import"./hydratedFeatures-DHwl8sGq.js";import"./mat2d-DPkeMmgR.js";import"./mat2df64-CBKYtunK.js";import"./quat-ChS85qAG.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-BrpT0VRp.js";import"./compilerUtils-BA04t1lN.js";import"./plane-Bz78OrLf.js";import"./mat4f64-Dk4dwAN8.js";import"./mathUtils-kvswLROa.js";import"./geometry2dUtils-BraNT6Fs.js";import"./meshVertexSpaceUtils-BfF6O78E.js";import"./MeshLocalVertexSpace-sBjAuOT3.js";import"./interfaces-D6pIddIh.js";import"./defaults-CIM29kXM.js";import"./defaultsJSON-GKolV7NZ.js";import"./drapedUtils-BgWOavfo.js";import"./sphere-DIv2hmik.js";import"./FeatureFilter-DqmBE6ye.js";import"./Query-BpMwiNVl.js";import"./DataLayerSource-BX7Ap_tY.js";import"./Field-poIiHWUc.js";import"./fieldType-CIG5ey7e.js";import"./FullTextSearch-BhJOgh_r.js";import"./floorFilterUtils-DZ5C6FQv.js";import"./layerUtils-BzjQnEdj.js";import"./utils-CXgSw6Sd.js";import"./layerViewUtils-D2JqIDZ8.js";import"./geodesicLengthMeasurementUtils-YCCCQWpE.js";import"./UnitSelect-Cnnhr_2u.js";const L=1e5;let h=class extends Me{constructor(e){super(e),this._drawActive=!1,this._measurementLayer=new x({internal:!0,listMode:"hide",visible:!1}),this._manipulatorLayer=new x({internal:!0,listMode:"hide",visible:!1}),this._snappingLayer=new x({internal:!0,listMode:"hide",visible:!1}),this._updatingHandles=new de,this._vertices=[],this.geodesicDistanceThreshold=null,this.measurement=null,this.measurementLabel=null}initialize(){P("esri/core/t9n/Units").then(t=>{this.messages=t});const e=this.view;this._draw=new fe({view:e}),e.map.addMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),e.focus(),this._snappingManagerResult=Ce(e),this.addHandles([Ae(async()=>{this.messages=await P("esri/core/t9n/Units")}),g(()=>[this.unit,this.geodesicDistanceThreshold,this.messages],()=>{this._updatePolylines()},$),g(()=>[this.view.effectiveTheme.accentColor,this.view.effectiveTheme.textColor],()=>{if(!this._vertices.length)return;const t=this._vertices.map(({coord:i})=>i);for(const{handle:i}of this._vertices)i.remove();this._vertices=[],this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this.manipulators.removeAll(),this._updateSketch(t)}),g(()=>this.snappingOptions.featureSources,t=>{for(const i of t)i.layer!==this._measurementLayer&&i.layer!==this._manipulatorLayer||(i.enabled=!1)},$),this._snappingManagerResult]),xe(this)}destroy(){const{map:e}=this.view;this._draw.view=null,this._draw=f(this._draw),e.removeMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this._set("measurement",null),this._set("measurementLabel",null),this._measurementLayer=f(this._measurementLayer),this._manipulatorLayer=f(this._manipulatorLayer),this._snappingLayer=f(this._snappingLayer),this._updatingHandles=f(this._updatingHandles),this._resetVertices()}get _snappingManager(){return this._snappingManagerResult.snappingManager}get cursor(){return this._drawActive?"crosshair":null}set editable(e){this._set("editable",e),e||this._draw.reset()}get snappingOptions(){return this._snappingManager.options}get updating(){return this._updatingHandles.updating||this._snappingManager.updating}onActivate(){this._drawActive||this._vertices.length!==0||this._startSketch()}onShow(){this._measurementLayer.visible=!0,this._manipulatorLayer.visible=!0,this._snappingLayer.visible=!0}onHide(){this._measurementLayer.visible=!1,this._manipulatorLayer.visible=!1,this._snappingLayer.visible=!1}_getSnappingContext(e){return new Oe({elevationInfo:{mode:"on-the-ground",offset:0},pointer:e,editGeometryOperations:new B(new we("point",be(!1,!1,this.view.spatialReference)),H.Local),visualizer:new _e(this._snappingLayer)})}_resetVertices(){for(const{handle:e}of this._vertices)e.remove();this._vertices=[]}_startSketch(){this._drawActive=!0;const e=this._snappingManager,t=this._draw.create("polyline",{mode:"click",snappingManager:e});t.on(["vertex-add","vertex-update","vertex-remove","cursor-update","undo","redo"],i=>this._updateSketch(i.vertices)),t.on("draw-complete",()=>{this._stopSketch()})}_stopSketch(){this.manipulators.forEach(({manipulator:e})=>{e.interactive=!0}),this._drawActive=!1,this.finishToolCreation()}_updateSketch(e){const{spatialReference:t}=this.view;for(;this._vertices.length>e.length;){const{handle:o,manipulator:u}=this._vertices.pop();o.remove(),this.manipulators.remove(u)}for(let o=this._vertices.length;o<e.length;o++){const[u,d]=e[o],v=new D({x:u,y:d,spatialReference:t}),y=Ee(v,this.view,this._manipulatorLayer);this.manipulators.add(y);const w=B.fromGeometry(v,H.Local),F=[w.on("vertex-update",b=>{const _=b.vertices.at(0);_&&(this._vertices[o].coord=[_.pos[0],_.pos[1]],this._updatePolylines())}),Le(y,(b,_,We,Q)=>{const X=this._getSnappingContext(Q),Y=this._snappingManager,Z=this._updatingHandles,{snappingStep:J}=Te({snappingContext:X,snappingManager:Y,updatingHandles:Z});_.next($e(this.view)).next(S=>{if(S.action==="start"){const k=new D(S.mapStart);b.graphic.geometry=k,w.trySetGeometry(k)}return S}).next(...J).next(Se({operations:w})).next(()=>{b.graphic.geometry=w.data.geometry})})];this._vertices.push({manipulator:y,coord:[u,d],handle:ie(F)})}const i=this._vertices.length-1,n=this._vertices[i],[l,a]=e[i];n.coord[0]===l&&n.coord[1]===a||(n.coord=[l,a],n.manipulator.graphic.geometry=new D({x:l,y:a,spatialReference:t}));const p=this._drawActive?this._vertices[i].manipulator:null;this.manipulators.forEach(({manipulator:o})=>{o.interactive=p==null||o!==p}),this._updatePolylines()}_updatePolylines(){var v;if(this._vertices.length<2)return void this._measurementLayer.removeAll();const e=this._vertices.map(({coord:y})=>y),{measurement:t,drawing:i,original:n}=He(e,this.view.spatialReference,this.geodesicDistanceThreshold);this._set("measurement",t);const l=ze(this.messages,t,this.unit);let a,p;this._set("measurementLabel",l);const{graphics:o}=this._measurementLayer,u=o.length===2,{effectiveTheme:d}=this.view;u?(a=o.at(0),p=o.at(1)):(a=new A({symbol:new pe({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[14,12],lineDashEnding:"FullGap",controlPointEnding:"NoConstraint"}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:3.5,color:E(d.accentColor).toArray()},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:5,color:d.accentColor.toArray()}]}}})}),p=new A({symbol:new Re({color:d.textColor,haloColor:j(E(d.textColor,me.Low),.5),haloSize:2,font:new ke({size:14,family:"sans-serif"})})}),o.removeAll(),o.addMany([a,p])),a.geometry=i,p.geometry=(v=n.extent)==null?void 0:v.center,p.symbol.text=l}};function Ee(e,t,i){const n=j(t.effectiveTheme.accentColor,.5),l={type:"simple-line",width:0},a=8,p=new z({style:"circle",color:n,size:a,outline:l}),o=new z({style:"circle",color:n,size:1.5*a,outline:l}),u=new A({geometry:e,symbol:p});return new De({view:t,layer:i,graphic:u,focusedSymbol:o})}function He(e,t,i){const n=new Ge({paths:[e],spatialReference:t});let l,a;if(t.isGeographic)if(K(t))l=T([n],"meters")[0],a=C(n,L);else{const p=M(n,U.WGS84),o=C(p,L);l=T([p],"meters")[0],a=M(o,t)}else if(t.isWebMercator)l=ge(n,"meters"),a=ve(n,L,"meters");else{const p=ye(n,"meters");if(i!=null&&p>=i){const o=M(n,U.WGS84),u=C(o,L);l=T([o],"meters")[0],a=M(u,t)}else l=p,a=n}return{measurement:{geometry:a,length:l},original:n,drawing:a}}function Be(e){return e!=null}function Pe(e){if(!e)return!1;const{isGeographic:t,isWebMercator:i,isWGS84:n}=e;return t&&!n&&!K(e)||!t&&!i}function ze(e,t,i){if(!t||!e)return"";switch(i){case"metric":return ce(e,t.length,"meters");case"imperial":return ue(e,t.length,"meters");default:return he(e,ne(t.length,"meters",i),i)}}s([r()],h.prototype,"_drawActive",void 0),s([r({readOnly:!0})],h.prototype,"cursor",null),s([r({value:!0})],h.prototype,"editable",null),s([r({type:Number})],h.prototype,"geodesicDistanceThreshold",void 0),s([r({readOnly:!0})],h.prototype,"measurement",void 0),s([r({readOnly:!0})],h.prototype,"measurementLabel",void 0),s([r()],h.prototype,"messages",void 0),s([r()],h.prototype,"unit",void 0),s([r()],h.prototype,"updating",null),s([r({constructOnly:!0})],h.prototype,"view",void 0),h=s([R("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DTool")],h);let c=class extends Ie{constructor(e){super(e),this.supportedViewType="2d",this.unsupportedErrorMessage="DistanceMeasurement2DViewModel is only supported in 2D views."}initialize(){this.addHandles([g(()=>{var e;return(e=this.view)==null?void 0:e.spatialReference},()=>this.clear()),g(()=>this.unit,e=>{this.tool!=null&&(this.tool.unit=e)},$),g(()=>this.geodesicDistanceThreshold,e=>{this.tool!=null&&(this.tool.geodesicDistanceThreshold=e)},$)])}get geodesicDistanceThreshold(){return this._get("geodesicDistanceThreshold")}set geodesicDistanceThreshold(e){ee(se.getLogger(this),"geodesicDistanceThreshold",{version:"4.29",warnOnce:!0}),this._set("geodesicDistanceThreshold",e)}get measurement(){return this.tool!=null?this.tool.measurement:null}get measurementLabel(){return this.tool!=null?this.tool.measurementLabel:null}get state(){var e;return this.disabled||this.view==null||!Be((e=this.view)==null?void 0:e.spatialReference)?"disabled":this.tool!=null&&this.measurement?this.tool.active?"measuring":"measured":"ready"}get unit(){return this._validateUnit(this.defaultUnit)}set unit(e){this._overrideIfSome("unit",this._validateUnit(e))}get unitOptions(){return O}set unitOptions(e){this._overrideIfSome("unitOptions",this._validateUnits(e))}async start(){const e=this.view;e!=null&&(await oe(()=>e.ready),Pe(e.spatialReference)&&await ae()),this.createTool({interactive:!0})}clear(){this.removeTool()}constructTool(){return new h({view:this.view,visible:this.visible,geodesicDistanceThreshold:this.geodesicDistanceThreshold,unit:this.unit})}_validateUnit(e){const{unitOptions:t,defaultUnit:i}=this;return e!=null&&t.includes(e)?e:t.includes(i)?i:t.length>0?t[0]:i}_validateUnits(e){if(e==null)return[];const t=e.filter(i=>O.includes(i));return t.length===0?O.slice():t}};s([r(le)],c.prototype,"defaultUnit",void 0),s([r()],c.prototype,"geodesicDistanceThreshold",null),s([r({readOnly:!0})],c.prototype,"measurement",null),s([r({readOnly:!0})],c.prototype,"measurementLabel",null),s([r({readOnly:!0})],c.prototype,"state",null),s([r({type:String})],c.prototype,"unit",null),s([r({type:[String]})],c.prototype,"unitOptions",null),c=s([R("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DViewModel")],c);const q=c,V="esri-distance-measurement-2d",N={base:V,newMeasurementButton:`${V}__clear-button`};let m=class extends re{constructor(e,t){super(e,t),this.messages=null,this.messagesCommon=null,this.viewModel=new q}get active(){return this.viewModel.active}get icon(){return"measure-line"}set icon(e){this._overrideIfSome("icon",e)}get label(){var e;return((e=this.messages)==null?void 0:e.widgetLabel)??""}set label(e){this._overrideIfSome("label",e)}get unit(){return this.viewModel.unit}set unit(e){this.viewModel.unit=e}get unitOptions(){return this.viewModel.unitOptions}set unitOptions(e){this.viewModel.unitOptions=e}get view(){return this.viewModel.view}set view(e){this.viewModel.view=e}get visible(){return this.viewModel.visible}set visible(e){this.viewModel.visible=e}render(){const{messages:e,messagesCommon:t,unit:i,unitOptions:n,viewModel:l}=this,{active:a,measurementLabel:p,state:o,supported:u}=l;return I("div",{"aria-label":this.messages.widgetLabel,class:this.classes(N.base,W.widget,W.panel),key:this,role:"presentation"},this.visible?I(Ue,{active:a,measurementItems:[{key:"distance",title:e.distance,value:p}],messages:{...e,notApplicable:t.notApplicable},newMeasurementButtonClass:N.newMeasurementButton,state:o,supported:u,unit:i,unitOptions:n,onNewMeasurementClick:()=>{te(this.viewModel.start())},onUnitChange:d=>{this.unit=d}}):null)}};s([r({readOnly:!0})],m.prototype,"active",null),s([r()],m.prototype,"icon",null),s([r()],m.prototype,"label",null),s([r()],m.prototype,"uiStrings",void 0),s([r(),G("esri/widgets/DistanceMeasurement2D/t9n/DistanceMeasurement2D")],m.prototype,"messages",void 0),s([r(),G("esri/t9n/common")],m.prototype,"messagesCommon",void 0),s([r()],m.prototype,"unit",null),s([r()],m.prototype,"unitOptions",null),s([r()],m.prototype,"view",null),s([r({type:q})],m.prototype,"viewModel",void 0),s([r({type:Boolean})],m.prototype,"visible",null),m=s([R("esri.widgets.DistanceMeasurement2D")],m);const gs=m;export{gs as default};
