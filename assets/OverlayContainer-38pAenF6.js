import{o as j,i as z,M as G,f as A,h as B}from"./mat3-DRqs2t5W.js";import{e as C}from"./DefaultUI-DVON9ypr.js";import{t as D}from"./vec2f32-BbH2jxlN.js";import{r as E}from"./vec3f32-Cw9Q6TO_.js";import{L}from"./normalizeUtils-Bi6Jza1f.js";import{b as k}from"./Point-DB4Hp4hH.js";import{m as q}from"./viewpointUtils-BDYPvBda.js";import{a as F,h as H}from"./WGLContainer-CcOWMYe7.js";import{E as J}from"./Container-DVx3sJUL.js";class et extends F{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=C()}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const r of this.children)r.beforeRender(e)}prepareRenderPasses(e){const r=e.registerRenderPass({name:"overlay",brushes:[H.overlay],target:()=>this.children,drawPhase:J.MAP});return[...super.prepareRenderPasses(e),r]}_updateMatrices(e){const{state:r}=e,{id:s,size:d,pixelRatio:o,resolution:h,rotation:l,viewpoint:M,displayMat3:u}=r;if(this._viewStateId===s)return;const p=Math.PI/180*l,a=o*d[0],n=o*d[1];this._localOrigin=M.targetGeometry.clone();const{x:c,y:_}=this._localOrigin,m=L(c,r.spatialReference);this._localOrigin.x=m,this._localOrigin.y=_;const v=h*a,g=h*n,t=j(this._dvsMat3);z(t,t,u),G(t,t,D(a/2,n/2)),A(t,t,E(a/v,-n/g,1)),B(t,t,-p),this._viewStateId=s}_updateOverlays(e,r){const{state:s}=e,{rotation:d,spatialReference:o,worldScreenWidth:h,size:l,viewpoint:M}=s,u=this._localOrigin;let p,a=0;const n=k(o);if(n&&o.isWrappable){const c=l[0],_=l[1],m=180/Math.PI*d,v=Math.abs(Math.cos(m)),g=Math.abs(Math.sin(m)),t=Math.round(c*v+_*g),[b,x]=n.valid,i=q(o),{x:O,y:I}=M.targetGeometry,S=[O,I],w=[0,0];s.toScreen(w,S);const f=[0,0];let y;y=t>h?.5*h:.5*t;const P=Math.floor((O+.5*i)/i),$=b+P*i,W=x+P*i,R=[w[0]+y,0];s.toMap(f,R),f[0]>W&&(a=i),R[0]=w[0]-y,s.toMap(f,R),f[0]<$&&(a=-i),p={worldWidth:i,xBounds:[b,x]}}for(const c of r)c.updateDrawCoords(u,a,o,p)}}export{et as f};
