import{x as l,e as h}from"./Transformation2D-CV3xaSnP.js";import{s as f}from"./mathUtils-Cfq9PL9W.js";const m={uniform:0,conformal:1,rigid:2,"rigid-motion":3,general:4},e=i=>i.map(t=>new h(t.x,t.y));class p{constructor(){this.transform=new l}calculateErrors(t,r){const s=t.length,n=r.length;if(s!==n)throw new Error(`The input length (${s}) is not the same as output length (${n})`);const o=[];return{rms:this.transform.calculateErrors(s,e(t),e(r),o),errorsOut:o}}flipX(t,r){return this.transform.flipX(t,r),this}flipY(t,r){return this.transform.flipY(t,r),this}initializeFromControlPoints(t,r,s,n){const o=r.length,a=s.length;if(o!==a)throw new Error(`The input length (${o}) is not the same as output length (${a})`);this.transform.initializeFromControlPoints(m[t],o,e(r),e(s),n==null?void 0:n.transform)}isIdentity(){return this.transform.isIdentity()}rotate(t,r,s){const n=f(t);return r!=null&&s!=null?this.transform.rotateAngleAbout(n,new h(r,s)):this.transform.rotateAngle(n),this}scale(t,r){return this.transform.scale(t,r),this}setIdentity(){this.transform.setIdentity()}setSwapCoordinates(){return this.transform.setSwapCoordinates(),this}shear(t,r){return this.transform.shear(t,r),this}shift(t,r){return this.transform.shiftCoords(t,r),this}}export{p as default};
