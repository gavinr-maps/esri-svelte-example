import{r as p}from"./tslib.es6-B3Jf3DVX.js";import{b as X}from"./Accessor-BLX9ikPh.js";import{n as Y,m as l,a as D}from"./subclass-BZA_h8Db.js";import{s as E}from"./mathUtils-C4_ghTv4.js";import{I}from"./Point-Cg0-ChZE.js";import{w as U}from"./vec32-Dvg_eL9J.js";import{B as F,K as G}from"./projection-B971H0Re.js";import{P as O}from"./normalizeUtils-EVmAQ-ak.js";import{o as W}from"./scaleUtils-D_Nw3nhM.js";import{l as B,u as H,t as K}from"./gridUtils-BX6Ojh6T.js";import{f as d,m as T,c as j,d as _,e as k}from"./SnappingManager-BJPyuu7J.js";import"./cast-Bjksrh93.js";import"./writer-DNAwXnhG.js";import"./assets-C43MgM-v.js";import"./index-Bh2oEzTI.js";import"./jsonMap-0cxwUWs2.js";import"./vec3f64-BLpZdpfb.js";import"./common-DQOJ18NT.js";import"./SimpleObservable-KocWTzVy.js";import"./Extent-Bf3YTe7m.js";import"./Polyline-D9YkgmM_.js";import"./projectBuffer-Bs7GwaPY.js";import"./geodesicConstants-DWQLYX7F.js";import"./normalizeUtilsCommon-dT81xWiM.js";import"./jsonUtils-CEfjT-BK.js";import"./geometry-D964gYQX.js";import"./utils-6jMaHUrH.js";import"./utils-Bema0iXE.js";import"./geodesicUtils-FCYOaNwu.js";import"./asyncUtils-CWX51uTe.js";import"./Evented-BHRw9x22.js";import"./reactiveUtils-C5zUhJQJ.js";import"./Collection-CEdjem1-.js";import"./shared-B3wH2qpO.js";import"./elevationInfoUtils-BC_66_Fg.js";import"./unitConversionUtils-BMfW9yAe.js";import"./lengthUtils-DL1-FDQQ.js";import"./projectVectorToVector-G2uWGoIb.js";import"./projectPointToVector-GINIbYMz.js";import"./Color-BCS62Hs5.js";import"./colorUtils-0bJDPow9.js";import"./fieldUtils-tmQlKvWo.js";import"./intl-CChhNOV8.js";import"./date-DlqISzcw.js";import"./locale-C9TlLpzi.js";import"./messages-OmQvZhAg.js";import"./timeUtils-8fb_2oAt.js";import"./Query-5Xpquc1r.js";import"./enumeration-Ba5njXdz.js";import"./DataLayerSource-BKkswDvG.js";import"./Field-ybkHhtnK.js";import"./fieldType-BuzM0UHS.js";import"./FullTextSearch-Csd1Hktu.js";import"./Clonable-D3rtuBWg.js";import"./TimeExtent-DocT5yPf.js";import"./InputManager-Ba9xzDpe.js";import"./Queue-yu3bZ02p.js";import"./signal-D4lghLjV.js";import"./keybindings-DoOdil3D.js";import"./utils-BpB3MnW1.js";import"./Version-BSlAgupz.js";import"./vec2-maR1OrZI.js";import"./vec2f64-miziP1SN.js";import"./vec42-YcqnINSP.js";import"./vec4f64-o2zAXfmz.js";import"./plane-IENfwZlB.js";import"./mat3f64-BBpwCtoL.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-CCm9z-pX.js";import"./mathUtils-BG-eq9fO.js";import"./sphere-C77djCO6.js";import"./mat4-GpOFENPA.js";import"./mat3-BRl2i9Bz.js";import"./geometry2dUtils-DdyQE7AQ.js";import"./screenUtils-_ZIvrt5o.js";import"./viewUtils-DrPohWV3.js";let n=class extends X{constructor(t){super(t),this.options=null}destroy(){this._set("options",null)}get grid(){return this.view.grid}get effectiveViewRotation(){var t;return(t=this.grid)!=null&&t.rotateWithMap?0:E(this.view.rotation??0)}get gridRotation(){var t;return E(((t=this.grid)==null?void 0:t.rotation)??0)}get gridCenter(){var r;const{spatialReference:t,grid:i}=this;if(!i||!t||!F(i.center.spatialReference,t))return null;try{const e=G(i.center,t),o=t.isWrappable&&((r=this.view)==null?void 0:r.center)!=null?O(e.x,this.view.center.x,t):e.x;return d(o,e.y,e.z)}catch(e){return Y.getLogger(this).errorOnce("Grid Snapping - Failed to project grid center.",e),null}}get offsetScaleFactor(){const{pixelsPerStride:t,grid:i}=this;if(!i||!t)return 1;const{majorLineInterval:r,dynamicScaling:e}=i;return r<1?null:B(r,t,e)}get spatialReference(){return this.view.spatialReference}get gridMetersPerStride(){const{grid:t}=this;return t?I(t.spacing,t.units,"meters"):null}get viewMetersPerPixel(){const{viewMetersPerSRUnit:t}=this;return t==null?null:t*W(this.view.scale,this.view.spatialReference)}get viewMetersPerSRUnit(){const{spatialReference:t}=this.view;return this.gridCenter?H(this.gridCenter[0],this.gridCenter[1],t):null}get pixelsPerStride(){const{gridMetersPerStride:t,viewMetersPerPixel:i}=this;return i&&t?t/i:null}get updating(){return this.grid!=null&&this.spatialReference!=null&&this.viewMetersPerSRUnit==null}async fetchCandidates(t,i,r){var m;const{options:e,view:o}=this;if(!(e!=null&&e.effectiveGridEnabled)||!o.grid||(m=r.feature)!=null&&m.attributes&&T in r.feature.attributes)return[];const s=r.coordinateHelper.arrayToPoint(t),a=e.distance*(r.pointer==="touch"?e.touchSensitivityMultiplier:1);return this.fetchCandidatesSync(s,a)}fetchCandidatesSync(t,i){const r=[],{grid:e,effectiveViewRotation:o,gridRotation:s,gridCenter:a,viewMetersPerPixel:m,viewMetersPerSRUnit:f,offsetScaleFactor:S,spatialReference:g,gridMetersPerStride:C,pixelsPerStride:b}=this;if(!(e&&m&&f&&a&&g&&S&&C&&b)||!e.dynamicScaling&&b<K||!F(t.spatialReference,g))return r;const y=G(t,g),L=d(y.x,y.y,y.z),u=h(L,-s,a,-o),P=C/f*S,c=q(u,P,a),{shouldSnapX:w,shouldSnapY:v}=A(c,u,i,m,f);if(!w&&!v)return[];const V=d((w?c:u)[0],(v?c:u)[1]),M=h(V,s,a,o),$=h(c,s,a,o);if(v){const R=z(c,u,P,"y"),x=h(R,s,a,o);r.push(new j({lineStart:$,lineEnd:x,targetPoint:M,isDraped:!1}))}if(w){const R=z(c,u,P,"x"),x=h(R,s,a,o);r.push(new j({lineStart:$,lineEnd:x,targetPoint:M,isDraped:!1}))}return w&&v&&r.push(new _(M,r[0],r[1],!1)),r}};p([l({constructOnly:!0})],n.prototype,"view",void 0),p([l()],n.prototype,"options",void 0),p([l()],n.prototype,"grid",null),p([l()],n.prototype,"effectiveViewRotation",null),p([l()],n.prototype,"gridRotation",null),p([l()],n.prototype,"gridCenter",null),p([l()],n.prototype,"offsetScaleFactor",null),p([l()],n.prototype,"spatialReference",null),p([l()],n.prototype,"gridMetersPerStride",null),p([l()],n.prototype,"viewMetersPerPixel",null),p([l()],n.prototype,"viewMetersPerSRUnit",null),p([l()],n.prototype,"pixelsPerStride",null),p([l()],n.prototype,"updating",null),n=p([D("esri.views.interactive.snapping.GridSnappingEngine")],n);const h=(t,i,r,e)=>{const o=k(t[0],t[1],t[2]);return U(o,U(o,o,r,i),r,e)},q=(t,i,r)=>{const e=(t[0]-r[0])/i,o=(t[1]-r[1])/i,s=Math.trunc(e),a=Math.trunc(o),m=Math.round(e%1),f=Math.round(o%1),S=r[0]+(s+m)*i,g=r[1]+(a+f)*i;return d(S,g)},A=(t,i,r,e,o)=>{if(e<=0)return{shouldSnapX:!1,shouldSnapY:!1};const s=(t[0]-i[0])/e,a=(t[1]-i[1])/e;return{shouldSnapX:Math.abs(s*o)<r,shouldSnapY:Math.abs(a*o)<r}},z=(t,i,r,e)=>{if(e==="y"){const s=i[0]>t[0]?1:-1;return d(t[0]+r*s,t[1])}const o=i[1]>t[1]?1:-1;return d(t[0],t[1]+r*o)};export{n as GridSnappingEngine};
