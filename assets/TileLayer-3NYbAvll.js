import{aF as _,aI as v,bV as S,G as m,dE as T,du as b,D as u,aC as w,bc as O,cZ as $,dF as R,c as s,f as a,b0 as W,aZ as U,dG as j,g as P,bO as I}from"./index-XUlETPJZ.js";import{m as L}from"./MultiOriginJSONSupport-7Qbe2KAC.js";import{i as A}from"./APIKeyMixin-yDqtxogw.js";import{p as B}from"./ArcGISCachedService-Or9qpN-K.js";import{E as C,f as M,X as N}from"./SublayersOwner-bmCXIrfa.js";import{l as D}from"./ArcGISService-js_eTuu8.js";import{a as k}from"./BlendLayer-zma1Sosw.js";import{o as G}from"./CustomParametersMixin-IV-ZCkcb.js";import{u as J}from"./OperationalLayer-JqRxI3_b.js";import{j as q}from"./PortalLayer-TJUoDBMJ.js";import{f as E}from"./RefreshableLayer-jUlr6EOh.js";import{t as V}from"./ScaleRangeLayer-yPctuALK.js";import{d as F}from"./commonProperties-vCf9FiI6.js";import{o as y}from"./imageBitmapUtils-SEevvNoR.js";import"./TileInfoTilemapCache-M1ux9qYv.js";import"./TilemapCache-OgbOUc0i.js";import"./ByteSizeUnit-UjtePjs8.js";import"./LRUCache-P08N0BvZ.js";import"./Version-Wg9g_vDJ.js";import"./portalItemUtils-iR0JCk79.js";import"./UniqueValueRenderer-rNHfFDwn.js";import"./LegendOptions-KuTIRvg3.js";import"./diffUtils-FaRWg0DV.js";import"./SizeVariable-eDAmtsU9.js";import"./colorRamps-ucREs6wJ.js";import"./lengthUtils-uQbLh4h5.js";import"./ColorStop-FEjpkiot.js";import"./jsonUtils-FMkyl16O.js";import"./styleUtils-dULYu5Y-.js";import"./jsonUtils-RoKG_qA6.js";import"./DictionaryLoader-uS0Mi-We.js";import"./FieldsIndex-zLaqSf7A.js";import"./UnknownTimeZone-6z8cnIoM.js";import"./heatmapUtils-mFECwRl0.js";import"./vec4f64-_4WP0ZGf.js";import"./QueryTask-bD0XW1FN.js";import"./Query-XYhmJAcm.js";import"./Field-BZWZB6E0.js";import"./fieldType-h3FAXGdT.js";import"./executeForIds-Ej-0Dfrj.js";import"./query-zZyiJ9CO.js";import"./pbfQueryUtils-9R9dOnXI.js";import"./pbf-XJzY62Pa.js";import"./OptimizedGeometry-1RFAES06.js";import"./OptimizedFeatureSet-smVI1ez9.js";import"./queryZScale-JMBNq6Za.js";import"./executeQueryJSON-zeoSQNEA.js";import"./FeatureSet-41fq-equ.js";import"./executeQueryPBF-a1QzgvoO.js";import"./featureConversionUtils-AHVFLuq1.js";import"./FeatureType-7uQm1xKd.js";import"./FeatureTemplate-KrlpBNrV.js";import"./LabelClass-lFhwM9-Q.js";import"./labelUtils-bgvBkKE5.js";import"./defaultsJSON-HVtDPFXZ.js";import"./labelingInfo-yCRiW8FB.js";import"./LayerFloorInfo-DUJA49Sf.js";import"./serviceCapabilitiesUtils-sM67UNKK.js";import"./AttachmentQuery-5LMwiYDr.js";import"./popupUtils-jwtllF6O.js";import"./sublayerUtils-HEWMZz4h.js";import"./jsonUtils-SBL1xwKC.js";import"./parser-5WRmuohq.js";import"./ElevationInfo-W4L0wkkh.js";var d;const f=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let i=d=class extends k(V(C(B(M(J(q(D(L(E(A(G(I)))))))))))){constructor(...e){super(...e),this.listMode="show",this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(_).then(()=>this._fetchService(r))),Promise.resolve(this)}get attributionDataUrl(){var r;const e=(r=this.parsedUrl)==null?void 0:r.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){var t;return(e=e||((t=r.tileInfo)==null?void 0:t.spatialReference))&&v.fromJSON(e)}writeSublayers(e,r,t,o){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten(({sublayers:l})=>l&&l.toArray().reverse()).toArray(),n=[],c={writeSublayerStructure:!1,...o};p.forEach(l=>{const h=l.write({},c);n.push(h)}),n.some(l=>Object.keys(l).length>1)&&(r.layers=n)}get tileServers(){var e;return this._getDefaultTileServers((e=this.parsedUrl)==null?void 0:e.path)}castTileServers(e){return Array.isArray(e)?e.map(r=>S(r).path):null}fetchTile(e,r,t,o={}){const{signal:p}=o,n=this.getTileUrl(e,r,t),c={responseType:"image",signal:p,query:{...this.refreshParameters}};return m(n,c).then(l=>l.data)}async fetchImageBitmapTile(e,r,t,o={}){const{signal:p}=o;if(this.fetchTile!==d.prototype.fetchTile){const h=await this.fetchTile(e,r,t,o);return y(h,e,r,t,p)}const n=this.getTileUrl(e,r,t),c={responseType:"blob",signal:p,query:{...this.refreshParameters}},{data:l}=await m(n,c);return y(l,e,r,t,p)}getTileUrl(e,r,t){var c,l;const o=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,p=T({...(c=this.parsedUrl)==null?void 0:c.query,blankTile:!o&&null,...this.customParameters,token:this.apiKey}),n=this.tileServers;return`${n&&n.length?n[r%n.length]:(l=this.parsedUrl)==null?void 0:l.path}/tile/${e}/${r}/${t}${p?"?"+p:""}`}loadAll(){return b(this,e=>{e(this.allSublayers)})}_fetchService(e){return new Promise((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new u("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new u("tile-layer:undefined-url","layer's url is not defined");const o=w(this.parsedUrl.path);if(o!=null&&o.serverType==="ImageServer")throw new u("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");m(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)}).then(r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!O(t))return this._fetchServerVersion(t,e).then(o=>{this.read({currentVersion:o})}).catch(()=>{})})}_fetchServerVersion(e,r){if(!$(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return m(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then(o=>{if(o.data&&o.data.currentVersion)return o.data.currentVersion;throw new u("tile-layer:version-not-available")})}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^\/]+(\/[^\/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,o=f.length;t<o;t++)if(r=f[t],r.toLowerCase().includes(e))return R("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};s([a({readOnly:!0})],i.prototype,"attributionDataUrl",null),s([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),s([a({json:{read:!0,write:!0}})],i.prototype,"blendMode",void 0),s([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),s([a({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),s([a({type:Boolean})],i.prototype,"resampling",void 0),s([a()],i.prototype,"sourceJSON",void 0),s([a({type:v})],i.prototype,"spatialReference",void 0),s([W("spatialReference",["spatialReference","tileInfo"])],i.prototype,"readSpatialReference",null),s([a({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],i.prototype,"path",void 0),s([a({readOnly:!0})],i.prototype,"sublayers",void 0),s([U("sublayers",{layers:{type:[N]}})],i.prototype,"writeSublayers",null),s([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),s([a()],i.prototype,"tileServers",null),s([j("tileServers")],i.prototype,"castTileServers",null),s([a({readOnly:!0,json:{read:!1}})],i.prototype,"type",void 0),s([a(F)],i.prototype,"url",void 0),i=d=s([P("esri.layers.TileLayer")],i);const g=Symbol("default-fetch-tile");i.prototype.fetchTile[g]=!0;const tr=i;export{tr as default};
