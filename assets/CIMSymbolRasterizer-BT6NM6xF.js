import{i as F}from"./CIMResourceManager-Xtpsm_pU.js";import{t as G,u as O,h as T}from"./CIMSymbolHelper-Vkq7AVTn.js";import{OverrideHelper as q}from"./OverrideHelper-CrxTOYuK.js";import{T as S,R as D}from"./rasterizingUtils-5QTNbyfl.js";import{V as z}from"./utils-B91u8350.js";import"./fontUtils-D0SfAiSy.js";import"./Accessor-BHnuXKD2.js";import"./imageUtils-brik-GLm.js";import"./index-tefRSezt.js";import"./cast-BA_-jlhc.js";import"./JSONSupport-CGdeqxpk.js";import"./BidiEngine-DNnuvc1i.js";import"./screenUtils-_ZIvrt5o.js";import"./Polyline-BmuD2-ZN.js";import"./writer-B2bQV2uU.js";import"./Extent-CBBGeHb-.js";import"./Point-XGrwlf63.js";import"./mathUtils-DV9iOXpW.js";import"./TextSymbol-BQ_NW9Xo.js";import"./Color-gncXBiLc.js";import"./colorUtils-Rxh2V3ai.js";import"./enumeration-Cr5WIZs4.js";import"./jsonUtils-Cu7OBRmN.js";import"./OptimizedGeometry-7IxBWtHr.js";import"./memoryEstimations-5gFNwkKK.js";import"./GeometryUtils-B5FJlfZD.js";import"./enums-BJSSbDkD.js";import"./defaultCIMValues-DII_GG3u.js";import"./definitions-LJaw2n5Z.js";import"./mat2d-D9DBP-jx.js";import"./common-DQOJ18NT.js";import"./mat2df32-orApM5a3.js";import"./vec2-maR1OrZI.js";import"./vec2f32-BbH2jxlN.js";import"./Rect-CUzevAry.js";import"./BoundingBox-CnpCxTZE.js";import"./defaults-Dwxdhopq.js";import"./defaultsJSON-GKolV7NZ.js";import"./colorUtils-BAowQmkN.js";import"./vec42-YcqnINSP.js";import"./vec4f64-o2zAXfmz.js";import"./opacityUtils-CSd4XoR2.js";import"./Promise-CmQqe-ke.js";import"./callExpressionWithFeature-CM_sm0iu.js";import"./quantizationUtils-2Az-xHPA.js";import"./floatRGBA-CR2j2c7-.js";const A=96/72;class kt{constructor(s){this._spatialReference=s,this._imageDataCanvas=null,this._cimResourceManager=new F}get _canvas(){return this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas")),this._imageDataCanvas}get resourceManager(){return this._cimResourceManager}async rasterizeCIMSymbolAsync(s,h,a,M,I,n,l,p,g,x){if(!s)return null;const{data:y}=s;if(!y||y.type!=="CIMSymbolReference"||!y.symbol)return null;const{symbol:v}=y;n||(n=z(v));const m=await q.resolveSymbolOverrides(y,h,this._spatialReference,I,n,l,p),d=this._cimResourceManager,f=[];G.fetchResources(m,d,f),G.fetchFonts(m,d,f),f.length>0&&await Promise.all(f);const{width:e,height:r}=a;let b=k(n,e,r,M,x);const t=G.getEnvelope(m,b,d);if(!t)return null;t.x===1/0&&(t.x=e+2),t.y===1/0&&(t.y=-r/2),t.width===-1/0&&(t.width=e),t.height===-1/0&&(t.height=r);let c=1,_=0,C=0;switch(v.type){case"CIMPointSymbol":case"CIMTextSymbol":{let i=1;t.width>e&&(i=e/t.width);let o=1;t.height>r&&(o=r/t.height),M==="preview"&&(t.width<e&&(i=e/t.width),t.height<r&&(o=r/t.height)),c=Math.min(i,o),_=t.x+t.width/2,C=t.y+t.height/2}break;case"CIMLineSymbol":if(x){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,o=t.height-r;b={paths:S(b.paths,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+o,ymax:t.height/2-o,width:t.width-2*i,height:t.height-2*o})}}else{(g||t.height>r)&&(c=r/t.height),C=t.y+t.height/2;const i=t.x*c+e/2,o=(t.x+t.width)*c+e/2,{paths:R}=b;R[0][0][0]-=i/c,R[0][2][0]-=(o-e)/c}break;case"CIMPolygonSymbol":if(x){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,o=t.height-r;b={paths:S(b.rings,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+o,ymax:t.height/2-o,width:t.width-2*i,height:t.height-2*o})}}else{_=t.x+t.width/2,C=t.y+t.height/2;const i=t.x*c+e/2,o=(t.x+t.width)*c+e/2,R=t.y*c+r/2,P=(t.y+t.height)*c+r/2,{rings:w}=b;i<0&&(w[0][0][0]-=i,w[0][3][0]-=i,w[0][4][0]-=i),R<0&&(w[0][0][1]+=R,w[0][1][1]+=R,w[0][4][1]+=R),o>e&&(w[0][1][0]-=o-e,w[0][2][0]-=o-e),P>r&&(w[0][2][1]+=P-r,w[0][3][1]+=P-r)}}const E={type:"cim",data:{type:"CIMSymbolReference",symbol:m}};return this.rasterize(E,e,r,_,C,c,n,1,b)}rasterize(s,h,a,M,I,n,l,p=0,g=null,x=window.devicePixelRatio||1){const{data:y}=s;if(!y||y.type!=="CIMSymbolReference"||!y.symbol)return null;const{symbol:v}=y,m=this._canvas,d=x*A;m.width=h*d,m.height=a*d,l||(l=z(v)),g||(g=k(l,h,a,"legend")),m.width+=2*p,m.height+=2*p;const f=m.getContext("2d",{willReadFrequently:!0}),e=T.createIdentity();return e.translate(-M,-I),e.scale(n*d,-n*d),e.translate(h*d/2+p,a*d/2+p),f.clearRect(0,0,m.width,m.height),new O(f,this._cimResourceManager,e,!0).drawSymbol(v,g),f.getImageData(0,0,m.width,m.height)}}function H(u,s,h,a){return s==="esriGeometryPolygon"?{rings:D(S(u.rings,{xmin:0,ymin:0,xmax:h,ymax:a,width:h,height:a}),-1*h/2,-1*a/2)}:s==="esriGeometryPolyline"?{paths:D(S(u.paths,{xmin:0,ymin:0,xmax:h,ymax:a,width:h,height:a}),-1*h/2,-1*a/2)}:null}function k(u,s,h,a,M){const n=-s/2+1,l=s/2-1,p=h/2-1,g=-h/2+1;if(M&&(u==="esriGeometryPolygon"||u==="esriGeometryPolyline")){const x=H(M,u,s,h);if(x)return x}switch(u){case"esriGeometryPoint":return{x:0,y:0};case"esriGeometryPolyline":return{paths:[[[n,0],[0,0],[l,0]]]};default:return a==="legend"?{rings:[[[n,p],[l,0],[l,g],[n,g],[n,p]]]}:{rings:[[[n,p],[l,p],[l,g],[n,g],[n,p]]]}}}export{kt as CIMSymbolRasterizer};
