import{r as u}from"./tslib.es6-B3Jf3DVX.js";import"./geometry-D964gYQX.js";import{b as M}from"./Accessor-BLX9ikPh.js";import{c as d}from"./screenUtils-_ZIvrt5o.js";import{c as _,Q as $,g as b,d as x,j as v,I as m,a as W}from"./Point-Cg0-ChZE.js";import{m as h,a as B}from"./subclass-BZA_h8Db.js";import{y as P,R}from"./geodesicUtils-FCYOaNwu.js";import{M as j}from"./normalizeUtils-EVmAQ-ak.js";import{e as k}from"./utils-BQBvadb7.js";import{d as G}from"./Polyline-D9YkgmM_.js";import"./Extent-Bf3YTe7m.js";import"./jsonMap-0cxwUWs2.js";import"./cast-Bjksrh93.js";import"./writer-DNAwXnhG.js";import"./assets-C43MgM-v.js";import"./index-Bh2oEzTI.js";import"./geodesicConstants-DWQLYX7F.js";import"./normalizeUtilsCommon-dT81xWiM.js";import"./jsonUtils-CEfjT-BK.js";import"./utils-6jMaHUrH.js";import"./utils-Bema0iXE.js";import"./mathUtils-C4_ghTv4.js";function C(t){return t>.5?{min:.5,max:1}:t>.2?{min:.2,max:.5}:{min:.1,max:.2}}function F(t,e){switch(e){case"metric":return t>1e3?{distance:m(t,"meters","kilometers"),unit:"kilometer"}:t>1?{distance:t,unit:"meter"}:t>.01?{distance:m(t,"meters","centimeters"),unit:"centimeter"}:{distance:m(t,"meters","millimeters"),unit:"millimeter"};case"imperial":return t>1609.344?{distance:m(t,"meters","miles"),unit:"mile"}:t>.3048?{distance:m(t,"meters","feet"),unit:"foot"}:{distance:m(t,"meters","inches"),unit:"inch"}}}function I(t){var s;const{isWebMercator:e,wkt:i,wkt2:r}=t;return e||(((s=r||i)==null?void 0:s.includes("WGS_1984_Web_Mercator"))??!1)}function y({state:{paddedViewState:t},spatialReference:e,width:i}){return e.isWrappable&&t.worldScreenWidth<i}function S(t,e){const{x:i,y:r}=t?W(e,!0):e;return[i,r]}let c=class extends M{constructor(t){super(t),this.scaleComputedFrom=d(),this.view=null}get state(){var t;return(t=this.view)!=null&&t.ready&&this.view.type==="2d"?k(this.view)&&!this.view.inGeographicLayout?"disabled":"ready":"disabled"}getScaleBarProperties(t,e){if(this.state==="disabled"||isNaN(t)||!e||!this.view)return null;const i=this._getDistanceInMeters();return i==null?null:this._getScaleBarProps(t,i,e)}_getDistanceInMeters(){const{state:t,spatialReference:e}=this.view;if(!_(e))return null;const{isGeographic:i}=e,r=I(e);if(!i&&!r)return t.extent.width*($(e)??1);const[s,n]=this._getScaleMeasuringPoints(),l=r||i&&!P(e)?b.WGS84:e,p=new G({paths:[[S(r,s),S(r,n)]],spatialReference:l}),o=j(p,10);let a;try{[a]=R([o],"meters")}catch{return null}return a}_getScaleMeasuringPoints(){const t=this.view,{width:e,height:i,position:r,spatialReference:s}=t;if(y(t)){const o=x(s),{valid:a}=o;return[new v(a[0],0,s),new v(a[1],0,s)]}let n=this.scaleComputedFrom.y-r[1];n>i?n=i:n<0&&(n=0);const l=d(0,n),p=d(e,n);return[t.toMap(l),t.toMap(p)]}_getScaleBarProps(t,e,i){const r=this.view,s=t*e/(y(r)?r.state.paddedViewState.worldScreenWidth:r.width);if(s<.001)return null;const n=F(s,i),{distance:l,unit:p}=n;let o=l,a=0;for(;o>=1;)o/=10,a++;const{min:f,max:w}=C(o),g=w/o>=o/f?f:w;return{length:t*(g/o),value:10**a*g,unit:p}}};u([h()],c.prototype,"scaleComputedFrom",void 0),u([h({readOnly:!0})],c.prototype,"state",null),u([h()],c.prototype,"view",void 0),c=u([B("esri.widgets.ScaleBar.ScaleBarViewModel")],c);const st=c;export{st as default};
