import{is as S,j3 as w,it as O,dT as I,dU as E,dV as M,dW as T,iu as j,iG as L,j1 as $,Z as F,r as P,aO as N,jF as v,dF as g,f as b,U as f,p as R,cv as U,dx as J,iH as q,jk as k,$ as s,a0 as o,dz as A,bL as V,dZ as z,a1 as _,d_ as G,gk as H}from"./index.f735f56e.js";import{r as W}from"./scaleUtils.0dc96d42.js";import{E as C,y as D,X as K}from"./SublayersOwner.b5af166a.js";import{c as B}from"./ExportImageParameters.bd6fe6fb.js";import{n as x}from"./sublayerUtils.4b0d2534.js";import"./Version.c87e9f60.js";import"./floorFilterUtils.69500d62.js";let r=class extends S(w(O(C(D(I(E(M(T(j(L($(F(G))))))))))))){constructor(...e){super(...e),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,i){return typeof e=="string"?{url:e,...i}:e}load(e){const i=P(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(N).then(()=>this._fetchService(i))),Promise.resolve(this)}readImageFormat(e,i){const d=i.supportedImageFormatTypes;return d&&d.includes("PNG32")?"png32":"png24"}writeSublayers(e,i,d,t){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten(({sublayers:a})=>a&&a.toArray().reverse()).toArray();let n=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const a=v(t.origin);if(a===g.PORTAL_ITEM){const y=this.createSublayersForOrigin("service").sublayers;n=x(l,y,g.SERVICE)}else if(a>g.PORTAL_ITEM){const y=this.createSublayersForOrigin("portal-item");n=x(l,y.sublayers,v(y.origin))}}const p=[],c={writeSublayerStructure:n,...t};let h=n;l.forEach(a=>{const y=a.write({},c);p.push(y),h=h||a.originOf("visible")==="user"}),p.some(a=>Object.keys(a).length>1)&&(i.layers=p),h&&(i.visibleLayers=l.filter(a=>a.visible).map(a=>a.id))}createExportImageParameters(e,i,d,t){const l=t&&t.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const n=new B({layer:this,floors:t==null?void 0:t.floors,scale:W({extent:e,width:i})*l}),p=n.toJSON();n.destroy();const c=!t||!t.rotation||this.version<10.3?{}:{rotation:-t.rotation},h=e&&e.spatialReference,a=h.wkid||JSON.stringify(h.toJSON());p.dpi*=l;const y={};if(t!=null&&t.timeExtent){const{start:m,end:u}=t.timeExtent.toJSON();y.time=m&&u&&m===u?""+m:`${m==null?"null":m},${u==null?"null":u}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:a,imageSR:a,size:i+","+d,...p,...c,...y}}async fetchImage(e,i,d,t){var p;const l={responseType:"image",signal:(p=t==null?void 0:t.signal)!=null?p:null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,i,d,t),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},n=this.parsedUrl.path+"/export";if(l.query.dynamicLayers!=null&&!this.capabilities.exportMap.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:l.query});return f(n,l).then(c=>c.data).catch(c=>{throw R(c)?c:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${n}`,{error:c})})}async fetchRecomputedExtents(e={}){const i={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:d}=await f(this.url,i),{extent:t,fullExtent:l,timeExtent:n}=d,p=t||l;return{fullExtent:p&&U.fromJSON(p),timeExtent:n&&J.fromJSON({start:n[0],end:n[1]})}}loadAll(){return q(this,e=>{e(this.allSublayers)})}serviceSupportsSpatialReference(e){return k(this,e)}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:i,ssl:d}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});d&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=i,this.read(i,{origin:"service",url:this.parsedUrl})}};s([o({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([o()],r.prototype,"dpi",void 0),s([o()],r.prototype,"gdbVersion",void 0),s([o()],r.prototype,"imageFormat",void 0),s([A("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([o()],r.prototype,"imageTransparency",void 0),s([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([o({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([o({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([o({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([o()],r.prototype,"sourceJSON",void 0),s([o({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([V("sublayers",{layers:{type:[K]},visibleLayers:{type:[H]}})],r.prototype,"writeSublayers",null),s([o({type:["show","hide","hide-children"]})],r.prototype,"listMode",void 0),s([o({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([o(z)],r.prototype,"url",void 0),r=s([_("esri.layers.MapImageLayer")],r);const se=r;export{se as default};
