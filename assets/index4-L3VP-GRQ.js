import{t as I}from"./time-zones-B23cWwRL.js";import{e as p,i as g}from"./continent-DJXoL968.js";/*!
 * All material copyright ESRI, All Rights Reserved, unless otherwise specified.
 * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.
 * v2.12.2
 */const M=new Date,T=M.toISOString(),v=365,y=v,C={groupDateRange:y,startDate:T},R=(t,a,e)=>{const o=[];let n=e.create(t);for(let l=0;l<=a;l++)n=e.increase(n),o.push(e.formatToIsoDateString(n));return o},S=(t,a,e,o)=>{const n=new Map,l=R(a,e,o);return t.map(c=>{const{label:s}=c,r=p(s),u=l.map(f=>{const d=`${f}-${s}`;let i=n.get(d);return i||(i=o.isoToTimeZone(f,s),n.set(d,i),i)});return{...c,continent:r,isRegularContinent:g(r),dates:u}})},w=(t,a,e)=>t.length===a.length&&t.every((o,n)=>e.same(o,a[n])),J=(t,a=5)=>{const e=t.filter(({label:n})=>g(p(n)));if(e.length===0)return[0];const o=e.map(n=>t.indexOf(n));return Z(o,a)};function Z(t,a=5){const e=t.length;if(e<=a)return t;const o=Math.min(e-2,a-2),n=(e-1)/(o+1);return[t[0],...Array.from({length:o},(l,c)=>t[Math.round((c+1)*n)]),t[e-1]]}async function A(t){const{groupDateRange:a,startDate:e,dateEngine:o}={...C,...t},n=[];if(!o)throw new Error("dateEngine is required");const l=I.map(s=>({label:s})),c=S(l,e,a,o);for(const s of c){const{label:r,continent:u,dates:f}=s;if(s.visited)continue;s.visited=!0;const d={labelIdx:[],tzs:[{label:r}]};for(const i of c.filter(m=>!m.visited)){const{label:m,continent:b,isRegularContinent:h,dates:z}=i;if((u===b||!h)&&w(f,z,o)){const D={label:m};d.tzs.push(D),i.visited=!0}}n.push(d)}return n.map(s=>(s.tzs=s.tzs.sort((r,u)=>r.label.localeCompare(u.label)),{labelTzIdx:J(s.tzs,7),tzs:s.tzs.map(r=>r.label)})).sort((s,r)=>r.tzs.length-s.tzs.length)}export{A as groupByOffset};
