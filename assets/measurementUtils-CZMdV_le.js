import{s as i,o as g,u as h,A as a,_ as m,P as p,g as c,v as $}from"./vec32-Dvg_eL9J.js";import{n as u}from"./vec3f64-BLpZdpfb.js";import{U as y}from"./sphere-Cin5efBj.js";import{k as M}from"./mathUtils-BgCEaV43.js";import{o as x}from"./geodesicAreaMeasurementUtils-CfJYiWyy.js";function j(t,e){const o=y(e);g(o,0,0,0);for(let r=0;r<t.length;++r)h(o,o,t[r]);c(o,o,1/t.length);let l=0;for(let r=0;r<t.length;++r)l=Math.max(l,$(o,t[r]));e[3]=Math.sqrt(l)}function k(t,e){if(t.length<3)throw new Error("need at least 3 points to fit a plane");M(t[0],t[1],t[2],e)}function q(t,e){return p(t,e)+t[3]}function v(t,e,o,l){const r=w;return i(r.rings[0][0],t),i(r.rings[0][1],e),i(r.rings[0][2],o),i(r.rings[0][3],t),r.spatialReference=l,x(r)}function E(t,e=null,o=!0){const l=(r,f)=>{if(f[0]===0&&f[1]===0&&f[2]===0)return!1;for(let s=0;s<r.length;++s)if(p(f,r[s])<-1e-6)return!1;return!0};if(t.length===0)return!1;if(t.length===1)return e&&i(e,t[0]),!0;g(n,0,0,0);for(let r=0;r<t.length;++r)h(n,n,t[r]);if(a(n,n),l(t,n))return e&&i(e,n),!0;if(!o)return!1;for(let r=0;r<t.length;++r)for(let f=0;f<t.length;++f)if(r!==f&&(m(n,t[r],t[f]),a(n,n),l(t,n)))return e&&i(e,n),!0;return!1}function T(t){return t.pointerType!=="mouse"||t.button===0}const w={hasM:!1,hasZ:!0,rings:[[u(),u(),u(),u()]],spatialReference:null,type:"polygon"},n=u();export{T as M,k as g,j as h,E as j,v as m,q as p};
