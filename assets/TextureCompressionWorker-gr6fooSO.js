import{_ as g}from"./index-4eY77cms.js";import{n as D}from"./cast-CsZslgGN.js";import{_ as A}from"./TextureFormat-1mYWTFa-.js";import{c as m}from"./enums-D9v74xTE.js";import"./Accessor-BmwT4B0c.js";import"./JSONSupport-DcrLLGjL.js";function S(){return C??(C=(async()=>{const e=await g(()=>import("./basis_encoder-sWYVw54x.js"),[],import.meta.url),t=await e.default({locateFile:r=>D(`esri/libs/basisu/${r}`)});return t.initializeBasis(),t})()),C}let C;function R(){return y??(y=(async()=>await(await g(()=>import("./dxt_encoder-gc8lv37B.js"),[],import.meta.url)).default({locateFile:t=>D(`esri/libs/dxtEncoder/${t}`)}))()),y}let y,X,b,c=null,d=null;class T{constructor(t,r){this.internalFormat=t,this.compressedTexture=r}}async function Y(e){var r;const t=M(e.data,e.flipped);if(e.hasS3TC){d||await B();const a=new Uint8Array(t.length);d==null||d.encode(new Uint8Array(t),e.width,e.height,a);const n=H(a,!0),l=[a.buffer];return{result:new T((n==null?void 0:n.internalFormat)??null,(n==null?void 0:n.textureData)??null),transferList:l}}if(e.hasETC){c||await x();const a=await F(t,e.width,e.height,e.hasMipmap),n=a?await G(a):null,l=((r=n==null?void 0:n.compressedTexture)==null?void 0:r.levels.map(s=>s.buffer))||[];return{result:new T((n==null?void 0:n.internalFormat)??null,(n==null?void 0:n.compressedTexture)??null),transferList:l}}return{result:new T(null,null)}}async function x(){c||(c=await(X??(X=S())))}async function B(){d||(d=await(b??(b=R())))}async function F(e,t,r,a,n=255,l=0,s=!1,o=!1){if(!c)return null;const i=new c.BasisEncoder;i.setPerceptual(!o),i.setCheckForAlpha(!0),i.setForceAlpha(!1),i.setRenormalize(o),i.setMipGen(a),i.setMipSRGB(!o),i.setCreateKTX2File(!0),i.setKTX2SRGBTransferFunc(!o),i.setQualityLevel(n),i.setCompressionLevel(l);const h=new Uint8Array(e.byteLength);i.setSliceSourceImage(0,new Uint8Array(e),t,r,s);const p=i.encode(h),u=new Uint8Array(h.buffer,0,p),f=new c.KTX2File(new Uint8Array(u));return f.isValid()?(i.delete(),u):(f.close(),f.delete(),i.delete(),null)}async function G(e){if(!c)return new T(null,null);const t=new c.KTX2File(new Uint8Array(e));t.startTranscoding();const[r,a]=t.getHasAlpha()?[A.ETC2_RGBA,m.COMPRESSED_RGBA8_ETC2_EAC]:[A.ETC1_RGB,m.COMPRESSED_RGB8_ETC2],n=t.getLevels(),l=[];for(let s=0;s<n;s++)l.push(new Uint8Array(t.getImageTranscodedSizeInBytes(s,0,0,r))),t.transcodeImage(l[s],s,0,0,r,0,-1,-1);return t.close(),t.delete(),{internalFormat:a,compressedTexture:{type:"compressed",levels:l}}}function M(e,t=!1){const r=new OffscreenCanvas(e.width,e.height),a=r.getContext("2d");return t&&a.scale(1,-1),a.drawImage(e,0,t?-e.height:0),a.getImageData(0,0,r.width,r.height).data}const O=31,v=1,I=2,P=3,U=4,L=7,K=21,k=131072;function w(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const z=w("DXT1"),$=w("DXT3"),V=w("DXT5");function H(e,t){const r=new Int32Array(e.buffer,e.byteOffset,O);let a,n;switch(r[K]){case z:a=8,n=m.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case $:a=16,n=m.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case V:a=16,n=m.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let l=1,s=r[U],o=r[P];(3&s||3&o)&&(s=s+3&-4,o=o+3&-4);const i=s,h=o;let p,u;r[I]&k&&t!==!1&&(l=Math.max(1,r[L]));let f=e.byteOffset+r[v]+4;const _=[];for(let E=0;E<l;++E)u=(s+3>>2)*(o+3>>2)*a,p=new Uint8Array(e.buffer,f,u),_.push(p),f+=u,s=Math.max(1,s>>1),o=Math.max(1,o>>1);return{textureData:{type:"compressed",levels:_},internalFormat:n,width:i,height:h}}export{T as TextureCompressionWorkerOutput,Y as compress,F as compressRGBADataToKTX2,G as createTextureDataKTX2,x as initializeBasisEncoder,B as initializeDXTEncoder};
