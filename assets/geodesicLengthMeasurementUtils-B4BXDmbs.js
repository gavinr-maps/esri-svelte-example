import{a as s}from"./quantityUtils-BsDK158M.js";import{n as i}from"./vec3f64-BLpZdpfb.js";import{geodesicLength as a}from"./geometryEngine-CLtm9OQA.js";import{q as m,b as c,R as u}from"./geodesicUtils-Cvz9v8ds.js";import{c as p}from"./Point-Cz2JYYmX.js";import{r as f}from"./geodesicMeasurementUtils-B-7dBAnY.js";function w(e){const{spatialReference:r}=e;return f(r,h,d,e)}function L(e,r){if(!p(e.spatialReference,r.spatialReference))return null;const{spatialReference:n}=e;return t[0]=e.x,t[1]=e.y,t[2]=e.hasZ?e.z:0,o[0]=r.x,o[1]=r.y,o[2]=r.hasZ?r.z:0,l(t,o,n)}function l(e,r,n){return f(n,R,y,e,r,n)}function R(e,r,n){return s(m(x,e,r,n).distance,"meters")}function y(e,r,n){return s(a(g(e,r,n),"meters"),"meters")}function h(e){return s(u([e],"meters")[0],"meters")}function d(e){return s(a(e,"meters"),"meters")}function g(e,r,n){return{type:"polyline",spatialReference:n,paths:[[[...e],[...r]]]}}const x=new c,t=i(),o=i();export{L as f,w as m,l as u};
