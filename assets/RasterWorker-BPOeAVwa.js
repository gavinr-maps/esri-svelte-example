import"./geometry-D964gYQX.js";import{s as f}from"./projection-B971H0Re.js";import{g as i,f as u,W as S,E as d,U as y,D as x,R as h,u as O,s as J}from"./dataUtils-CRhrrZcr.js";import{m as N,j as w,_ as B,h as P}from"./RasterSymbolizer-zx8ns-Zp.js";import{a as g,c as k,y as v,T as b}from"./GCSShiftTransform-DL7f-AoC.js";import{w as z,v as D,i as T}from"./rasterProjectionHelper-Cyb7j9c9.js";import{r as p}from"./tslib.es6-B3Jf3DVX.js";import{a as $}from"./subclass-BZA_h8Db.js";import{r as j}from"./enumeration-Ba5njXdz.js";import{w as m}from"./Extent-Bf3YTe7m.js";import{j as F}from"./Point-Cg0-ChZE.js";import"./Polyline-D9YkgmM_.js";import"./writer-DNAwXnhG.js";import"./mathUtils-C4_ghTv4.js";import"./jsonMap-0cxwUWs2.js";import"./index-Bh2oEzTI.js";import"./Accessor-BLX9ikPh.js";import"./SimpleObservable-KocWTzVy.js";import"./vec3f64-BLpZdpfb.js";import"./projectBuffer-Bs7GwaPY.js";import"./geodesicConstants-DWQLYX7F.js";import"./assets-C43MgM-v.js";import"./cast-Bjksrh93.js";import"./pixelRangeUtils-DHjFxYEg.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./Color-BCS62Hs5.js";import"./colorUtils-0bJDPow9.js";import"./colorUtils-aL8wj-8G.js";import"./vec42-YcqnINSP.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./jsonUtils-CEfjT-BK.js";import"./colorRamps-pKd7I5WZ.js";import"./Field-ybkHhtnK.js";import"./fieldType-BuzM0UHS.js";var l;let a=l=class extends g{constructor(){super(...arguments),this.type="identity"}clone(){return new l}};p([j({IdentityXform:"identity"})],a.prototype,"type",void 0),a=l=p([$("esri.layers.support.rasterTransforms.IdentityTransform")],a);const I=a,E={GCSShiftXform:k,IdentityXform:I,PolynomialXform:v};function G(n){if(!(n==null?void 0:n.type))return null;const e=E[n==null?void 0:n.type];if(e){const o=new e;return o.read(n),o}return null}class Ot{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),o=u(e,t.type);return Promise.resolve(o!=null?o.toJSON():null)}computeStatisticsHistograms(t){const e=i.fromJSON(t.pixelBlock),o=N(e);return Promise.resolve(o)}async decode(t){const e=await w(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?m.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}async updateSymbolizer(t){var e;this.symbolizer=B.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=b(t.rasterFunctionJSON)}async process(t){var o;const e=this.rasterFunction.process({extent:m.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(r=>r!=null?i.fromJSON(r):null),primaryPixelSizes:(o=t.primaryPixelSizes)==null?void 0:o.map(r=>r!=null?F.fromJSON(r):null),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e==null?void 0:e.toJSON())}estimateStatisticsHistograms(t){const e=P(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=S(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return e&&e.forEach((o,r)=>{e.set(r,o==null?void 0:o.toJSON())}),Promise.resolve(e)}clipTile(t){const e=i.fromJSON(t.pixelBlock),o=d({...t,pixelBlock:e});return Promise.resolve(o==null?void 0:o.toJSON())}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(c=>c?new i(c):null),o=y(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,s=o;return t.coefs&&(s=x(o,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=h(t.destDimension,t.gcsGrid),s=O(s,t.isUV?"vector-uv":"vector-magdir",r)),{pixelBlock:s==null?void 0:s.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const o={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:s}=await J(t.meshType,t.simulationSettings,o,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:s.buffer},transferList:[r.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const e=m.fromJSON(t.projectedExtent),o=m.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new f({steps:t.datumTransformationSteps})),(t.includeGCSGrid||z(e.spatialReference,o.spatialReference,r))&&await D();const s=t.rasterTransform?G(t.rasterTransform):null;return T({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:r,rasterTransform:s})}}export{Ot as default};
