import{h as p,b as a}from"./subclass-BZA_h8Db.js";import{b as l}from"./Portal-C10FKnaA.js";import{p as s,n as c}from"./project-DlMfXva8.js";import"./index-Bh2oEzTI.js";import"./tslib.es6-B3Jf3DVX.js";import"./assets-C43MgM-v.js";import"./Accessor-BLX9ikPh.js";import"./Loadable-BabW5Xcc.js";import"./Promise-B2Hu02L7.js";import"./writer-DNAwXnhG.js";import"./Extent-Bf3YTe7m.js";import"./Point-Cg0-ChZE.js";import"./cast-Bjksrh93.js";import"./jsonMap-0cxwUWs2.js";import"./locale-C9TlLpzi.js";import"./jsonUtils-CEfjT-BK.js";import"./Polyline-D9YkgmM_.js";import"./mathUtils-C4_ghTv4.js";import"./utils-6jMaHUrH.js";import"./utils-Bema0iXE.js";async function f(r=null,m){var i,o;if(p.geometryServiceUrl)return p.geometryServiceUrl;if(!r)throw new a("internal:geometry-service-url-not-configured");let e;e="portal"in r?r.portal||l.getDefault():r,await e.load({signal:m});const t=(o=(i=e.helperServices)==null?void 0:i.geometry)==null?void 0:o.url;if(!t)throw new a("internal:geometry-service-url-not-configured");return t}async function z(r,m,e=null,t){const i=await f(e,t),o=new s({geometries:[r],outSpatialReference:m}),n=await c(i,o,{signal:t});if(n&&Array.isArray(n)&&n.length===1)return n[0];throw new a("internal:geometry-service-projection-failed")}export{f as getGeometryServiceURL,z as projectGeometry};
