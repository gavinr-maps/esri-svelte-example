import{r as i}from"./tslib.es6-B3Jf3DVX.js";import{U as f}from"./assets-C43MgM-v.js";import{b as v,m as p,x as $,a as O}from"./subclass-BZA_h8Db.js";import{t as T}from"./loadAll-B6mYSptb.js";import{S as P}from"./MultiOriginJSONSupport-B5nfqtQh.js";import{p as E,E as x,d as g,c as L}from"./Accessor-BLX9ikPh.js";import{o as F,r as M}from"./writer-DNAwXnhG.js";import{w as R}from"./Extent-Bf3YTe7m.js";import{i as U}from"./scaleUtils-D_Nw3nhM.js";import{a5 as _}from"./Point-Cg0-ChZE.js";import j from"./Layer-CVt7Hb5J.js";import{i as J}from"./APIKeyMixin-Di9kcRBS.js";import{m as N,f as q,t as A}from"./SublayersOwner-CVD3EI_7.js";import{l as V}from"./ArcGISService-B5qxetOY.js";import{l as k}from"./BlendLayer-CXM4n_Ge.js";import{e as z}from"./CustomParametersMixin-B4u7wiBT.js";import{b as Z}from"./OperationalLayer-CVyVfSPu.js";import{j as B}from"./PortalLayer-CKja4bdW.js";import{f as C}from"./RefreshableLayer-D7lXUJRS.js";import{t as D}from"./ScaleRangeLayer-Bb8Ig1Hz.js";import{l as G}from"./TemporalLayer-Dpq2hKKV.js";import{y as H}from"./commonProperties-CPyIG_-u.js";import{y as K}from"./ExportImageParameters-D2m0BUqR.js";import{t as W}from"./imageBitmapUtils-aMNhrXcv.js";import{e as S}from"./sublayerUtils-DEyYrAdA.js";import{t as Q}from"./versionUtils-CQ_WhYSP.js";import{p as X}from"./TimeExtent-DocT5yPf.js";import{c as I}from"./date-DlqISzcw.js";import"./index-Bh2oEzTI.js";import"./asyncUtils-CWX51uTe.js";import"./Collection-CEdjem1-.js";import"./Evented-BHRw9x22.js";import"./shared-B3wH2qpO.js";import"./SimpleObservable-KocWTzVy.js";import"./Loadable-BabW5Xcc.js";import"./Promise-B2Hu02L7.js";import"./mathUtils-C4_ghTv4.js";import"./cast-Bjksrh93.js";import"./jsonMap-0cxwUWs2.js";import"./geometry-D964gYQX.js";import"./Polyline-D9YkgmM_.js";import"./Identifiable-B1UbsKNt.js";import"./Version-BSlAgupz.js";import"./arcgisLayerUrl-BX1FE5Hm.js";import"./persistableUrlUtils-fa1mAujs.js";import"./portalItemUtils-BzVoFAku.js";import"./projection-B971H0Re.js";import"./vec3f64-BLpZdpfb.js";import"./projectBuffer-Bs7GwaPY.js";import"./geodesicConstants-DWQLYX7F.js";import"./CollectionFlattener-CQN6i8ZK.js";import"./reactiveUtils-C5zUhJQJ.js";import"./PopupTemplate-BHMhS05j.js";import"./Clonable-D3rtuBWg.js";import"./fieldUtils-tmQlKvWo.js";import"./intl-CChhNOV8.js";import"./locale-C9TlLpzi.js";import"./messages-OmQvZhAg.js";import"./enumeration-Ba5njXdz.js";import"./Color-BCS62Hs5.js";import"./colorUtils-0bJDPow9.js";import"./ActionToggle-iT4slXc7.js";import"./ClassBreaksRenderer-BuHwSyVK.js";import"./symbols-CNimns--.js";import"./TextSymbol-D8QO_KUV.js";import"./screenUtils-_ZIvrt5o.js";import"./materialUtils-DarhapKC.js";import"./opacityUtils-C68Tlu6_.js";import"./aaBoundingBox-BE7cC1jD.js";import"./collectionUtils-D_lHIu88.js";import"./Portal-C10FKnaA.js";import"./UniqueValueRenderer-BQtAHUSo.js";import"./diffUtils-BP7jmOAy.js";import"./colorRamps-pKd7I5WZ.js";import"./SizeVariable-936USOrb.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-DX1kS9Se.js";import"./Graphic-DsxsIjhH.js";import"./jsonUtils-CEfjT-BK.js";import"./compilerUtils-Dw3R0f-Z.js";import"./lengthUtils-DL1-FDQQ.js";import"./ColorStop-Dk3U5tCk.js";import"./jsonUtils-Ds2Sqto-.js";import"./layerUtils-BrNoooE9.js";import"./defaults-DZ1kfMRx.js";import"./defaultsJSON-GKolV7NZ.js";import"./RendererLegendOptions-B-4se3aU.js";import"./styleUtils-BYTm14n3.js";import"./jsonUtils-DxpLMo6d.js";import"./LRUCache-B_PHMSGm.js";import"./MemCache-Dx1v3xLC.js";import"./FieldsIndex-DpwHKAMX.js";import"./UnknownTimeZone-BkowvBs8.js";import"./OverrideHelper-ti072FkP.js";import"./colorUtils-aL8wj-8G.js";import"./vec42-YcqnINSP.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./utils-D2PLyMFF.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-uj_P09aO.js";import"./HeatmapColorStop-BJc5nbwr.js";import"./heatmapUtils-Dwiv9IEa.js";import"./SimpleRenderer-BV2L9G_n.js";import"./QueryTask-C8VdGZ7z.js";import"./infoFor3D-C0hFfS1m.js";import"./DataLayerSource-BKkswDvG.js";import"./Field-ybkHhtnK.js";import"./fieldType-BuzM0UHS.js";import"./utils-6jMaHUrH.js";import"./executeForIds-BCHBDnMa.js";import"./query-Dw-gv3BA.js";import"./normalizeUtils-EVmAQ-ak.js";import"./normalizeUtilsCommon-dT81xWiM.js";import"./utils-Bema0iXE.js";import"./pbfQueryUtils-B0fU-MiS.js";import"./pbf-BtDZ1BpD.js";import"./OptimizedGeometry-BF8iz5FO.js";import"./OptimizedFeature-6cJ-QFG5.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-w66xFVGx.js";import"./Query-5Xpquc1r.js";import"./FullTextSearch-Csd1Hktu.js";import"./executeQueryJSON-Cis2sczl.js";import"./FeatureSet-BHEkYP03.js";import"./featureConversionUtils-D14h8iad.js";import"./featureLayerUtils-DBsQMhTm.js";import"./featureQueryAll-DnVoEjkM.js";import"./AttachmentQuery-BUlkjzkx.js";import"./RelationshipQuery-DPPNeuLK.js";import"./FeatureType-C0q_coeM.js";import"./FeatureTemplate-CssMa1yk.js";import"./labelingInfo-DYPSPZCH.js";import"./labelUtils-B8petyBk.js";import"./LayerFloorInfo-CIQjg5Vk.js";import"./Relationship-COPq3qM4.js";import"./serviceCapabilitiesUtils-DAE5z8FP.js";import"./popupUtils-BBuPGAHd.js";import"./jsonUtils-CSnQD004.js";import"./parser-CTsgEym6.js";import"./utils-93yNk4Xc.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-GpOFENPA.js";import"./layerContainerType-C5CzMsLd.js";import"./PortalItem-DzgXrpyc.js";import"./TimeInfo-LUiaSFyX.js";import"./TimeInterval-CNlkea1s.js";import"./timeUtils-8fb_2oAt.js";import"./ElevationInfo-CA5m_tHv.js";import"./unitConversionUtils-BMfW9yAe.js";import"./AttributeTableTemplate-BZeVyq-j.js";import"./floorFilterUtils-DZ5C6FQv.js";let o=class extends k(G(D(N(q(V(Z(B(P(C(J(z(j)))))))))))){constructor(...r){super(...r),this._exportImageParameters=new K({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(r,e){return typeof r=="string"?{url:r,...e}:r}load(r){const e=r!=null?r.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},r).catch(E).then(()=>this._fetchService(e))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(r,e){const n=e.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(r,e,n,t){var l,d,b;if(!this.loaded||!r)return;const s=r.slice().reverse().flatten(({sublayers:m})=>m&&m.toArray().reverse()).toArray();let a=!1;const h=x(t.origin);if((l=this.capabilities)!=null&&l.operations.supportsExportMap&&((b=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&b.supportsDynamicLayers)){if(h===g.PORTAL_ITEM){const m=this.createSublayersForOrigin("service").sublayers;a=S(s,m,g.SERVICE)}else if(h>g.PORTAL_ITEM){const m=this.createSublayersForOrigin("portal-item");a=S(s,m.sublayers,x(m.origin))}}const c=[],u={writeSublayerStructure:a,...t};let y=a||this.hasVisibleLayersForOrigin(h);s.forEach(m=>{const w=m.write({},u);c.push(w),y=y||m.originOf("visible")==="user"}),c.some(m=>Object.keys(m).length>1)&&(e.layers=c),y&&(e.visibleLayers=s.filter(m=>m.visible).map(m=>m.id))}createExportImageParameters(r,e,n,t){const s=(t==null?void 0:t.pixelRatio)||1;r&&this.version>=10&&(r=r.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=U({extent:r,width:e})*s;const a=this._exportImageParameters.toJSON(),h=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=r==null?void 0:r.spatialReference,u=_(c);a.dpi*=s;const y={};if(t!=null&&t.timeExtent){const{start:l,end:d}=t.timeExtent.toJSON();y.time=l&&d&&l===d?""+l:`${l??"null"},${d??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:r&&r.xmin+","+r.ymin+","+r.xmax+","+r.ymax,bboxSR:u,imageSR:u,size:e+","+n,...a,...h,...y}}async fetchImage(r,e,n,t){const{data:s}=await this._fetchImage("image",r,e,n,t);return s}async fetchImageBitmap(r,e,n,t){const{data:s,url:a}=await this._fetchImage("blob",r,e,n,t);return W(s,a,t==null?void 0:t.signal)}async fetchRecomputedExtents(r={}){const e={...r,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await f(this.url,e),{extent:t,fullExtent:s,timeExtent:a}=n,h=t||s;return{fullExtent:h&&R.fromJSON(h),timeExtent:a&&X.fromJSON({start:a[0],end:a[1]})}}loadAll(){return T(this,r=>{r(this.allSublayers),r(this.subtables)})}serviceSupportsSpatialReference(r){return Q(this,r)}async _fetchImage(r,e,n,t,s){var c,u,y;const a={responseType:r,signal:(s==null?void 0:s.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,n,t,s),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((c=a.query)==null?void 0:c.dynamicLayers)!=null&&!((y=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&y.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});try{const{data:l}=await f(h,a);return{data:l,url:h}}catch(l){throw L(l)?l:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:l})}}async _fetchService(r){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:e,ssl:n}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:r});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=e,this.read(e,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(r){var e;return!(r==null||!((e=this.sublayersSourceJSON[r])!=null&&e.visibleLayers))}};i([p(I("dateFieldsTimeReference"))],o.prototype,"dateFieldsTimeZone",void 0),i([p({type:Boolean})],o.prototype,"datesInUnknownTimezone",void 0),i([p()],o.prototype,"dpi",void 0),i([p()],o.prototype,"gdbVersion",void 0),i([p()],o.prototype,"imageFormat",void 0),i([F("imageFormat",["supportedImageFormatTypes"])],o.prototype,"readImageFormat",null),i([p({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],o.prototype,"imageMaxHeight",void 0),i([p({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],o.prototype,"imageMaxWidth",void 0),i([p()],o.prototype,"imageTransparency",void 0),i([p({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],o.prototype,"isReference",void 0),i([p({json:{read:!1,write:!1}})],o.prototype,"labelsVisible",void 0),i([p({type:["ArcGISMapServiceLayer"]})],o.prototype,"operationalLayerType",void 0),i([p({json:{read:!1,write:!1}})],o.prototype,"popupEnabled",void 0),i([p(I("preferredTimeReference"))],o.prototype,"preferredTimeZone",void 0),i([p()],o.prototype,"sourceJSON",void 0),i([p({json:{write:{ignoreOrigin:!0}}})],o.prototype,"sublayers",void 0),i([M("sublayers",{layers:{type:[A]},visibleLayers:{type:[$]}})],o.prototype,"writeSublayers",null),i([p({type:["show","hide","hide-children"]})],o.prototype,"listMode",void 0),i([p({json:{read:!1},readOnly:!0,value:"map-image"})],o.prototype,"type",void 0),i([p(H)],o.prototype,"url",void 0),o=i([O("esri.layers.MapImageLayer")],o);const Ze=o;export{Ze as default};
