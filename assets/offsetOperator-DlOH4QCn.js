import{G as j}from"./Accessor-BHnuXKD2.js";import{a8 as f}from"./Point-XGrwlf63.js";import{w as x,j as d}from"./operatorOffset-Dykeaev0.js";import{getSpatialReference as c,fromGeometry as y,toGeometry as u,fromGeometries as g}from"./jsonConverter-BddGRRgO.js";import"./cast-BA_-jlhc.js";import"./index-tefRSezt.js";import"./JSONSupport-CGdeqxpk.js";import"./writer-B2bQV2uU.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./ProjectionTransformation-DzMxxvj3.js";import"./Transformation2D-BSBl8u-h.js";const l={round:0,bevel:1,miter:2,square:3};function B(r,t,n={}){const{miterLimit:a=10,flattenError:p=0,joins:s="round",unit:e}=n,o=c(r);e&&o&&(t=f(t,e,o));const i=y(r),m=i.getSpatialReference();return u(x(i.getGeometry(),m,t,l[s],a,p),m)}function P(r,t,n={}){const{miterLimit:a=10,flattenError:p=0,joins:s="round",unit:e}=n,o=c(r);e&&o&&(t=f(t,e,o));const[i,m]=g(r);return d(i,m,t,l[s],a,p).map(G=>u(G,m)).filter(j)}export{B as execute,P as executeMany};
