import{b as y}from"./subclass-BZA_h8Db.js";import{d as T}from"./arcgisLayerUrl-BX1FE5Hm.js";import{a as L,t as v}from"./lazyLayerLoader-Buplpp4b.js";import{l as m,a as F,o as M,u as w,t as f,c as P,n as G,i as x,e as h}from"./portalLayers-BzFmbxxn.js";import{populateGroupLayer as D}from"./layersCreator-qSEwd4GK.js";import{b as k}from"./Portal-C10FKnaA.js";import{e as I}from"./jsonContext-DueMnVx9.js";import{s as $}from"./portalItemUtils-BzVoFAku.js";import{t as C}from"./styleUtils-KMFBtb6u.js";import{t as E}from"./requestPresets-B-6DU6iY.js";import"./assets-C43MgM-v.js";import"./index-Bh2oEzTI.js";import"./tslib.es6-B3Jf3DVX.js";import"./Accessor-BLX9ikPh.js";import"./persistableUrlUtils-fa1mAujs.js";import"./associatedFeatureServiceUtils-CXx2I5Ic.js";import"./PortalItem-DzgXrpyc.js";import"./Loadable-BabW5Xcc.js";import"./Promise-B2Hu02L7.js";import"./writer-DNAwXnhG.js";import"./Extent-Bf3YTe7m.js";import"./Point-Cg0-ChZE.js";import"./cast-Bjksrh93.js";import"./jsonMap-0cxwUWs2.js";import"./layerUtils-BrNoooE9.js";import"./Collection-CEdjem1-.js";import"./Evented-BHRw9x22.js";import"./shared-B3wH2qpO.js";import"./SimpleObservable-KocWTzVy.js";import"./locale-C9TlLpzi.js";import"./projection-B971H0Re.js";import"./vec3f64-BLpZdpfb.js";import"./Polyline-D9YkgmM_.js";import"./mathUtils-C4_ghTv4.js";import"./projectBuffer-Bs7GwaPY.js";import"./geodesicConstants-DWQLYX7F.js";import"./asyncUtils-CWX51uTe.js";async function Dt(r,a){const e=r.instance.portalItem;if(e!=null&&e.id)return await e.load(a),j(r),r.validateItem&&r.validateItem(e),A(r,a)}function j(r){const a=r.instance.portalItem;if(!(a!=null&&a.type)||!r.supportedTypes.includes(a.type))throw new y("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}'",{type:a==null?void 0:a.type,expectedType:r.supportedTypes.join(", ")})}async function A(r,a){const e=r.instance,t=e.portalItem;if(!t)return;const{url:s,title:o}=t,l=I(t,"portal-item");if(e.type==="group")return O(e,l,r);s&&e.type!=="media"&&e.read({url:s},l);const n=new h,i=await b(r,n,a);return i&&e.read(i,l),e.resourceReferences={portalItem:t,paths:l.readResourcePaths??[]},e.type!=="subtype-group"&&e.read({title:o},l),C(e,l)}async function O(r,a,e){const t=r.portalItem;if(!r.sourceIsPortalItem)return;const{title:s,type:o}=t;if(o==="Group Layer"){if(!$(t,"Map"))throw new y("portal:invalid-layer-item-typekeyword","'Group Layer' item without 'Map' type keyword is not supported");return R(r)}return r.read({title:s},a),J(r,e)}async function R(r){const a=r.portalItem,e=await a.fetchData("json");if(!e)return;const t=I(a,"web-map");r.read(e,t),await D(r,e,{context:t}),r.resourceReferences={portalItem:a,paths:t.readResourcePaths??[]}}async function J(r,a){var c;let e;const{portalItem:t}=r;if(!t)return;const s=t.type,o=a.layerModuleTypeMap;switch(s){case"Feature Service":case"Feature Collection":e=o.FeatureLayer;break;case"Stream Service":e=o.StreamLayer;break;case"Scene Service":e=o.SceneLayer;break;default:throw new y("portal:unsupported-item-type-as-group",`The item type '${s}' is not supported as a 'IGroupLayer'`)}const l=new h;let[n,i]=await Promise.all([e(),b(a,l)]),p=()=>n;if(s==="Feature Service"){const g=(c=m(i))==null?void 0:c.customParameters;i=t.url?await F(i,t.url,l):{},p=await Q(i,o)||p;const S=await K(t.url,{customParameters:g,loadContext:l});return await u(r,p,i,S)}return s==="Scene Service"&&t.url&&(i=await M(t,i,l)),w(i)>0?await u(r,p,i):await N(r,p)}async function N(r,a){var s,o;const{portalItem:e}=r;if(!(e!=null&&e.url))return;const t=await E(e.url);t&&u(r,a,{layers:(s=t.layers)==null?void 0:s.map(f),tables:(o=t.tables)==null?void 0:o.map(f)})}async function u(r,a,e,t){var l;let s=e.layers||[];const o=e.tables||[];if(((l=r.portalItem)==null?void 0:l.type)==="Feature Collection"?(s.forEach((n,i)=>{var p;n.id=i,((p=n==null?void 0:n.layerDefinition)==null?void 0:p.type)==="Table"&&o.push(n)}),s=s.filter(n=>{var i;return((i=n==null?void 0:n.layerDefinition)==null?void 0:i.type)!=="Table"})):(s.reverse(),o.reverse()),s.forEach(n=>{const i=t==null?void 0:t(n);if(i||!t){const p=d(r,a(n),e,n,i);r.add(p)}}),o.length){const n=await L.FeatureLayer();o.forEach(i=>{const p=t==null?void 0:t(i);if(p||!t){const c=d(r,n,e,i,p);r.tables.add(c)}})}}function d(r,a,e,t,s){const o=r.portalItem,l={portalItem:o.clone(),layerId:t.id};t.url!=null&&(l.url=t.url);const n=new a(l);if("sourceJSON"in n&&(n.sourceJSON=s),n.type!=="subtype-group"&&n.type!=="catalog"&&(n.sublayerTitleMode="service-name"),o.type==="Feature Collection"){const i={origin:"portal-item",portal:o.portal||k.getDefault()};n.read(t,i);const p=e.showLegend;p!=null&&n.read({showLegend:p},i)}return n}async function b(r,a,e){if(r.supportsData===!1)return;const t=r.instance,s=t.portalItem;if(!s)return;let o=null;try{o=await s.fetchData("json",e)}catch{}if(B(t)){let l=null;const n=await q(s,o,a);if((o!=null&&o.layers||o!=null&&o.tables)&&n>0){if(t.layerId==null){const i=P(t.type),p=i?G(o,i)[0]:m(o);p&&(t.layerId=p.id)}l=z(o,t),(l==null?void 0:l.layerType)==="OrientedImageryLayer"&&t.type==="oriented-imagery"&&t.supportedSourceTypes.add("Feature Layer"),l&&o.showLegend!=null&&(l.showLegend=o.showLegend)}return n>1&&"sublayerTitleMode"in t&&t.sublayerTitleMode!=="service-name"&&(t.sublayerTitleMode="item-title-and-service-name"),l}return o}async function q(r,a,e){var o,l,n,i,p;if(a!=null&&a.layers&&(a!=null&&a.tables))return w(a);const t=T(r.url);if(!t)return 1;const s=await e.fetchServiceMetadata(t.url.path,{customParameters:(o=m(a))==null?void 0:o.customParameters}).catch(()=>null);return(((l=a==null?void 0:a.layers)==null?void 0:l.length)??((n=s==null?void 0:s.layers)==null?void 0:n.length)??0)+(((i=a==null?void 0:a.tables)==null?void 0:i.length)??((p=s==null?void 0:s.tables)==null?void 0:p.length)??0)}function z(r,a){var s,o;const{layerId:e}=a,t=((s=r.layers)==null?void 0:s.find(l=>l.id===e))||((o=r.tables)==null?void 0:o.find(l=>l.id===e));return t&&H(t,a)?t:null}function B(r){return r.type!=="stream"&&"layerId"in r}function H(r,a){const e="layerType"in r&&r.layerType,{type:t}=a;return!(t==="feature"&&e&&r.layerType!=="ArcGISFeatureLayer"||t==="catalog"&&!e||t==="oriented-imagery"&&!e||t==="subtype-group"&&!e)}async function K(r,a){const{layersJSON:e}=await v(r,a);if(!e)return null;const t=[...e.layers,...e.tables];return s=>t.find(o=>o.id===s.id)}async function Q(r,a){const{layers:e}=r;if(!(e!=null&&e.length))return;const t=new Set,s=[];for(const{layerType:n}of e){const i=n??"ArcGISFeatureLayer";if(t.has(i))continue;t.add(i);const p=a[x(i)];s.push(p())}const o=await Promise.all(s),l=new Map;return Array.from(t).forEach((n,i)=>{l.set(n,o[i])}),({layerType:n})=>{const i=n??"ArcGISFeatureLayer";return l.get(i)}}export{Dt as load};
