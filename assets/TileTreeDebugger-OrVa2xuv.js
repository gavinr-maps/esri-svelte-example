import{r as n}from"./tslib.es6-B3Jf3DVX.js";import{l as b}from"./Color-BCS62Hs5.js";import{d as L}from"./Graphic-DsxsIjhH.js";import{w as M,p as P,a as x,m as O,z as j}from"./symbols-CNimns--.js";import{b as A}from"./Accessor-BLX9ikPh.js";import{V as k}from"./Collection-CEdjem1-.js";import{o as S}from"./mathUtils-C4_ghTv4.js";import{m,a as T}from"./subclass-BZA_h8Db.js";import{S as E,m as F}from"./TextSymbol-D8QO_KUV.js";const J=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let r=class extends A{constructor(t){super(t),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=J.map(t=>new E({color:[t[0],t[1],t[2],.6],outline:{color:"black",width:1}})),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(t){this._enabled!==t&&(this._enabled=t,this.update())}update(){if(!this._enabled)return void this.clear();const t=e=>{if(e.label!=null)return e.label;let s=e.lij.toString();return e.loadPriority!=null&&(s+=` (${e.loadPriority})`),e.measures&&(s+=`[${e.measures.effectiveLevelForLod}]`),s},h=this.getTiles(),p=new Array,d=new Set((this._labels.size,this._labels.keys()));h.forEach((e,s)=>{var u;const l=e.lij.toString();d.delete(l);const z=((u=e.measures)==null?void 0:u.effectiveLevelForLod)??e.lij[0],g=e.geometry;if(this.enablePolygons&&!this._polygons.has(l)){const o=new L({geometry:g,symbol:this._symbols[z%this._symbols.length]});this._polygons.set(l,o),p.push(o)}if(this.enableLabels){const o=t(e),w=s/(h.length-1),c=S(0,200,w),f=S(20,6,w)/.75,_=e.loadPriority!=null&&e.loadPriority>=h.length,v=new b([c,_?0:c,_?0:c]),$=this.view.type==="3d"?()=>new M({verticalOffset:new P({screenLength:40/.75}),callout:new x({color:new b("white"),border:new O({color:new b("black")})}),symbolLayers:new k([new j({text:o,halo:{color:"white",size:1/.75},material:{color:v},size:f})])}):()=>new F({text:o,haloColor:"white",haloSize:1/.75,color:v,size:f}),a=this._labels.get(l);if(a){const i=$();a.symbol!=null&&JSON.stringify(i)===JSON.stringify(a.symbol)||(a.symbol=i)}else{const i=new L({geometry:g.extent.center,symbol:$()});this._labels.set(l,i),p.push(i)}}});const y=new Array;d.forEach(e=>{const s=this._polygons.get(e);s!=null&&(y.push(s),this._polygons.delete(e));const l=this._labels.get(e);l!=null&&(y.push(l),this._labels.delete(e))}),this.view.graphics.removeMany(y),this.view.graphics.addMany(p)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};n([m({constructOnly:!0})],r.prototype,"view",void 0),n([m({readOnly:!0})],r.prototype,"updating",void 0),n([m()],r.prototype,"enabled",null),r=n([T("esri.views.support.TileTreeDebugger")],r);export{r as d};
