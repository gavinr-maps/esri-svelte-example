import{P as A}from"./cast-BA_-jlhc.js";import{a as D}from"./reactiveUtils-BR0C1Kq4.js";import{s as _,E as Q,B as v}from"./Accessor-BHnuXKD2.js";import{v as R}from"./jsonUtils-Cu7OBRmN.js";import{a4 as E,c as P}from"./Point-XGrwlf63.js";import{s as Z,u as G,n as M,r as B,o as N}from"./featureConversionUtils-DpmsPUmt.js";import{u as z}from"./executeQueryForSnapping-DNwXF6kY.js";import{f as L}from"./FeatureStore-CozDnyvc.js";import{x as F,j as b}from"./queryUtils-DBeaQ3x_.js";import{L as J}from"./QueryEngine-BJMZSAnZ.js";import{I as U,N as W,E as H}from"./geojson-CxQh_AXs.js";import{l as V,a as K,u as Y}from"./clientSideDefaults-BOCfNRNG.js";import{E as X,g as w,f as T,p as I,h as O,S as ee}from"./sourceUtils-Lw75gUHq.js";import{Z as $}from"./FieldsIndex-DFdVonga.js";import{i as te}from"./fieldType-L-VlbZqy.js";import{c as ie,K as se}from"./opacityUtils-CSd4XoR2.js";import{n as re}from"./Promise-CmQqe-ke.js";import"./index-tefRSezt.js";import"./JSONSupport-CGdeqxpk.js";import"./Evented-DCWccWGU.js";import"./SimpleObservable-7oieNGD8.js";import"./Extent-CBBGeHb-.js";import"./Polyline-BmuD2-ZN.js";import"./writer-B2bQV2uU.js";import"./mathUtils-DV9iOXpW.js";import"./aaBoundingBox-CeBivBRq.js";import"./OptimizedFeature-DcMLlxvB.js";import"./memoryEstimations-5gFNwkKK.js";import"./OptimizedGeometry-7IxBWtHr.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./normalizeUtils-XRAPXbWa.js";import"./normalizeUtilsCommon-D0zPTJCj.js";import"./utils-Cy8wFNQo.js";import"./utils-CkSELPnj.js";import"./timeSupport-Cvj97qZO.js";import"./BoundsStore-Cf415lwW.js";import"./PooledRBush-BHbZLwLz.js";import"./quickselect-QQC62dOK.js";import"./optimizedFeatureQueryEngineAdapter-Dffp2J7r.js";import"./projection-B2I9Bzj_.js";import"./vec3f64-BLpZdpfb.js";import"./projectBuffer-DOU0xvVi.js";import"./geodesicConstants-yASAK_zX.js";import"./json-Wa8cmqdu.js";import"./WhereClauseCache-CrfkeLux.js";import"./LRUCache-DS2O1kTf.js";import"./MemCache-CDoaVBHf.js";import"./WhereClause-diW5rNp6.js";import"./TimeOnly-yGYcAQQJ.js";import"./QueryEngineCapabilities-DZTubngj.js";import"./timeUtils-D2X862bk.js";import"./quantizationUtils-2Az-xHPA.js";import"./utils-D8exU0T6.js";import"./screenUtils-_ZIvrt5o.js";import"./heatmapUtils-DA7NmY3d.js";import"./vec42-YcqnINSP.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./utils-DLmnG8WZ.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-Fi6iAz29.js";import"./intl-Do3GEEJ7.js";import"./timeZoneUtils-COos5xIr.js";import"./utils-B8VMZhYy.js";import"./ClassBreaksDefinition-DvZJqFCP.js";import"./enumeration-Cr5WIZs4.js";import"./SnappingCandidate-O5eRSE6e.js";import"./FixedIntervalBinParameters-uigAmvtd.js";import"./NormalizationBinParametersMixin-D6iHLB7I.js";import"./Clonable-DvJsj5LF.js";import"./Scheduler-B_GuBefw.js";import"./signal-DSa0yokC.js";import"./debugFlags-ZrDyTcDc.js";import"./date-DLgTylpo.js";import"./defaultsJSON-GKolV7NZ.js";const ne={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryAttachmentOrderByFields:!1,supportsQueryBins:!0,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0},queryBinsCapabilities:ee};class St{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){var e;(e=this._queryEngine)==null||e.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const r=[],[i]=await Promise.all([e.url?this._fetch(t==null?void 0:t.signal):null,this._checkProjection(e.spatialReference)]),s=U(i,{geometryType:e.geometryType}),o=e.fields||s.fields||[],l=e.hasZ!=null?e.hasZ:s.hasZ,d=s.geometryType;let c=e.objectIdField||s.objectIdFieldName||"__OBJECTID";const h=e.spatialReference||E;let n=e.timeInfo;o===s.fields&&s.unknownFields.length>0&&r.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:s.unknownFields}});const p=new $(o);let u=p.get(c);u?(u.type!=="esriFieldTypeString"&&(u.type="esriFieldTypeOID"),u.editable=!1,u.nullable=!1,c=u.name):(u={alias:c,name:c,type:s.objectIdFieldType==="string"?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(u));const y={};for(const a of o){if(a.name==null&&(a.name=a.alias),a.alias==null&&(a.alias=a.name),!a.name)throw new _("geojson-layer:invalid-field-name","field name is missing",{field:a});if(!te.jsonValues.includes(a.type))throw new _("geojson-layer:invalid-field-type",`invalid type for field "${a.name}"`,{field:a});if(a.name!==u.name){const g=ie(a);g!==void 0&&(y[a.name]=g)}a.length==null&&(a.length=se(a))}if(n){if(n.startTimeField){const a=p.get(n.startTimeField);a?(n.startTimeField=a.name,a.type="esriFieldTypeDate"):n.startTimeField=null}if(n.endTimeField){const a=p.get(n.endTimeField);a?(n.endTimeField=a.name,a.type="esriFieldTypeDate"):n.endTimeField=null}if(n.trackIdField){const a=p.get(n.trackIdField);a?n.trackIdField=a.name:(n.trackIdField=null,r.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:n}}))}n.startTimeField||n.endTimeField||(r.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:n}}),n=null)}const m=d?Y(d):void 0,q=p.dateFields.length?{timeZoneIANA:re}:null,f={warnings:r,featureErrors:[],layerDefinition:{...ne,drawingInfo:m??void 0,templates:V(y),extent:void 0,geometryType:d,objectIdField:c,fields:o,hasZ:!!l,timeInfo:n,dateFieldsTimeReference:q}};this._queryEngine=new J({fieldsIndex:$.fromLayerJSON({fields:o,timeInfo:n,dateFieldsTimeReference:q}),geometryType:d,hasM:!1,hasZ:l,objectIdField:c,spatialReference:h,timeInfo:n,featureStore:new L({geometryType:d,hasM:!1,hasZ:l})});const j=this._queryEngine.fieldsIndex.requiredFields.indexOf(u);j>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(j,1),this._createDefaultAttributes=K(y,c);const x=await this._createFeatures(i);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,x);const C=this._normalizeFeatures(x,f.featureErrors);this._queryEngine.featureStore.addMany(C);const{fullExtent:k,timeExtent:S}=await this._queryEngine.fetchRecomputedExtents();if(f.layerDefinition.extent=k,S){const{start:a,end:g}=S;f.layerDefinition.timeInfo.timeExtent=[a,g]}return f}async applyEdits(e){const{spatialReference:t,geometryType:r}=this._queryEngine;return await Promise.all([X(t,r),F(e.adds,t),F(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),z(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){var i;this._loadOptions.customParameters=e,(i=this._snapshotTask)==null||i.abort(),this._snapshotTask=D(this._snapshotFeatures),this._snapshotTask.promise.then(s=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,s);const o=this._normalizeFeatures(s);o&&this._queryEngine.featureStore.addMany(o)},s=>{this._queryEngine.featureStore.clear(),Q(s)||v.getLogger("esri.layers.GeoJSONLayer").error(new _("geojson-layer:refresh","An error occurred during refresh",{error:s}))}),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:r}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:r}}async _createFeatures(e){if(e==null)return[];const{geometryType:t,hasZ:r,objectIdField:i}=this._queryEngine,s=W(e,{geometryType:t,hasZ:r,objectIdField:i});if(!P(this._queryEngine.spatialReference,E))for(const o of s)o.geometry!=null&&(o.geometry=Z(b(G(o.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),E,this._queryEngine.spatialReference)));return s}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:r}=this._loadOptions,i=(await A(t??"",{responseType:"json",query:{...r},signal:e})).data;return H(i),i}_normalizeFeatures(e,t){const{objectIdField:r,fieldsIndex:i}=this._queryEngine,s=[];for(const o of e){const l=this._createDefaultAttributes(),d=w(i,l,o.attributes,!0);d?t==null||t.push(d):(this._assignObjectId(l,o.attributes,!0),o.attributes=l,o.objectId=l[r],s.push(o))}return s}async _applyEdits(e){const{adds:t,updates:r,deletes:i}=e,s={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t!=null&&t.length&&this._applyAddEdits(s,t),r!=null&&r.length&&this._applyUpdateEdits(s,r),i==null?void 0:i.length){for(const d of i)s.deleteResults.push(T(d));this._queryEngine.featureStore.removeManyById(i)}const{fullExtent:o,timeExtent:l}=await this._queryEngine.fetchRecomputedExtents();return{extent:o,timeExtent:l,featureEditResults:s}}_applyAddEdits(e,t){const{addResults:r}=e,{geometryType:i,hasM:s,hasZ:o,objectIdField:l,spatialReference:d,featureStore:c,fieldsIndex:h}=this._queryEngine,n=[];for(const p of t){if(p.geometry&&i!==R(p.geometry)){r.push(I("Incorrect geometry type."));continue}const u=this._createDefaultAttributes(),y=w(h,u,p.attributes);if(y)r.push(y);else{if(this._assignObjectId(u,p.attributes),p.attributes=u,p.uid!=null){const m=p.attributes[l];e.uidToObjectId[p.uid]=m}if(p.geometry!=null){const m=p.geometry.spatialReference??d;p.geometry=b(O(p.geometry,m),m,d)}n.push(p),r.push(T(p.attributes[l]))}}c.addMany(M([],n,i,o,s,l))}_applyUpdateEdits({updateResults:e},t){const{geometryType:r,hasM:i,hasZ:s,objectIdField:o,spatialReference:l,featureStore:d,fieldsIndex:c}=this._queryEngine;for(const h of t){const{attributes:n,geometry:p}=h,u=n==null?void 0:n[o];if(u==null){e.push(I(`Identifier field ${o} missing`));continue}if(!d.has(u)){e.push(I(`Feature with object id ${u} missing`));continue}const y=B(d.getFeature(u),r,s,i);if(p!=null){if(r!==R(p)){e.push(I("Incorrect geometry type."));continue}const m=p.spatialReference??l;y.geometry=b(O(p,m),m,l)}if(n){const m=w(c,y.attributes,n);if(m){e.push(m);continue}}d.add(N(y,r,s,i,o)),e.push(T(u))}}_createObjectIdGenerator(e,t){const r=e.fieldsIndex.get(e.objectIdField);if(r.type==="esriFieldTypeString")return()=>r.name+"-"+Date.now().toString(16);let i=Number.NEGATIVE_INFINITY;for(const s of t)s.objectId&&(i=Math.max(i,s.objectId));return i=Math.max(0,i)+1,()=>i++}_assignObjectId(e,t,r=!1){const i=this._queryEngine.objectIdField;e[i]=r&&i in t?t[i]:this._objectIdGenerator()}async _checkProjection(e){try{await F(E,e)}catch{throw new _("geojson-layer","Projection not supported")}}}export{St as default};
