import"./geometry-D964gYQX.js";import{N as p}from"./subclass-BZA_h8Db.js";import{G as r}from"./geometryEngineBase-yFIvKOkM.js";import{hydratedAdapter as n}from"./hydrated-C9rxSL4a.js";import{g as l}from"./Point-Cg0-ChZE.js";import"./Extent-Bf3YTe7m.js";import"./tslib.es6-B3Jf3DVX.js";import"./Polyline-D9YkgmM_.js";import"./writer-DNAwXnhG.js";import"./mathUtils-C4_ghTv4.js";import"./jsonMap-0cxwUWs2.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./Accessor-BLX9ikPh.js";import"./cast-Bjksrh93.js";import"./assets-C43MgM-v.js";import"./index-Bh2oEzTI.js";function i(e){const t=Array.isArray(e)?e[0].spatialReference:e.spatialReference;return t?p(l,t):l.WGS84}function H(e){return r.extendedSpatialReferenceInfo(e)}function N(e,t){return r.clip(n,i(e),e,t)}function I(e,t){return r.cut(n,i(e),e,t)}function J(e,t){return r.contains(n,i(e),e,t)}function O(e,t){return r.crosses(n,i(e),e,t)}function b(e,t,o){return r.distance(n,i(e),e,t,o)}function j(e,t){return r.equals(n,i(e),e,t)}function q(e,t){return r.intersects(n,i(e),e,t)}function B(e,t){return r.touches(n,i(e),e,t)}function C(e,t){return r.within(n,i(e),e,t)}function E(e,t){return r.disjoint(n,i(e),e,t)}function G(e,t){return r.overlaps(n,i(e),e,t)}function P(e,t,o){return r.relate(n,i(e),e,t,o)}function $(e){return r.isSimple(n,i(e),e)}function W(e){return r.simplify(n,i(e),e)}function k(e,t=!1){return r.convexHull(n,i(e),e,t)}function F(e,t){return r.difference(n,i(e),e,t)}function K(e,t){return r.symmetricDifference(n,i(e),e,t)}function M(e,t){return r.intersect(n,i(e),e,t)}function Q(e,t=null){return r.union(n,i(e),e,t)}function U(e,t,o,a,s,u){return r.offset(n,i(e),e,t,o,a,s,u)}function X(e,t,o,a=!1){return r.buffer(n,i(e),e,t,o,a)}function Y(e,t,o,a,s,u){return r.geodesicBuffer(n,i(e),e,t,o,a,s,u)}function Z(e,t,o=!0){return r.nearestCoordinate(n,i(e),e,t,o)}function _(e,t){return r.nearestVertex(n,i(e),e,t)}function ee(e,t,o,a){return r.nearestVertices(n,i(e),e,t,o,a)}function f(e){var t;return"xmin"in e?"center"in e?e.center:null:"x"in e?e:"extent"in e?((t=e.extent)==null?void 0:t.center)??null:null}function te(e,t,o){if(e==null)throw new c;const a=e.spatialReference;if((o=o??f(e))==null)throw new c;const s=e.constructor.fromJSON(r.rotate(e,t,o));return s.spatialReference=a,s}function re(e,t){if(e==null)throw new c;const o=e.spatialReference;if((t=t??f(e))==null)throw new c;const a=e.constructor.fromJSON(r.flipHorizontal(e,t));return a.spatialReference=o,a}function ne(e,t){if(e==null)throw new c;const o=e.spatialReference;if((t=t??f(e))==null)throw new c;const a=e.constructor.fromJSON(r.flipVertical(e,t));return a.spatialReference=o,a}function ie(e,t,o,a){return r.generalize(n,i(e),e,t,o,a)}function oe(e,t,o){return r.densify(n,i(e),e,t,o)}function ae(e,t,o,a=0){return r.geodesicDensify(n,i(e),e,t,o,a)}function se(e,t){return r.planarArea(n,i(e),e,t)}function ce(e,t){return r.planarLength(n,i(e),e,t)}function ue(e,t,o){return r.geodesicArea(n,i(e),e,t,o)}function fe(e,t,o){return r.geodesicLength(n,i(e),e,t,o)}function le(e,t){return r.intersectLinesToPoints(n,i(e),e,t)}function pe(e,t){r.changeDefaultSpatialReferenceTolerance(e,t)}function me(e){r.clearDefaultSpatialReferenceTolerance(e)}class c extends Error{constructor(){super("Illegal Argument Exception")}}export{X as buffer,pe as changeDefaultSpatialReferenceTolerance,me as clearDefaultSpatialReferenceTolerance,N as clip,J as contains,k as convexHull,O as crosses,I as cut,oe as densify,F as difference,E as disjoint,b as distance,j as equals,H as extendedSpatialReferenceInfo,re as flipHorizontal,ne as flipVertical,ie as generalize,ue as geodesicArea,Y as geodesicBuffer,ae as geodesicDensify,fe as geodesicLength,M as intersect,le as intersectLinesToPoints,q as intersects,$ as isSimple,Z as nearestCoordinate,_ as nearestVertex,ee as nearestVertices,U as offset,G as overlaps,se as planarArea,ce as planarLength,P as relate,te as rotate,W as simplify,K as symmetricDifference,B as touches,Q as union,C as within};
