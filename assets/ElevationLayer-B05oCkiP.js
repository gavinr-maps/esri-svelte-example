const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./ElevationQuery-3e2hkgx_.js","./reactiveUtils-BFQ0BtrB.js","./Evented-CXIxDjmW.js","./Accessor-D6mNnsWy.js","./subclass-BR3PhgZG.js","./shared-B3wH2qpO.js","./Point-DB4Hp4hH.js","./jsonMap-DCC6W5ex.js","./writer-3zufXUNV.js","./assets-C2mb-ea2.js","./index-CeCSsEgo.js","./index-CjOb8WjV.css","./Polyline-D97hl-6E.js","./Extent-DHjqVB-p.js","./mathUtils-ClvKsMak.js","./projection-A9yUaaTs.js","./projectBuffer-vsa0P_cF.js","./geodesicConstants-XRAvAZCD.js","./ElevationSamplerData-IYvomv6Y.js","./geometry-DpwwkAX1.js","./ElevationTile-DFGu58iL.js","./TileKey-DZd6gJy7.js"])))=>i.map(i=>d[i]);
import{_ as n}from"./index-CeCSsEgo.js";import{e as a}from"./Evented-CXIxDjmW.js";import{U as m,v}from"./assets-C2mb-ea2.js";import{c as f,y as p,b as w}from"./subclass-BR3PhgZG.js";import{B as g,a as T,s as d}from"./Accessor-D6mNnsWy.js";import{S}from"./MultiOriginJSONSupport-DjAXzJun.js";import{o as c}from"./writer-3zufXUNV.js";import{v as b}from"./HeightModelInfo-CSXZysDz.js";import{f as _}from"./Layer-C96_yo4i.js";import{p as $}from"./ArcGISCachedService-DfVbgD7W.js";import{l as I}from"./ArcGISService-Dr1J04Ka.js";import{b as O}from"./OperationalLayer-B61mRSes.js";import{j as E}from"./PortalLayer-iKUPhGZB.js";import{p as D}from"./commonProperties-C-F8Nu9F.js";import{s as L,a as j}from"./LercDecoder-s8Pk1wff.js";import"./jsonMap-DCC6W5ex.js";import"./Point-DB4Hp4hH.js";import"./geometry-DpwwkAX1.js";import"./Extent-DHjqVB-p.js";import"./Polyline-D97hl-6E.js";import"./mathUtils-ClvKsMak.js";import"./TimeExtent-41gxTbrv.js";import"./timeUtils-DQR2jUPL.js";import"./Promise-CZrWwByK.js";import"./Identifiable-BLvpQbOc.js";import"./Portal-liet8xHC.js";import"./TileInfo-DkEc90N-.js";import"./TileKey-DZd6gJy7.js";import"./TileInfoTilemapCache-jUzQoLho.js";import"./TilemapCache-SY5llsKN.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./LRUCache-ju6LnIBZ.js";import"./MemCache-C6WUx-5V.js";import"./reactiveUtils-BFQ0BtrB.js";import"./shared-B3wH2qpO.js";import"./arcgisLayerUrl-Cgl5IQFD.js";import"./persistableUrlUtils-BcifXQ1Z.js";import"./layerContainerType-C5CzMsLd.js";import"./layerUtils-erzwAANv.js";import"./PortalItem-BuTU9OuN.js";import"./portalItemUtils-DIZSrm3T.js";import"./projection-A9yUaaTs.js";import"./projectBuffer-vsa0P_cF.js";import"./geodesicConstants-XRAvAZCD.js";import"./ElevationInfo-BxYXLfrw.js";import"./fieldUtils-CNduWQU9.js";import"./intl-Dpfm8vPB.js";import"./unitConversionUtils-Dl04YuQU.js";import"./lengthUtils-D7_DvYH0.js";import"./opacityUtils-BT7mQkwC.js";import"./WorkerHandle-B37YGie-.js";import"./workers-8Q6jrI18.js";import"./Queue-DpHko4Yk.js";let o=class extends $(I(O(E(S(_))))){constructor(...t){super(...t),this.capabilities={operations:{supportsTileMap:!1}},this.copyright=null,this.heightModelInfo=null,this.path=null,this.minScale=void 0,this.maxScale=void 0,this.opacity=1,this.operationalLayerType="ArcGISTiledElevationServiceLayer",this.sourceJSON=null,this.type="elevation",this.url=null,this.version=null,this._lercDecoder=L()}normalizeCtorArgs(t,r){return typeof t=="string"?{url:t,...r}:t}destroy(){this._lercDecoder=g(this._lercDecoder)}readCapabilities(t,r){const e=r.capabilities&&r.capabilities.split(",").map(i=>i.toLowerCase().trim());return e?{operations:{supportsTileMap:e.includes("tilemap")}}:{operations:{supportsTileMap:!1}}}readVersion(t,r){let e=r.currentVersion;return e||(e=9.3),e}load(t){const r=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"],supportsData:!1,validateItem:e=>{if(e.typeKeywords){for(let i=0;i<e.typeKeywords.length;i++)if(e.typeKeywords[i].toLowerCase()==="elevation 3d layer")return!0}throw new f("portal:invalid-layer-item-type","Invalid layer item type '${type}', expected '${expectedType}' ",{type:"Image Service",expectedType:"Image Service Elevation 3D Layer"})}},t).catch(T).then(()=>this._fetchImageService(r))),Promise.resolve(this)}fetchTile(t,r,e,i){const s=(i=i||{signal:null}).signal!=null?i.signal:i.signal=new AbortController().signal,y={responseType:"array-buffer",signal:s},u={noDataValue:i.noDataValue,returnFileInfo:!0};return this.load().then(()=>this._fetchTileAvailability(t,r,e,i)).then(()=>m(this.getTileUrl(t,r,e),y)).then(l=>this._lercDecoder.decode(l.data,u,s)).then(l=>new j(l))}getTileUrl(t,r,e){const i=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,s=v({...this.parsedUrl.query,blankTile:!i&&null});return`${this.parsedUrl.path}/tile/${t}/${r}/${e}${s?"?"+s:""}`}async queryElevation(t,r){const{ElevationQuery:e}=await n(()=>import("./ElevationQuery-3e2hkgx_.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]),import.meta.url);return d(r),new e().query(this,t,r)}async createElevationSampler(t,r){const{ElevationQuery:e}=await n(()=>import("./ElevationQuery-3e2hkgx_.js"),__vite__mapDeps([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]),import.meta.url);return d(r),new e().createSampler(this,t,r)}_fetchTileAvailability(t,r,e,i){return this.tilemapCache?this.tilemapCache.fetchAvailability(t,r,e,i):Promise.resolve("unknown")}async _fetchImageService(t){var i;if(this.sourceJSON)return this.sourceJSON;const r={query:{f:"json",...this.parsedUrl.query},responseType:"json",signal:t},e=await m(this.parsedUrl.path,r);e.ssl&&(this.url=(i=this.url)==null?void 0:i.replace(/^http:/i,"https:")),this.sourceJSON=e.data,this.read(e.data,{origin:"service",url:this.parsedUrl})}get hasOverriddenFetchTile(){return!this.fetchTile[h]}};a([p({readOnly:!0})],o.prototype,"capabilities",void 0),a([c("service","capabilities",["capabilities"])],o.prototype,"readCapabilities",null),a([p({json:{read:{source:"copyrightText"}}})],o.prototype,"copyright",void 0),a([p({readOnly:!0,type:b})],o.prototype,"heightModelInfo",void 0),a([p({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],o.prototype,"path",void 0),a([p({type:["show","hide"]})],o.prototype,"listMode",void 0),a([p({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],o.prototype,"minScale",void 0),a([p({json:{read:!1,write:!1,origins:{service:{read:!1,write:!1},"portal-item":{read:!1,write:!1},"web-document":{read:!1,write:!1}}},readOnly:!0})],o.prototype,"maxScale",void 0),a([p({json:{read:!1,write:!1,origins:{"web-document":{read:!1,write:!1}}}})],o.prototype,"opacity",void 0),a([p({type:["ArcGISTiledElevationServiceLayer"]})],o.prototype,"operationalLayerType",void 0),a([p()],o.prototype,"sourceJSON",void 0),a([p({json:{read:!1},value:"elevation",readOnly:!0})],o.prototype,"type",void 0),a([p(D)],o.prototype,"url",void 0),a([p()],o.prototype,"version",void 0),a([c("version",["currentVersion"])],o.prototype,"readVersion",null),o=a([w("esri.layers.ElevationLayer")],o);const h=Symbol("default-fetch-tile");o.prototype.fetchTile[h]=!0;const je=o;export{je as default};
