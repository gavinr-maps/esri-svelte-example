import{U as y,t as T}from"./assets-C2mb-ea2.js";import{c as f}from"./subclass-BR3PhgZG.js";import{a as m}from"./Accessor-D6mNnsWy.js";import{d as g}from"./arcgisLayerUrl-Cgl5IQFD.js";import{C as b}from"./Portal-liet8xHC.js";import I from"./PortalItem-BuTU9OuN.js";async function k(r,n){const a=g(r);if(!a)throw new f("invalid-url","Invalid scene service url");const e={...n,sceneServerUrl:a.url.path,layerId:a.sublayer??void 0};if(e.sceneLayerItem??(e.sceneLayerItem=await q(e)),e.sceneLayerItem==null)return S(e.sceneServerUrl.replace("/SceneServer","/FeatureServer"),e);const t=await L(e);if(!(t!=null&&t.url))throw new f("related-service-not-found","Could not find feature service through portal item relationship");e.featureServiceItem=t;const l=await S(t.url,e);return l.portalItem=t,l}async function q(r){const n=(await U(r)).serviceItemId;if(!n)return null;const a=new I({id:n,apiKey:r.apiKey}),e=await K(r);e!=null&&(a.portal=new b({url:e}));try{return a.load({signal:r.signal})}catch(t){return m(t),null}}async function U(r){if(r.rootDocument)return r.rootDocument;const n={query:{f:"json",...r.customParameters,token:r.apiKey},responseType:"json",signal:r.signal};try{const a=await y(r.sceneServerUrl,n);r.rootDocument=a.data}catch{r.rootDocument={}}return r.rootDocument}async function K(r){var e;const n=(e=T)==null?void 0:e.findServerInfo(r.sceneServerUrl);if(n!=null&&n.owningSystemUrl)return n.owningSystemUrl;const a=r.sceneServerUrl.replace(/(.*\/rest)\/.*/i,"$1")+"/info";try{const t=(await y(a,{query:{f:"json"},responseType:"json",signal:r.signal})).data.owningSystemUrl;if(t)return t}catch(t){m(t)}return null}async function S(r,n){var v,w,h;const a=g(r);if(!a)throw new f("invalid-feature-service-url","Invalid feature service url");const e=a.url.path,t=n.layerId;if(t==null)return{serverUrl:e};const l=U(n),o=n.featureServiceItem?await n.featureServiceItem.fetchData("json"):null,j=(h=((v=o==null?void 0:o.layers)==null?void 0:v[0])||((w=o==null?void 0:o.tables)==null?void 0:w[0]))==null?void 0:h.customParameters,d=i=>{const A={query:{f:"json",...j},responseType:"json",authMode:i,signal:n.signal};return y(e,A)},D=d("anonymous").catch(()=>d("no-prompt")),[p,c]=await Promise.all([D,l]),u=c==null?void 0:c.layers,s=p.data&&p.data.layers;if(!Array.isArray(s))throw new Error("expected layers array");if(Array.isArray(u)){for(let i=0;i<Math.min(u.length,s.length);i++)if(u[i].id===t)return{serverUrl:e,layerId:s[i].id}}else if(t!=null&&t<s.length)return{serverUrl:e,layerId:s[t].id};throw new Error("could not find matching associated sublayer")}async function L({sceneLayerItem:r,signal:n}){if(!r)return null;try{const a=(await r.fetchRelatedItems({relationshipType:"Service2Service",direction:"reverse"},{signal:n})).find(t=>t.type==="Feature Service")||null;if(!a)return null;const e=new I({portal:a.portal,id:a.id});return await e.load(),e}catch(a){return m(a),null}}export{k as s};
