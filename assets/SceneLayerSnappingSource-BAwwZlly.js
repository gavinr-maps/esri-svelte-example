import{g as h,r as i,m as n,a as y,l as S,i as k,aA as g,H as C,D as H,G as b}from"./Accessor-BmwT4B0c.js";import{h as L}from"./UpdatingHandles-CzJ4c3KT.js";import{a as $}from"./EdgeWorkerHandle-Fky_Xpe_.js";import{n as f}from"./vec3f64-BLpZdpfb.js";import{h as E}from"./WorkerHandle-CKOgUZ7i.js";import{V as O}from"./sphere-Cin5efBj.js";import{e as _,v as I}from"./RightAngleSnappingHint-BepRvd6S.js";import{c as V}from"./SnappingManager-DoaI-UDx.js";import{r as R}from"./VertexSnappingCandidate-2c3r5xpK.js";import"./reactiveUtils-XM7cS2OP.js";import"./Evented-Dw4_VOGn.js";import"./SimpleObservable-CvOkykwM.js";import"./workerHelper-Bbyb81sR.js";import"./InterleavedLayout-_dYEAUNK.js";import"./BufferView-0osDbyWD.js";import"./vec2-ChnYg_BJ.js";import"./common-DQOJ18NT.js";import"./vec32-Dvg_eL9J.js";import"./vec42-YcqnINSP.js";import"./types-D0PSWh4d.js";import"./vec2f64-Dy6m9Nrb.js";import"./vec4f64-o2zAXfmz.js";import"./edgeProcessing-Dmwf8z6c.js";import"./deduplicate-Cp1WDW0w.js";import"./mathUtils-Cfq9PL9W.js";import"./Indices-D8XWalpO.js";import"./VertexAttribute-Cq4MnHjR.js";import"./bufferLayouts-DmKtt9ER.js";import"./glUtil-CAJRmga-.js";import"./enums-D9v74xTE.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./Normals-D6WqMXVD.js";import"./workers-Cds_sd9m.js";import"./Queue-BQesTh_6.js";import"./cast-CsZslgGN.js";import"./index-4eY77cms.js";import"./JSONSupport-DcrLLGjL.js";import"./intl-Duiy0OzY.js";import"./Promise-DfET-uns.js";import"./mat4-Fi6iAz29.js";import"./Polyline-s-JzsQqo.js";import"./writer-DKgfqj4X.js";import"./Extent-g5W9hy0j.js";import"./Point-Cz2JYYmX.js";import"./mat3-CR8GKnhD.js";import"./mat3f64-BBpwCtoL.js";import"./plane-CpXmOyqq.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-CCm9z-pX.js";import"./mathUtils-BgCEaV43.js";import"./Color-VJEMvW-n.js";import"./colorUtils-Rxh2V3ai.js";import"./opacityUtils-Dim20wpZ.js";import"./timeUtils-C1c_L2Fd.js";import"./projectVectorToVector-CCOy_B5J.js";import"./projectBuffer-CQnuEMuP.js";import"./geodesicConstants-RQL9oKdk.js";import"./projectPointToVector-BoxjK-qy.js";import"./projection-CyCZAIaD.js";import"./Query-B_2mhyL4.js";import"./enumeration-DpvDkLNI.js";import"./jsonUtils-CwFG8yN4.js";import"./typeUtils-B6WBEKDM.js";import"./Field-BDG0QV_T.js";import"./fieldType-CBeoJWlv.js";import"./FullTextSearch-CBnxSwz4.js";import"./Clonable-Z-AWS-16.js";import"./TimeExtent-BO6BsF_x.js";import"./InputManager-DZ3jJnlx.js";import"./signal-CySMLEX9.js";import"./keybindings-CTmT1RTo.js";import"./utils-BjSXFjBJ.js";import"./Version-Cd3TlGH0.js";import"./geodesicUtils-Cvz9v8ds.js";import"./elevationInfoUtils-D26wVF2d.js";import"./unitConversionUtils-rg07EgOm.js";import"./lengthUtils-_77UiyVF.js";import"./geometry2dUtils-D9Oax6Qb.js";import"./screenUtils-_ZIvrt5o.js";import"./viewUtils-CV6QVz7y.js";import"./PointSnappingHint-DWAfJfrj.js";let d=class extends h{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new x(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:o}=e,s=P;this.renderCoordsHelper.toRenderCoords(o,r.spatialReference,s);const l=e.distance,p=typeof l=="number"?l:l.distance,u=await this._workerHandle.invoke({bounds:O(s[0],s[1],s[2],p),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return u.candidates.sort((m,v)=>m.distance-v.distance),u.candidates.map(m=>this._convertCandidate(r,m))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new V({objectId:t.objectId,targetPoint:_(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new R({objectId:t.objectId,targetPoint:_(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=f();return this.renderCoordsHelper.fromRenderCoords(t,r,e),I(r)}async _fetchAllEdgeLocations(e,t){const r=[],o=[];for(const{id:s,uid:l}of e.components)this._ids.has(s)&&r.push((async()=>{const p=await this.fetchEdgeLocations(s,t.signal),u=p.locations.buffer;return o.push(u),{id:s,uid:l,objectIds:p.objectIds,locations:u,origin:p.origin,type:p.type}})());return{result:{components:(await Promise.all(r)).filter(({id:s})=>this._ids.has(s))},transferList:o}}};i([n({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),i([n({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),i([n({constructOnly:!0})],d.prototype,"schedule",void 0),i([n({readOnly:!0})],d.prototype,"availability",void 0),d=i([y("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let x=class extends E{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const P=f();let a=class extends h{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new L,this._abortController=new AbortController}destroy(){this._tracker=S(this._tracker),this._abortController=k(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new $(w(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:w(t),fetchEdgeLocations:async(r,o)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,o)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([g(this._workerHandle),g(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){var r;if(this.destroyed)return;const e=(r=this._abortController)==null?void 0:r.signal,t=await this.getLayerView();t==null||C(e)||(this._tracker=t.trackSnappingSources({add:(o,s)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:o,bounds:s},e))},remove:o=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:o},e))}}))}};function w(e){return t=>e.immediate.schedule(t)}i([n({constructOnly:!0})],a.prototype,"getLayerView",void 0),i([n({constructOnly:!0})],a.prototype,"view",void 0),i([n({readOnly:!0})],a.prototype,"updating",null),i([n({readOnly:!0})],a.prototype,"availability",void 0),a=i([y("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],a);let c=class extends h{get updating(){return this._i3sSources.some(e=>e.updating)}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(e=>e.destroy()),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map(o=>o.fetchCandidates(e,t)));return H(t),r.flat()}refresh(){this._i3sSources.forEach(e=>e.refresh())}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map(r=>r.type==="building-component"?new a({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null).filter(b)}_getSceneLayerI3SSource(e,t){return new a({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};i([n({constructOnly:!0})],c.prototype,"layerSource",void 0),i([n({constructOnly:!0})],c.prototype,"view",void 0),i([n({readOnly:!0})],c.prototype,"updating",null),i([n({readOnly:!0})],c.prototype,"availability",void 0),c=i([y("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],c);export{c as SceneLayerSnappingSource};
