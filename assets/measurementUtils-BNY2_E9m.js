import{o as g,u as h,g as m,v as c,P as p,s as l,A as a,_ as $}from"./vec32-Dvg_eL9J.js";import{n as u}from"./vec3f64-BLpZdpfb.js";import{U as y}from"./sphere-DQxj5tsv.js";import{k as M}from"./mathUtils-B9R7G-2c.js";import{o as x}from"./geodesicAreaMeasurementUtils-C07tJXJM.js";function j(t,n){const o=y(n);g(o,0,0,0);for(let r=0;r<t.length;++r)h(o,o,t[r]);m(o,o,1/t.length);let f=0;for(let r=0;r<t.length;++r)f=Math.max(f,c(o,t[r]));n[3]=Math.sqrt(f)}function k(t,n){if(t.length<3)throw new Error("need at least 3 points to fit a plane");M(t[0],t[1],t[2],n)}function q(t,n){return p(t,n)+t[3]}function v(t,n,o,f){const r=w;return l(r.rings[0][0],t),l(r.rings[0][1],n),l(r.rings[0][2],o),l(r.rings[0][3],t),r.spatialReference=f,x(r)}function E(t,n=null,o=!0){const f=(r,i)=>{if(i[0]===0&&i[1]===0&&i[2]===0)return!1;for(let s=0;s<r.length;++s)if(p(i,r[s])<-1e-6)return!1;return!0};if(t.length===0)return!1;if(t.length===1)return n&&l(n,t[0]),!0;g(e,0,0,0);for(let r=0;r<t.length;++r)h(e,e,t[r]);if(a(e,e),f(t,e))return n&&l(n,e),!0;if(!o)return!1;for(let r=0;r<t.length;++r)for(let i=0;i<t.length;++i)if(r!==i&&($(e,t[r],t[i]),a(e,e),f(t,e)))return n&&l(n,e),!0;return!1}function T(t){return t.pointerType!=="mouse"||t.button===0}const w={hasM:!1,hasZ:!0,rings:[[u(),u(),u(),u()]],spatialReference:null,type:"polygon"},e=u();export{T as M,k as g,j as h,E as j,v as m,q as p};
