import{e as o}from"./Evented-CXIxDjmW.js";import{U as f}from"./assets-BNizZMOZ.js";import{c as $}from"./TimeExtent-Dl-qaORu.js";import{c as v,y as a,N as O,b as T}from"./subclass-BR3PhgZG.js";import{t as P}from"./loadAll-z9YY33Kx.js";import{S as E}from"./MultiOriginJSONSupport-CvjUw5hc.js";import{a as L,A as x,e as g,b as F}from"./Accessor-D6mNnsWy.js";import{o as M,r as R}from"./writer-3zufXUNV.js";import{w as N}from"./Extent-B4rrMrqp.js";import{i as _}from"./scaleUtils-C_vWi-B7.js";import{a8 as j}from"./Point-TlcsOcXV.js";import{f as J}from"./Layer-CfUiPX3n.js";import{i as U}from"./APIKeyMixin-DpJrW91V.js";import{m as q,f as A,t as V}from"./SublayersOwner-uJiNAGYC.js";import{l as k}from"./ArcGISService-aI6tC6k0.js";import{l as z}from"./BlendLayer-DmvCcS5c.js";import{e as Z}from"./CustomParametersMixin-BStBpako.js";import{b as B}from"./OperationalLayer-Bq6MAeyc.js";import{j as C}from"./PortalLayer-CX96aZTI.js";import{f as D}from"./RefreshableLayer-B26jSd3d.js";import{t as G}from"./ScaleRangeLayer-CKYXLXxK.js";import{l as H}from"./TemporalLayer-DwHwsJsP.js";import{p as K}from"./commonProperties-BTyJ6vjt.js";import{y as W}from"./ExportImageParameters-ejhot2o-.js";import{t as Q}from"./imageBitmapUtils-6_PpAuCS.js";import{e as S}from"./sublayerUtils-_xnIyjYh.js";import{t as X}from"./versionUtils-BzPsp3a1.js";import{c as I}from"./Promise-CZrWwByK.js";import"./index-BVncS3aY.js";import"./timeUtils-DQR2jUPL.js";import"./reactiveUtils-BFQ0BtrB.js";import"./shared-B3wH2qpO.js";import"./Portal-DCqdz-K4.js";import"./jsonMap-DCC6W5ex.js";import"./mathUtils-ClvKsMak.js";import"./geometry-CnaxvJsv.js";import"./Polyline-BQFeqYXi.js";import"./Identifiable-BLvpQbOc.js";import"./Version-_Vxue7Ui.js";import"./arcgisLayerUrl-ETqee4Bd.js";import"./persistableUrlUtils-Dx61-x4K.js";import"./portalItemUtils-C4O2jNL5.js";import"./projection-tSh-0UvX.js";import"./projectBuffer-iyGwL2dv.js";import"./geodesicConstants-kj1AtlGg.js";import"./CollectionFlattener-CkyePFnC.js";import"./PopupTemplate-D8mXPxzU.js";import"./Clonable-cKbRam6-.js";import"./fieldUtils-C5R42-PY.js";import"./intl-CArXn1et.js";import"./enumeration--HlxOQ_N.js";import"./Color-DDUWtbqR.js";import"./colorUtils-CS9vdHXB.js";import"./ActionToggle-C0Z1k2jc.js";import"./ClassBreaksRenderer-B2uJHW90.js";import"./symbols-CfvYGR4J.js";import"./TextSymbol-zZq0BA1M.js";import"./screenUtils-PfxkaaMN.js";import"./materialUtils-CQ3JLQ1x.js";import"./opacityUtils-BT7mQkwC.js";import"./aaBoundingBox-BGxkJAW0.js";import"./collectionUtils-Dm1icNvk.js";import"./UniqueValueRenderer-Q9ooDuxf.js";import"./diffUtils--7ofoPN-.js";import"./colorRamps-BBM5Timv.js";import"./SizeVariable-Bq7jlw1r.js";import"./ColorStop-DEfc5Idt.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-CrTsYJ9f.js";import"./Graphic-Bi5hWHps.js";import"./jsonUtils-DtWlwXHP.js";import"./compilerUtils-BA04t1lN.js";import"./lengthUtils-vgIBtB6M.js";import"./jsonUtils-aUmUTP_F.js";import"./layerUtils-BzjQnEdj.js";import"./defaults-CIM29kXM.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-C7rrjuqd.js";import"./jsonUtils-DsFdmTaK.js";import"./LRUCache-ju6LnIBZ.js";import"./MemCache-C6WUx-5V.js";import"./FieldsIndex-DHql50vu.js";import"./UnknownTimeZone-D0GlcniK.js";import"./OverrideHelper-0-cH6aQ2.js";import"./colorUtils-D5nOabzP.js";import"./vec42-B1mBkh1w.js";import"./vec4f64-CBQL1T0x.js";import"./utils-D8D39sLt.js";import"./quantizationUtils-DFd0XKEL.js";import"./HeatmapColorStop-7F2_sZ2U.js";import"./heatmapUtils-C-uT6ZIV.js";import"./SimpleRenderer-FL1Ywtqd.js";import"./QueryTask-CZWlVPwY.js";import"./infoFor3D-CxOdoily.js";import"./DataLayerSource-BX7Ap_tY.js";import"./Field-poIiHWUc.js";import"./fieldType-CIG5ey7e.js";import"./utils-Blh5cXWv.js";import"./executeForIds-CXP6dmFt.js";import"./query-DQxxoK17.js";import"./normalizeUtils-CuTX3yb4.js";import"./normalizeUtilsCommon-DNPu20r0.js";import"./utils-Bh7lx_TM.js";import"./pbfQueryUtils-BxTeJmn3.js";import"./pbf-CmaozfCN.js";import"./OptimizedGeometry-vU5jWBvU.js";import"./OptimizedFeature-7juV2tZm.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-DGW6qDy9.js";import"./Query-BpMwiNVl.js";import"./FullTextSearch-BhJOgh_r.js";import"./executeQueryJSON-CYTAkBk5.js";import"./FeatureSet-4rZsDUx9.js";import"./executeQueryPBF-Dkj1hSrJ.js";import"./featureConversionUtils-B-SknPj_.js";import"./featureLayerUtils-t2Um2-kg.js";import"./featureQueryAll-ClGLkoIX.js";import"./AttachmentQuery-Ccywtvr9.js";import"./RelationshipQuery-DuLVs9A4.js";import"./FeatureType-o-GvSMTI.js";import"./FeatureTemplate-DbIjVC84.js";import"./labelingInfo-DAjvnaKu.js";import"./labelUtils-Cczy0uDR.js";import"./LayerFloorInfo-Bx-Ddgjy.js";import"./Relationship-Cktwo5cM.js";import"./serviceCapabilitiesUtils-C8Sa1o3S.js";import"./popupUtils-D3OP9u3f.js";import"./jsonUtils-C4Wp5KpV.js";import"./parser-BN6zmHl-.js";import"./utils-D20M4_S8.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-ybYUU6jq.js";import"./layerContainerType-C5CzMsLd.js";import"./PortalItem-CaeKabGc.js";import"./TimeInterval-DtVUy51q.js";import"./TimeInfo-C84oEL3g.js";import"./ElevationInfo-jptbPjRY.js";import"./unitConversionUtils-BUA_O87q.js";import"./floorFilterUtils-DZ5C6FQv.js";let i=class extends z(H(G(q(A(k(B(C(E(D(U(Z(J)))))))))))){constructor(...r){super(...r),this._exportImageParameters=new W({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(r,e){return typeof r=="string"?{url:r,...e}:r}load(r){const e=r!=null?r.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},r).catch(L).then(()=>this._fetchService(e))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(r,e){const n=e.supportedImageFormatTypes;return n&&n.includes("PNG32")?"png32":"png24"}writeSublayers(r,e,n,t){var l,d,b;if(!this.loaded||!r)return;const p=r.slice().reverse().flatten(({sublayers:s})=>s&&s.toArray().reverse()).toArray();let m=!1;const h=x(t.origin);if((l=this.capabilities)!=null&&l.operations.supportsExportMap&&((b=(d=this.capabilities)==null?void 0:d.exportMap)!=null&&b.supportsDynamicLayers)){if(h===g.PORTAL_ITEM){const s=this.createSublayersForOrigin("service").sublayers;m=S(p,s,g.SERVICE)}else if(h>g.PORTAL_ITEM){const s=this.createSublayersForOrigin("portal-item");m=S(p,s.sublayers,x(s.origin))}}const c=[],u={writeSublayerStructure:m,...t};let y=m||this.hasVisibleLayersForOrigin(h);p.forEach(s=>{const w=s.write({},u);c.push(w),y=y||s.originOf("visible")==="user"}),c.some(s=>Object.keys(s).length>1)&&(e.layers=c),y&&(e.visibleLayers=p.filter(s=>s.visible).map(s=>s.id))}createExportImageParameters(r,e,n,t){const p=(t==null?void 0:t.pixelRatio)||1;r&&this.version>=10&&(r=r.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=_({extent:r,width:e})*p;const m=this._exportImageParameters.toJSON(),h=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},c=r==null?void 0:r.spatialReference,u=j(c);m.dpi*=p;const y={};if(t!=null&&t.timeExtent){const{start:l,end:d}=t.timeExtent.toJSON();y.time=l&&d&&l===d?""+l:`${l??"null"},${d??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(y.time="null,null");return{bbox:r&&r.xmin+","+r.ymin+","+r.xmax+","+r.ymax,bboxSR:u,imageSR:u,size:e+","+n,...m,...h,...y}}async fetchImage(r,e,n,t){const{data:p}=await this._fetchImage("image",r,e,n,t);return p}async fetchImageBitmap(r,e,n,t){const{data:p,url:m}=await this._fetchImage("blob",r,e,n,t);return Q(p,m,t==null?void 0:t.signal)}async fetchRecomputedExtents(r={}){const e={...r,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:n}=await f(this.url,e),{extent:t,fullExtent:p,timeExtent:m}=n,h=t||p;return{fullExtent:h&&N.fromJSON(h),timeExtent:m&&$.fromJSON({start:m[0],end:m[1]})}}loadAll(){return P(this,r=>{r(this.allSublayers),r(this.subtables)})}serviceSupportsSpatialReference(r){return X(this,r)}async _fetchImage(r,e,n,t,p){var c,u,y;const m={responseType:r,signal:(p==null?void 0:p.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,n,t,p),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},h=this.parsedUrl.path+"/export";if(((c=m.query)==null?void 0:c.dynamicLayers)!=null&&!((y=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&y.supportsDynamicLayers))throw new v("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:m.query});try{const{data:l}=await f(h,m);return{data:l,url:h}}catch(l){throw F(l)?l:new v("mapimagelayer:image-fetch-error",`Unable to load image: ${h}`,{error:l})}}async _fetchService(r){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:e,ssl:n}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:r});n&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=e,this.read(e,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(r){var e;return!(r==null||!((e=this.sublayersSourceJSON[r])!=null&&e.visibleLayers))}};o([a(I("dateFieldsTimeReference"))],i.prototype,"dateFieldsTimeZone",void 0),o([a({type:Boolean})],i.prototype,"datesInUnknownTimezone",void 0),o([a()],i.prototype,"dpi",void 0),o([a()],i.prototype,"gdbVersion",void 0),o([a()],i.prototype,"imageFormat",void 0),o([M("imageFormat",["supportedImageFormatTypes"])],i.prototype,"readImageFormat",null),o([a({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],i.prototype,"imageMaxHeight",void 0),o([a({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],i.prototype,"imageMaxWidth",void 0),o([a()],i.prototype,"imageTransparency",void 0),o([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],i.prototype,"isReference",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"labelsVisible",void 0),o([a({type:["ArcGISMapServiceLayer"]})],i.prototype,"operationalLayerType",void 0),o([a({json:{read:!1,write:!1}})],i.prototype,"popupEnabled",void 0),o([a(I("preferredTimeReference"))],i.prototype,"preferredTimeZone",void 0),o([a()],i.prototype,"sourceJSON",void 0),o([a({json:{write:{ignoreOrigin:!0}}})],i.prototype,"sublayers",void 0),o([R("sublayers",{layers:{type:[V]},visibleLayers:{type:[O]}})],i.prototype,"writeSublayers",null),o([a({type:["show","hide","hide-children"]})],i.prototype,"listMode",void 0),o([a({json:{read:!1},readOnly:!0,value:"map-image"})],i.prototype,"type",void 0),o([a(K)],i.prototype,"url",void 0),i=o([T("esri.layers.MapImageLayer")],i);const Fe=i;export{Fe as default};
