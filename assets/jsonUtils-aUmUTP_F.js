import{w as m,e as b,f as p,g as I,k as L,o as D,q as v,x as h,r as k,n as g,s as F,t as T,C as U}from"./symbols-CfvYGR4J.js";import{c}from"./subclass-BR3PhgZG.js";import{b as z}from"./layerUtils-BzjQnEdj.js";import{u as f}from"./Color-DDUWtbqR.js";import{V as u}from"./reactiveUtils-BFQ0BtrB.js";import{e as d}from"./screenUtils-PfxkaaMN.js";import{S as E,u as P,c as V}from"./defaults-CIM29kXM.js";import{e as W,i as j}from"./defaultsJSON-GKolV7NZ.js";import{d as q,y as A,S as B,m as G}from"./TextSymbol-zZq0BA1M.js";const H=m.fromSimpleMarkerSymbol(E),J=b.fromSimpleLineSymbol(P),K=p.fromSimpleFillSymbol(V),N=new I({symbolLayers:new u([new L({material:{color:W},edges:new D({size:d(1),color:new f(j)})})])}),O=new b({symbolLayers:new u([new v({material:{color:new f([0,0,0])},size:d(1)})])}),Q=new p({symbolLayers:new u([new L({outline:{color:new f([0,0,0]),size:d(1)}})])});function le(e){if(e==null)return null;switch(e.type){case"mesh":return N;case"point":case"multipoint":return H;case"polyline":return J;case"polygon":case"extent":return K}return null}const i={retainId:!1,ignoreDrivers:!1,hasLabelingContext:!0};function R(e,o=i){var w,S,$,C;if(!e)return{symbol:null};const{retainId:t=i.retainId,ignoreDrivers:r=i.ignoreDrivers,hasLabelingContext:s=i.hasLabelingContext,retainCIM:a=i.retainCIM,cimFallbackEnabled:l=i.cimFallbackEnabled}=o;let n=null;if(h(e)||e instanceof k)n=e.clone();else if(e.type==="cim"){const y=(S=(w=e.data)==null?void 0:w.symbol)==null?void 0:S.type;switch(y){case"CIMPointSymbol":n=a?e.clone():m.fromCIMSymbol(e);break;case"CIMLineSymbol":l&&(n=O.clone(),($=o==null?void 0:o.logWarning)==null||$.call(o,"Unsupported CIM line symbology converted to fallback 3D line symbology"));break;case"CIMPolygonSymbol":l&&(n=Q.clone(),(C=o==null?void 0:o.logWarning)==null||C.call(o,"Unsupported CIM polygon symbology converted to fallback 3D polygon symbology"))}if(!n)return{error:new c("symbol-conversion:unsupported-cim-symbol",`CIM symbol of type '${y||"unknown"}' is unsupported in 3D`,{symbol:e})}}else if(e instanceof q)n=b.fromSimpleLineSymbol(e);else if(e instanceof A)n=m.fromSimpleMarkerSymbol(e);else if(e instanceof g)n=m.fromPictureMarkerSymbol(e);else if(e instanceof B)n=o.geometryType&&o.geometryType==="mesh"?I.fromSimpleFillSymbol(e):p.fromSimpleFillSymbol(e);else{if(!(e instanceof G))return{error:new c("symbol-conversion:unsupported-2d-symbol",`2D symbol of type '${e.type||e.declaredClass}' is unsupported in 3D`,{symbol:e})};n=s?F.fromTextSymbol(e):m.fromTextSymbol(e)}return t&&n&&n.type!=="cim"&&(n.id=e.id),r&&h(n)&&n.symbolLayers.forEach(y=>y.ignoreDrivers=!0),{symbol:n}}function te(e,o,t,r){const s=x(e,{},{context:r,isLabelSymbol:!1});s!=null&&(o[t]=s)}function ie(e,o,t,r){const s=x(e,{},{context:r,isLabelSymbol:!0});s!=null&&(o[t]=s)}function M(e){return e instanceof T||e instanceof k}function x(e,o,t){if(e==null)return null;const{context:r,isLabelSymbol:s}=t,a=r==null?void 0:r.origin,l=r==null?void 0:r.messages;if(a==="web-scene"&&!M(e)){const n=R(e,{retainCIM:!0,hasLabelingContext:s});return n.symbol!=null?n.symbol.write(o,r):(l==null||l.push(new c("symbol:unsupported",`Symbols of type '${e.declaredClass}' are not supported in scenes. Use 3D symbology instead when working with WebScene and SceneView`,{symbol:e,context:r,error:n.error})),null)}return(a==="web-map"||a==="portal-item"&&!z(r==null?void 0:r.layer))&&M(e)?(l==null||l.push(new c("symbol:unsupported",`Symbols of type '${e.declaredClass}' are not supported in web maps and portal items. Use 2D symbology and CIMSymbol instead when working with MapView`,{symbol:e,context:r})),null):e.write(o,r)}function ae(e,o){return U(e,null,o)}export{i as S,ae as b,le as d,R as g,ie as i,te as l};
