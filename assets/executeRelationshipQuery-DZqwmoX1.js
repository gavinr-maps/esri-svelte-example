import{f as d}from"./utils-Cy8wFNQo.js";import{P as f}from"./cast-BA_-jlhc.js";import{a2 as y}from"./Point-XGrwlf63.js";import{t as j}from"./query-BS_L6I0Q.js";import{d as R}from"./FeatureSet-DpCN730g.js";import u from"./RelationshipQuery-W-4bfgaH.js";import"./Accessor-BHnuXKD2.js";import"./index-tefRSezt.js";import"./JSONSupport-CGdeqxpk.js";import"./writer-B2bQV2uU.js";import"./jsonUtils-Cu7OBRmN.js";import"./Extent-CBBGeHb-.js";import"./Polyline-BmuD2-ZN.js";import"./mathUtils-DV9iOXpW.js";import"./normalizeUtils-XRAPXbWa.js";import"./normalizeUtilsCommon-D0zPTJCj.js";import"./utils-CkSELPnj.js";import"./pbfQueryUtils-AwPAOS5M.js";import"./pbf-CFI-xDDp.js";import"./memoryEstimations-5gFNwkKK.js";import"./OptimizedGeometry-7IxBWtHr.js";import"./OptimizedFeature-DcMLlxvB.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./queryZScale-DwN6mTru.js";import"./projection-B2I9Bzj_.js";import"./SimpleObservable-7oieNGD8.js";import"./vec3f64-BLpZdpfb.js";import"./projectBuffer-DOU0xvVi.js";import"./geodesicConstants-yASAK_zX.js";import"./Graphic-CFXUQZlS.js";import"./Clonable-DvJsj5LF.js";import"./reactiveUtils-BR0C1Kq4.js";import"./Evented-DCWccWGU.js";import"./opacityUtils-CSd4XoR2.js";import"./Promise-CmQqe-ke.js";import"./enumeration-Cr5WIZs4.js";import"./Color-gncXBiLc.js";import"./colorUtils-Rxh2V3ai.js";import"./ActionToggle-__-l4AdQ.js";import"./Identifiable-BrT7zvUW.js";import"./typeUtils-BSg8Y507.js";import"./TextSymbol-BQ_NW9Xo.js";import"./screenUtils-_ZIvrt5o.js";import"./collectionUtils-CbaToa73.js";import"./Portal-CTRRujjZ.js";import"./aaBoundingBox-CeBivBRq.js";import"./Field-Cyk7Ur5d.js";import"./fieldType-L-VlbZqy.js";import"./Query-DCBIeen2.js";import"./FullTextSearch-BWm_kPUE.js";import"./TimeExtent-J5qnUFx_.js";import"./timeUtils-D2X862bk.js";function F(e,o){const t=e.toJSON();return t.objectIds&&(t.objectIds=t.objectIds.join(",")),t.orderByFields&&(t.orderByFields=t.orderByFields.join(",")),t.outFields&&!(o!=null&&o.returnCountOnly)?t.outFields.includes("*")?t.outFields="*":t.outFields=t.outFields.join(","):delete t.outFields,t.outSR&&(t.outSR=y(t.outSR)),t.dynamicDataSource&&(t.layer=JSON.stringify({source:t.dynamicDataSource}),delete t.dynamicDataSource),t}async function b(e,o,t){const i=await l(e,o,t),r=i.data,p=r.geometryType,m=r.spatialReference,n={};for(const a of r.relatedRecordGroups){const s={fields:void 0,objectIdFieldName:void 0,geometryType:p,spatialReference:m,hasZ:!!r.hasZ,hasM:!!r.hasM,features:a.relatedRecords};if(a.objectId!=null)n[a.objectId]=s;else for(const c of Object.keys(a))c!=="relatedRecords"&&(n[a[c]]=s)}return{...i,data:n}}async function h(e,o,t){const i=await l(e,o,t,{returnCountOnly:!0}),r=i.data,p={};for(const m of r.relatedRecordGroups)m.objectId!=null&&(p[m.objectId]=m.count);return{...i,data:p}}async function l(e,o,t={},i){const r=j({...e.query,f:"json",...i,...F(o,i)});return f(e.path+"/queryRelatedRecords",{...t,query:{...t.query,...r}})}async function bt(e,o,t){o=u.from(o);const i=d(e);return b(i,o,t).then(r=>{const p=r.data,m={};return Object.keys(p).forEach(n=>m[n]=R.fromJSON(p[n])),m})}async function ht(e,o,t){o=u.from(o);const i=d(e);return h(i,o,{...t}).then(r=>r.data)}export{bt as executeRelationshipQuery,ht as executeRelationshipQueryForCount};
